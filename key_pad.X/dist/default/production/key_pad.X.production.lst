

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Fri Dec 27 15:44:08 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=2
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=2
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=2
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=2
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    38                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    39                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    44                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    45                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    46  0000                     
    47                           ; Version 2.10
    48                           ; Generated 31/07/2019 GMT
    49                           ; 
    50                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    51                           ; All rights reserved.
    52                           ; 
    53                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    54                           ; 
    55                           ; Redistribution and use in source and binary forms, with or without modification, are
    56                           ; permitted provided that the following conditions are met:
    57                           ; 
    58                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    59                           ;        conditions and the following disclaimer.
    60                           ; 
    61                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    62                           ;        of conditions and the following disclaimer in the documentation and/or other
    63                           ;        materials provided with the distribution.
    64                           ; 
    65                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    66                           ;        software without specific prior written permission.
    67                           ; 
    68                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    69                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    70                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    71                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    72                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    73                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    74                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    75                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    76                           ; 
    77                           ; 
    78                           ; Code-generator required, PIC18F4520 Definitions
    79                           ; 
    80                           ; SFR Addresses
    81  0000                     
    82                           	psect	idataCOMRAM
    83  001820                     __pidataCOMRAM:
    84                           	opt callstack 0
    85                           
    86                           ;initializer for keypad_line_scan@k_scan
    87  001820  08                 	db	8
    88                           
    89                           	psect	smallconst
    90  000600                     __psmallconst:
    91                           	opt callstack 0
    92  000600  00                 	db	0
    93  000601                     _program_start:
    94                           	opt callstack 0
    95  000601  0D                 	db	13
    96  000602  0A                 	db	10
    97  000603  50                 	db	80
    98  000604  72                 	db	114
    99  000605  6F                 	db	111
   100  000606  67                 	db	103
   101  000607  72                 	db	114
   102  000608  61                 	db	97
   103  000609  6D                 	db	109
   104  00060A  20                 	db	32
   105  00060B  73                 	db	115
   106  00060C  74                 	db	116
   107  00060D  61                 	db	97
   108  00060E  72                 	db	114
   109  00060F  74                 	db	116
   110  000610  0A                 	db	10
   111  000611  0D                 	db	13
   112  000612  00                 	db	0
   113  000613                     __end_of_program_start:
   114                           	opt callstack 0
   115  0000                     _RCREG	set	4014
   116  0000                     _TXREG	set	4013
   117  0000                     _PIE1bits	set	3997
   118  0000                     _IPR1bits	set	3999
   119  0000                     _TXSTAbits	set	4012
   120  0000                     _BAUDCONbits	set	4024
   121  0000                     _RCSTAbits	set	4011
   122  0000                     _SPBRG	set	4015
   123  0000                     _SPBRGH	set	4016
   124  0000                     _TRISCbits	set	3988
   125  0000                     _PORTB	set	3969
   126  0000                     _INTCONbits	set	4082
   127  0000                     _INTCON3bits	set	4080
   128  0000                     _INTCON2bits	set	4081
   129  0000                     _TRISB	set	3987
   130  0000                     _OSCCONbits	set	4051
   131  0000                     _LATB	set	3978
   132  000613                     STR_1:
   133  000613  0D                 	db	13
   134  000614  4B                 	db	75	;'K'
   135  000615  65                 	db	101	;'e'
   136  000616  79                 	db	121	;'y'
   137  000617  20                 	db	32
   138  000618  76                 	db	118	;'v'
   139  000619  61                 	db	97	;'a'
   140  00061A  6C                 	db	108	;'l'
   141  00061B  75                 	db	117	;'u'
   142  00061C  65                 	db	101	;'e'
   143  00061D  3A                 	db	58	;':'
   144  00061E  20                 	db	32
   145  00061F  30                 	db	48	;'0'
   146  000620  78                 	db	120	;'x'
   147  000621  25                 	db	37
   148  000622  30                 	db	48	;'0'
   149  000623  32                 	db	50	;'2'
   150  000624  78                 	db	120	;'x'
   151  000625  20                 	db	32
   152  000626  25                 	db	37
   153  000627  63                 	db	99	;'c'
   154  000628  00                 	db	0
   155                           
   156                           ; #config settings
   157  000629  00                 	db	0	; dummy byte at the end
   158  0000                     
   159                           	psect	cinit
   160  001640                     __pcinit:
   161                           	opt callstack 0
   162  001640                     start_initialization:
   163                           	opt callstack 0
   164  001640                     __initialization:
   165                           	opt callstack 0
   166                           
   167                           ; Initialize objects allocated to COMRAM (1 bytes)
   168                           ; load TBLPTR registers with __pidataCOMRAM
   169  001640  0E20               	movlw	low __pidataCOMRAM
   170  001642  6EF6               	movwf	tblptrl,c
   171  001644  0E18               	movlw	high __pidataCOMRAM
   172  001646  6EF7               	movwf	tblptrh,c
   173  001648  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   174  00164A  6EF8               	movwf	tblptru,c
   175  00164C  0009               	tblrd		*+	;fetch initializer
   176  00164E  CFF5 F073          	movff	tablat,__pdataCOMRAM
   177                           
   178                           ; Clear objects allocated to BANK0 (59 bytes)
   179  001652  EE00  F080         	lfsr	0,__pbssBANK0
   180  001656  0E3B               	movlw	59
   181  001658                     clear_0:
   182  001658  6AEE               	clrf	postinc0,c
   183  00165A  06E8               	decf	wreg,f,c
   184  00165C  E1FD               	bnz	clear_0
   185                           
   186                           ; Clear objects allocated to COMRAM (9 bytes)
   187  00165E  EE00  F06A         	lfsr	0,__pbssCOMRAM
   188  001662  0E09               	movlw	9
   189  001664                     clear_1:
   190  001664  6AEE               	clrf	postinc0,c
   191  001666  06E8               	decf	wreg,f,c
   192  001668  E1FD               	bnz	clear_1
   193  00166A                     end_of_initialization:
   194                           	opt callstack 0
   195  00166A                     __end_of__initialization:
   196                           	opt callstack 0
   197  00166A  9074               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   198  00166C  9274               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   199  00166E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   200  001670  6EF8               	movwf	tblptru,c
   201  001672  0100               	movlb	0
   202  001674  EF74  F009         	goto	_main	;jump to C main() function
   203                           
   204                           	psect	bssCOMRAM
   205  00006A                     __pbssCOMRAM:
   206                           	opt callstack 0
   207  00006A                     _width:
   208                           	opt callstack 0
   209  00006A                     	ds	2
   210  00006C                     _prec:
   211                           	opt callstack 0
   212  00006C                     	ds	2
   213  00006E                     _flags:
   214                           	opt callstack 0
   215  00006E                     	ds	2
   216  000070                     _key_isr:
   217                           	opt callstack 0
   218  000070                     	ds	1
   219  000071                     _key_char:
   220                           	opt callstack 0
   221  000071                     	ds	1
   222  000072                     _key_value:
   223                           	opt callstack 0
   224  000072                     	ds	1
   225                           
   226                           	psect	dataCOMRAM
   227  000073                     __pdataCOMRAM:
   228                           	opt callstack 0
   229  000073                     keypad_line_scan@k_scan:
   230                           	opt callstack 0
   231  000073                     	ds	1
   232                           
   233                           	psect	bssBANK0
   234  000080                     __pbssBANK0:
   235                           	opt callstack 0
   236  000080                     _nout:
   237                           	opt callstack 0
   238  000080                     	ds	2
   239  000082                     _dbuf:
   240                           	opt callstack 0
   241  000082                     	ds	32
   242  0000A2                     _print_buffer:
   243                           	opt callstack 0
   244  0000A2                     	ds	25
   245                           
   246                           	psect	cstackBANK0
   247  0000BB                     __pcstackBANK0:
   248                           	opt callstack 0
   249  0000BB                     vfprintf@cfmt:
   250                           	opt callstack 0
   251                           
   252                           ; 2 bytes @ 0x0
   253  0000BB                     	ds	2
   254  0000BD                     ?_sprintf:
   255                           	opt callstack 0
   256  0000BD                     sprintf@s:
   257                           	opt callstack 0
   258                           
   259                           ; 2 bytes @ 0x2
   260  0000BD                     	ds	2
   261  0000BF                     sprintf@fmt:
   262                           	opt callstack 0
   263                           
   264                           ; 2 bytes @ 0x4
   265  0000BF                     	ds	8
   266  0000C7                     sprintf@ap:
   267                           	opt callstack 0
   268                           
   269                           ; 2 bytes @ 0xC
   270  0000C7                     	ds	2
   271  0000C9                     sprintf@f:
   272                           	opt callstack 0
   273                           
   274                           ; 6 bytes @ 0xE
   275  0000C9                     	ds	6
   276  0000CF                     ??_main:
   277                           
   278                           ; 1 bytes @ 0x14
   279  0000CF                     	ds	2
   280                           
   281                           	psect	cstackCOMRAM
   282  000001                     __pcstackCOMRAM:
   283                           	opt callstack 0
   284  000001                     keypad_to_value_int0@value:
   285                           	opt callstack 0
   286  000001                     keypad_to_value_int1@value:
   287                           	opt callstack 0
   288  000001                     keypad_to_value_int2@value:
   289                           	opt callstack 0
   290                           
   291                           ; 2 bytes @ 0x0
   292  000001                     	ds	2
   293  000003                     keypad_to_value_int0@value_char:
   294                           	opt callstack 0
   295  000003                     keypad_to_value_int1@value_char:
   296                           	opt callstack 0
   297  000003                     keypad_to_value_int2@value_char:
   298                           	opt callstack 0
   299                           
   300                           ; 2 bytes @ 0x2
   301  000003                     	ds	2
   302  000005                     ??_keypad_to_value_int0:
   303  000005                     ??_keypad_to_value_int1:
   304  000005                     ??_keypad_to_value_int2:
   305                           
   306                           ; 1 bytes @ 0x4
   307  000005                     	ds	2
   308  000007                     keypad_to_value_int0@port_value:
   309                           	opt callstack 0
   310  000007                     keypad_to_value_int1@port_value:
   311                           	opt callstack 0
   312  000007                     keypad_to_value_int2@port_value:
   313                           	opt callstack 0
   314                           
   315                           ; 1 bytes @ 0x6
   316  000007                     	ds	1
   317  000008                     ??_high_isr:
   318                           
   319                           ; 1 bytes @ 0x7
   320  000008                     	ds	2
   321  00000A                     ??_low_isr:
   322                           
   323                           ; 1 bytes @ 0x9
   324  00000A                     	ds	1
   325  00000B                     ?_strlen:
   326                           	opt callstack 0
   327  00000B                     ?_isupper:
   328                           	opt callstack 0
   329  00000B                     ?_isalpha:
   330                           	opt callstack 0
   331  00000B                     ?_isdigit:
   332                           	opt callstack 0
   333  00000B                     ?_isspace:
   334                           	opt callstack 0
   335  00000B                     ?_islower:
   336                           	opt callstack 0
   337  00000B                     ?___wmul:
   338                           	opt callstack 0
   339  00000B                     uart_send@c:
   340                           	opt callstack 0
   341  00000B                     uart_init@gen_reg:
   342                           	opt callstack 0
   343  00000B                     ___wmul@multiplier:
   344                           	opt callstack 0
   345  00000B                     isalpha@c:
   346                           	opt callstack 0
   347  00000B                     isdigit@c:
   348                           	opt callstack 0
   349  00000B                     isspace@c:
   350                           	opt callstack 0
   351  00000B                     isupper@c:
   352                           	opt callstack 0
   353  00000B                     fputc@c:
   354                           	opt callstack 0
   355  00000B                     strlen@s:
   356                           	opt callstack 0
   357  00000B                     islower@c:
   358                           	opt callstack 0
   359                           
   360                           ; 2 bytes @ 0xA
   361  00000B                     	ds	1
   362  00000C                     uart_send_string@c:
   363                           	opt callstack 0
   364                           
   365                           ; 2 bytes @ 0xB
   366  00000C                     	ds	1
   367  00000D                     ??_isupper:
   368  00000D                     ??_isalpha:
   369  00000D                     ??_isdigit:
   370  00000D                     ??_isspace:
   371  00000D                     ??_islower:
   372  00000D                     uart_init@sync:
   373                           	opt callstack 0
   374  00000D                     ___wmul@multiplicand:
   375                           	opt callstack 0
   376  00000D                     fputc@fp:
   377                           	opt callstack 0
   378  00000D                     strlen@a:
   379                           	opt callstack 0
   380                           
   381                           ; 2 bytes @ 0xC
   382  00000D                     	ds	1
   383  00000E                     ??_uart_send_string:
   384                           
   385                           ; 1 bytes @ 0xD
   386  00000E                     	ds	1
   387  00000F                     ??_fputc:
   388  00000F                     uart_init@brgh:
   389                           	opt callstack 0
   390  00000F                     ___wmul@product:
   391                           	opt callstack 0
   392                           
   393                           ; 2 bytes @ 0xE
   394  00000F                     	ds	1
   395  000010                     uart_send_string@i:
   396                           	opt callstack 0
   397                           
   398                           ; 1 bytes @ 0xF
   399  000010                     	ds	1
   400  000011                     ?_toupper:
   401                           	opt callstack 0
   402  000011                     _isspace$1180:
   403                           	opt callstack 0
   404  000011                     uart_init@brg16:
   405                           	opt callstack 0
   406  000011                     toupper@c:
   407                           	opt callstack 0
   408                           
   409                           ; 2 bytes @ 0x10
   410  000011                     	ds	1
   411  000012                     ?_atoi:
   412                           	opt callstack 0
   413  000012                     atoi@s:
   414                           	opt callstack 0
   415                           
   416                           ; 2 bytes @ 0x11
   417  000012                     	ds	1
   418  000013                     ??_toupper:
   419                           
   420                           ; 1 bytes @ 0x12
   421  000013                     	ds	1
   422  000014                     ??_atoi:
   423  000014                     fputs@s:
   424                           	opt callstack 0
   425                           
   426                           ; 2 bytes @ 0x13
   427  000014                     	ds	2
   428  000016                     fputs@fp:
   429                           	opt callstack 0
   430                           
   431                           ; 2 bytes @ 0x15
   432  000016                     	ds	1
   433  000017                     _toupper$1256:
   434                           	opt callstack 0
   435                           
   436                           ; 2 bytes @ 0x16
   437  000017                     	ds	1
   438  000018                     fputs@c:
   439                           	opt callstack 0
   440  000018                     atoi@neg:
   441                           	opt callstack 0
   442                           
   443                           ; 2 bytes @ 0x17
   444  000018                     	ds	1
   445  000019                     fputs@i:
   446                           	opt callstack 0
   447                           
   448                           ; 2 bytes @ 0x18
   449  000019                     	ds	1
   450  00001A                     _atoi$1153:
   451                           	opt callstack 0
   452                           
   453                           ; 2 bytes @ 0x19
   454  00001A                     	ds	1
   455  00001B                     ?_pad:
   456                           	opt callstack 0
   457  00001B                     pad@fp:
   458                           	opt callstack 0
   459                           
   460                           ; 2 bytes @ 0x1A
   461  00001B                     	ds	1
   462  00001C                     _atoi$1155:
   463                           	opt callstack 0
   464                           
   465                           ; 2 bytes @ 0x1B
   466  00001C                     	ds	1
   467  00001D                     pad@buf:
   468                           	opt callstack 0
   469                           
   470                           ; 2 bytes @ 0x1C
   471  00001D                     	ds	1
   472  00001E                     _atoi$1154:
   473                           	opt callstack 0
   474                           
   475                           ; 1 bytes @ 0x1D
   476  00001E                     	ds	1
   477  00001F                     pad@p:
   478                           	opt callstack 0
   479  00001F                     atoi@n:
   480                           	opt callstack 0
   481                           
   482                           ; 2 bytes @ 0x1E
   483  00001F                     	ds	2
   484  000021                     ??_pad:
   485                           
   486                           ; 1 bytes @ 0x20
   487  000021                     	ds	1
   488  000022                     pad@i:
   489                           	opt callstack 0
   490                           
   491                           ; 2 bytes @ 0x21
   492  000022                     	ds	2
   493  000024                     pad@w:
   494                           	opt callstack 0
   495                           
   496                           ; 2 bytes @ 0x23
   497  000024                     	ds	2
   498  000026                     ?_ctoa:
   499                           	opt callstack 0
   500  000026                     ?_xtoa:
   501                           	opt callstack 0
   502  000026                     ctoa@fp:
   503                           	opt callstack 0
   504  000026                     xtoa@fp:
   505                           	opt callstack 0
   506                           
   507                           ; 2 bytes @ 0x25
   508  000026                     	ds	2
   509  000028                     ctoa@c:
   510                           	opt callstack 0
   511  000028                     xtoa@d:
   512                           	opt callstack 0
   513                           
   514                           ; 8 bytes @ 0x27
   515  000028                     	ds	1
   516  000029                     ctoa@w:
   517                           	opt callstack 0
   518                           
   519                           ; 2 bytes @ 0x28
   520  000029                     	ds	7
   521  000030                     xtoa@x:
   522                           	opt callstack 0
   523                           
   524                           ; 1 bytes @ 0x2F
   525  000030                     	ds	1
   526  000031                     ??_xtoa:
   527                           
   528                           ; 1 bytes @ 0x30
   529  000031                     	ds	8
   530  000039                     _xtoa$682:
   531                           	opt callstack 0
   532                           
   533                           ; 2 bytes @ 0x38
   534  000039                     	ds	2
   535  00003B                     _xtoa$683:
   536                           	opt callstack 0
   537                           
   538                           ; 2 bytes @ 0x3A
   539  00003B                     	ds	2
   540  00003D                     xtoa@p:
   541                           	opt callstack 0
   542                           
   543                           ; 2 bytes @ 0x3C
   544  00003D                     	ds	2
   545  00003F                     xtoa@w:
   546                           	opt callstack 0
   547                           
   548                           ; 2 bytes @ 0x3E
   549  00003F                     	ds	2
   550  000041                     xtoa@n:
   551                           	opt callstack 0
   552                           
   553                           ; 8 bytes @ 0x40
   554  000041                     	ds	8
   555  000049                     xtoa@i:
   556                           	opt callstack 0
   557                           
   558                           ; 2 bytes @ 0x48
   559  000049                     	ds	2
   560  00004B                     xtoa@c:
   561                           	opt callstack 0
   562                           
   563                           ; 2 bytes @ 0x4A
   564  00004B                     	ds	2
   565  00004D                     ?_vfpfcnvrt:
   566                           	opt callstack 0
   567  00004D                     vfpfcnvrt@fp:
   568                           	opt callstack 0
   569                           
   570                           ; 2 bytes @ 0x4C
   571  00004D                     	ds	2
   572  00004F                     vfpfcnvrt@fmt:
   573                           	opt callstack 0
   574                           
   575                           ; 2 bytes @ 0x4E
   576  00004F                     	ds	2
   577  000051                     vfpfcnvrt@ap:
   578                           	opt callstack 0
   579                           
   580                           ; 2 bytes @ 0x50
   581  000051                     	ds	2
   582  000053                     ??_vfpfcnvrt:
   583                           
   584                           ; 1 bytes @ 0x52
   585  000053                     	ds	4
   586  000057                     vfpfcnvrt@llu:
   587                           	opt callstack 0
   588                           
   589                           ; 8 bytes @ 0x56
   590  000057                     	ds	8
   591  00005F                     vfpfcnvrt@done:
   592                           	opt callstack 0
   593                           
   594                           ; 2 bytes @ 0x5E
   595  00005F                     	ds	2
   596  000061                     _vfpfcnvrt$697:
   597                           	opt callstack 0
   598                           
   599                           ; 2 bytes @ 0x60
   600  000061                     	ds	2
   601  000063                     vfpfcnvrt@c:
   602                           	opt callstack 0
   603                           
   604                           ; 1 bytes @ 0x62
   605  000063                     	ds	1
   606  000064                     ?_vfprintf:
   607                           	opt callstack 0
   608  000064                     vfprintf@fp:
   609                           	opt callstack 0
   610                           
   611                           ; 2 bytes @ 0x63
   612  000064                     	ds	2
   613  000066                     vfprintf@fmt:
   614                           	opt callstack 0
   615                           
   616                           ; 2 bytes @ 0x65
   617  000066                     	ds	2
   618  000068                     vfprintf@ap:
   619                           	opt callstack 0
   620                           
   621                           ; 2 bytes @ 0x67
   622  000068                     	ds	2
   623  00006A                     
   624                           ; 1 bytes @ 0x69
   625 ;;
   626 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   627 ;;
   628 ;; *************** function _main *****************
   629 ;; Defined at:
   630 ;;		line 94 in file "main.c"
   631 ;; Parameters:    Size  Location     Type
   632 ;;		None
   633 ;; Auto vars:     Size  Location     Type
   634 ;;		None
   635 ;; Return value:  Size  Location     Type
   636 ;;                  1    wreg      void 
   637 ;; Registers used:
   638 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   639 ;; Tracked objects:
   640 ;;		On entry : 0/0
   641 ;;		On exit  : 0/0
   642 ;;		Unchanged: 0/0
   643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   644 ;;      Params:         0       0       0       0       0       0       0
   645 ;;      Locals:         0       0       0       0       0       0       0
   646 ;;      Temps:          0       2       0       0       0       0       0
   647 ;;      Totals:         0       2       0       0       0       0       0
   648 ;;Total ram usage:        2 bytes
   649 ;; Hardware stack levels required when called:   12
   650 ;; This function calls:
   651 ;;		_keypad_line_scan
   652 ;;		_keypad_read
   653 ;;		_uart_init
   654 ;;		_uart_send_string
   655 ;; This function is called by:
   656 ;;		Startup code after reset
   657 ;; This function uses a non-reentrant model
   658 ;;
   659                           
   660                           	psect	text0
   661  0012E8                     __ptext0:
   662                           	opt callstack 0
   663  0012E8                     _main:
   664                           	opt callstack 19
   665  0012E8                     
   666                           ;main.c: 96:     OSCCONbits.IDLEN = 0;
   667  0012E8  9ED3               	bcf	211,7,c	;volatile
   668  0012EA                     
   669                           ;main.c: 97:     OSCCONbits.IRCF = 0x07;
   670  0012EA  0E70               	movlw	112
   671  0012EC  12D3               	iorwf	211,f,c	;volatile
   672                           
   673                           ;main.c: 98:     OSCCONbits.SCS = 0x03;
   674  0012EE  0E03               	movlw	3
   675  0012F0  12D3               	iorwf	211,f,c	;volatile
   676  0012F2                     l73:
   677  0012F2  A4D3               	btfss	211,2,c	;volatile
   678  0012F4  EF7E  F009         	goto	u2191
   679  0012F8  EF80  F009         	goto	u2190
   680  0012FC                     u2191:
   681  0012FC  EF79  F009         	goto	l73
   682  001300                     u2190:
   683  001300                     
   684                           ;main.c: 101:     TRISB=0x07;
   685  001300  0E07               	movlw	7
   686  001302  6E93               	movwf	147,c	;volatile
   687                           
   688                           ;main.c: 102:     LATB=0x01;
   689  001304  0E01               	movlw	1
   690  001306  6E8A               	movwf	138,c	;volatile
   691  001308                     
   692                           ;main.c: 104:     uart_init(51,0,1,0);
   693  001308  0E00               	movlw	0
   694  00130A  6E0C               	movwf	(uart_init@gen_reg+1)^0,c
   695  00130C  0E33               	movlw	51
   696  00130E  6E0B               	movwf	uart_init@gen_reg^0,c
   697  001310  0E00               	movlw	0
   698  001312  6E0E               	movwf	(uart_init@sync+1)^0,c
   699  001314  0E00               	movlw	0
   700  001316  6E0D               	movwf	uart_init@sync^0,c
   701  001318  0E00               	movlw	0
   702  00131A  6E10               	movwf	(uart_init@brgh+1)^0,c
   703  00131C  0E01               	movlw	1
   704  00131E  6E0F               	movwf	uart_init@brgh^0,c
   705  001320  0E00               	movlw	0
   706  001322  6E12               	movwf	(uart_init@brg16+1)^0,c
   707  001324  0E00               	movlw	0
   708  001326  6E11               	movwf	uart_init@brg16^0,c
   709  001328  EC90  F00B         	call	_uart_init	;wreg free
   710  00132C                     
   711                           ;main.c: 106:     INTCON2bits.INTEDG0 = 1;
   712  00132C  8CF1               	bsf	241,6,c	;volatile
   713  00132E                     
   714                           ;main.c: 107:     INTCON2bits.INTEDG1 = 1;
   715  00132E  8AF1               	bsf	241,5,c	;volatile
   716  001330                     
   717                           ;main.c: 108:     INTCON2bits.INTEDG2 = 1;
   718  001330  88F1               	bsf	241,4,c	;volatile
   719  001332                     
   720                           ;main.c: 110:     INTCON3bits.INT1P = 1;
   721  001332  8CF0               	bsf	240,6,c	;volatile
   722  001334                     
   723                           ;main.c: 111:     INTCON3bits.INT2P = 1;
   724  001334  8EF0               	bsf	240,7,c	;volatile
   725  001336                     
   726                           ;main.c: 113:     INTCONbits.INT0E = 1;
   727  001336  88F2               	bsf	242,4,c	;volatile
   728  001338                     
   729                           ;main.c: 114:     INTCON3bits.INT1E = 1;
   730  001338  86F0               	bsf	240,3,c	;volatile
   731  00133A                     
   732                           ;main.c: 115:     INTCON3bits.INT2E = 1;
   733  00133A  88F0               	bsf	240,4,c	;volatile
   734  00133C                     
   735                           ;main.c: 117:     INTCONbits.GIEH = 1;
   736  00133C  8EF2               	bsf	242,7,c	;volatile
   737  00133E                     
   738                           ;main.c: 118:     INTCONbits.GIEL = 1;
   739  00133E  8CF2               	bsf	242,6,c	;volatile
   740  001340                     
   741                           ;main.c: 120:     _delay((unsigned long)((2000)*(8000000/4000.0)));
   742  001340  0E15               	movlw	21
   743  001342  0100               	movlb	0	; () banked
   744  001344  6FD0               	movwf	(??_main+1)& (0+255),b
   745  001346  0E4B               	movlw	75
   746  001348  6FCF               	movwf	??_main& (0+255),b
   747  00134A  0EBE               	movlw	190
   748  00134C                     u2217:
   749  00134C  2EE8               	decfsz	wreg,f,c
   750  00134E  D7FE               	bra	u2217
   751  001350  2FCF               	decfsz	??_main& (0+255),f,b
   752  001352  D7FC               	bra	u2217
   753  001354  2FD0               	decfsz	(??_main+1)& (0+255),f,b
   754  001356  D7FA               	bra	u2217
   755  001358  F000               	nop	
   756  00135A                     
   757                           ;main.c: 121:     uart_send_string((uint8_t *)program_start);
   758  00135A  0E01               	movlw	low _program_start
   759  00135C  6E0C               	movwf	uart_send_string@c^0,c
   760  00135E  0E06               	movlw	high _program_start
   761  001360  6E0D               	movwf	(uart_send_string@c+1)^0,c
   762  001362  ECC5  F009         	call	_uart_send_string	;wreg free
   763  001366                     l2603:
   764                           
   765                           ;main.c: 125:         keypad_line_scan();
   766  001366  ECF1  F00B         	call	_keypad_line_scan	;wreg free
   767  00136A                     
   768                           ;main.c: 126:         if(key_isr){
   769  00136A  5070               	movf	_key_isr^0,w,c	;volatile
   770  00136C  B4D8               	btfsc	status,2,c
   771  00136E  EFBB  F009         	goto	u2201
   772  001372  EFBD  F009         	goto	u2200
   773  001376                     u2201:
   774  001376  EFB3  F009         	goto	l2603
   775  00137A                     u2200:
   776  00137A                     
   777                           ;main.c: 127:           keypad_read();
   778  00137A  ECC6  F00B         	call	_keypad_read	;wreg free
   779  00137E                     
   780                           ;main.c: 128:             key_isr = 0;
   781  00137E  0E00               	movlw	0
   782  001380  6E70               	movwf	_key_isr^0,c	;volatile
   783  001382  EFB3  F009         	goto	l2603
   784  001386  EF15  F000         	goto	start
   785  00138A                     __end_of_main:
   786                           	opt callstack 0
   787                           
   788 ;; *************** function _uart_init *****************
   789 ;; Defined at:
   790 ;;		line 4 in file "uart_layer.c"
   791 ;; Parameters:    Size  Location     Type
   792 ;;  gen_reg         2   10[COMRAM] unsigned short 
   793 ;;  sync            2   12[COMRAM] unsigned int 
   794 ;;  brgh            2   14[COMRAM] unsigned int 
   795 ;;  brg16           2   16[COMRAM] unsigned int 
   796 ;; Auto vars:     Size  Location     Type
   797 ;;		None
   798 ;; Return value:  Size  Location     Type
   799 ;;                  1    wreg      void 
   800 ;; Registers used:
   801 ;;		wreg, status,2
   802 ;; Tracked objects:
   803 ;;		On entry : 0/0
   804 ;;		On exit  : 0/0
   805 ;;		Unchanged: 0/0
   806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   807 ;;      Params:         8       0       0       0       0       0       0
   808 ;;      Locals:         0       0       0       0       0       0       0
   809 ;;      Temps:          0       0       0       0       0       0       0
   810 ;;      Totals:         8       0       0       0       0       0       0
   811 ;;Total ram usage:        8 bytes
   812 ;; Hardware stack levels used:    1
   813 ;; Hardware stack levels required when called:    3
   814 ;; This function calls:
   815 ;;		Nothing
   816 ;; This function is called by:
   817 ;;		_main
   818 ;; This function uses a non-reentrant model
   819 ;;
   820                           
   821                           	psect	text1
   822  001720                     __ptext1:
   823                           	opt callstack 0
   824  001720                     _uart_init:
   825                           	opt callstack 27
   826  001720                     
   827                           ;uart_layer.c: 6:     TRISCbits.RC7=1;
   828  001720  8E94               	bsf	148,7,c	;volatile
   829                           
   830                           ;uart_layer.c: 7:     TRISCbits.RC6=1;
   831  001722  8C94               	bsf	148,6,c	;volatile
   832  001724                     
   833                           ;uart_layer.c: 9:     SPBRGH = (gen_reg & 0xFF00) >> 8;
   834  001724  500C               	movf	(uart_init@gen_reg+1)^0,w,c
   835  001726  6EB0               	movwf	176,c	;volatile
   836  001728                     
   837                           ;uart_layer.c: 10:     SPBRG = gen_reg & 0x00FF;
   838  001728  C00B  FFAF         	movff	uart_init@gen_reg,4015	;volatile
   839  00172C                     
   840                           ;uart_layer.c: 12:     RCSTAbits.CREN = 1;
   841  00172C  88AB               	bsf	171,4,c	;volatile
   842  00172E                     
   843                           ;uart_layer.c: 13:     RCSTAbits.SPEN = 1;
   844  00172E  8EAB               	bsf	171,7,c	;volatile
   845  001730                     
   846                           ;uart_layer.c: 14:     BAUDCONbits.BRG16 = brg16;
   847  001730  B011               	btfsc	uart_init@brg16^0,0,c
   848  001732  D002               	bra	u1465
   849  001734  96B8               	bcf	184,3,c	;volatile
   850  001736  D001               	bra	u1466
   851  001738                     u1465:
   852  001738  86B8               	bsf	184,3,c	;volatile
   853  00173A                     u1466:
   854  00173A                     
   855                           ;uart_layer.c: 16:     TXSTAbits.SYNC = sync;
   856  00173A  B00D               	btfsc	uart_init@sync^0,0,c
   857  00173C  D002               	bra	u1475
   858  00173E  98AC               	bcf	172,4,c	;volatile
   859  001740  D001               	bra	u1476
   860  001742                     u1475:
   861  001742  88AC               	bsf	172,4,c	;volatile
   862  001744                     u1476:
   863  001744                     
   864                           ;uart_layer.c: 17:     TXSTAbits.BRGH = brgh;
   865  001744  B00F               	btfsc	uart_init@brgh^0,0,c
   866  001746  D002               	bra	u1485
   867  001748  94AC               	bcf	172,2,c	;volatile
   868  00174A  D001               	bra	u1486
   869  00174C                     u1485:
   870  00174C  84AC               	bsf	172,2,c	;volatile
   871  00174E                     u1486:
   872  00174E                     
   873                           ;uart_layer.c: 18:     TXSTAbits.TXEN = 1;
   874  00174E  8AAC               	bsf	172,5,c	;volatile
   875  001750                     
   876                           ;uart_layer.c: 20:     IPR1bits.RCIP=1;
   877  001750  8A9F               	bsf	159,5,c	;volatile
   878  001752                     
   879                           ;uart_layer.c: 21:     PIE1bits.RCIE=1;
   880  001752  8A9D               	bsf	157,5,c	;volatile
   881  001754  0012               	return		;funcret
   882  001756                     __end_of_uart_init:
   883                           	opt callstack 0
   884                           
   885 ;; *************** function _keypad_read *****************
   886 ;; Defined at:
   887 ;;		line 89 in file "main.c"
   888 ;; Parameters:    Size  Location     Type
   889 ;;		None
   890 ;; Auto vars:     Size  Location     Type
   891 ;;		None
   892 ;; Return value:  Size  Location     Type
   893 ;;                  1    wreg      void 
   894 ;; Registers used:
   895 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   896 ;; Tracked objects:
   897 ;;		On entry : 0/0
   898 ;;		On exit  : 0/0
   899 ;;		Unchanged: 0/0
   900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   901 ;;      Params:         0       0       0       0       0       0       0
   902 ;;      Locals:         0       0       0       0       0       0       0
   903 ;;      Temps:          0       0       0       0       0       0       0
   904 ;;      Totals:         0       0       0       0       0       0       0
   905 ;;Total ram usage:        0 bytes
   906 ;; Hardware stack levels used:    1
   907 ;; Hardware stack levels required when called:   11
   908 ;; This function calls:
   909 ;;		_sprintf
   910 ;;		_uart_send_string
   911 ;; This function is called by:
   912 ;;		_main
   913 ;; This function uses a non-reentrant model
   914 ;;
   915                           
   916                           	psect	text2
   917  00178C                     __ptext2:
   918                           	opt callstack 0
   919  00178C                     _keypad_read:
   920                           	opt callstack 19
   921  00178C                     
   922                           ;main.c: 90:         sprintf((char*)print_buffer,"\rKey value: 0x%02x %c",key_value,key_
      +                          char);
   923  00178C  0EA2               	movlw	low _print_buffer
   924  00178E  0100               	movlb	0	; () banked
   925  001790  6FBD               	movwf	sprintf@s& (0+255),b
   926  001792  0E00               	movlw	high _print_buffer
   927  001794  6FBE               	movwf	(sprintf@s+1)& (0+255),b
   928  001796  0E13               	movlw	low STR_1
   929  001798  6FBF               	movwf	sprintf@fmt& (0+255),b
   930  00179A  0E06               	movlw	high STR_1
   931  00179C  6FC0               	movwf	(sprintf@fmt+1)& (0+255),b
   932  00179E  C072  F0C1         	movff	_key_value,?_sprintf+4	;volatile
   933  0017A2  6BC2               	clrf	(?_sprintf+5)& (0+255),b
   934  0017A4  C071  F0C3         	movff	_key_char,?_sprintf+6	;volatile
   935  0017A8  6BC4               	clrf	(?_sprintf+7)& (0+255),b
   936  0017AA  EC8E  F00A         	call	_sprintf	;wreg free
   937  0017AE                     
   938                           ;main.c: 91:         uart_send_string(print_buffer);
   939  0017AE  0EA2               	movlw	low _print_buffer
   940  0017B0  6E0C               	movwf	uart_send_string@c^0,c
   941  0017B2  0E00               	movlw	high _print_buffer
   942  0017B4  6E0D               	movwf	(uart_send_string@c+1)^0,c
   943  0017B6  ECC5  F009         	call	_uart_send_string	;wreg free
   944  0017BA  0012               	return		;funcret
   945  0017BC                     __end_of_keypad_read:
   946                           	opt callstack 0
   947                           
   948 ;; *************** function _uart_send_string *****************
   949 ;; Defined at:
   950 ;;		line 50 in file "uart_layer.c"
   951 ;; Parameters:    Size  Location     Type
   952 ;;  c               2   11[COMRAM] PTR unsigned char 
   953 ;;		 -> program_start(18), print_buffer(25), 
   954 ;; Auto vars:     Size  Location     Type
   955 ;;  i               1   15[COMRAM] unsigned char 
   956 ;; Return value:  Size  Location     Type
   957 ;;                  1    wreg      void 
   958 ;; Registers used:
   959 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   960 ;; Tracked objects:
   961 ;;		On entry : 0/0
   962 ;;		On exit  : 0/0
   963 ;;		Unchanged: 0/0
   964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   965 ;;      Params:         2       0       0       0       0       0       0
   966 ;;      Locals:         1       0       0       0       0       0       0
   967 ;;      Temps:          2       0       0       0       0       0       0
   968 ;;      Totals:         5       0       0       0       0       0       0
   969 ;;Total ram usage:        5 bytes
   970 ;; Hardware stack levels used:    1
   971 ;; Hardware stack levels required when called:    4
   972 ;; This function calls:
   973 ;;		_uart_send
   974 ;; This function is called by:
   975 ;;		_keypad_read
   976 ;;		_main
   977 ;; This function uses a non-reentrant model
   978 ;;
   979                           
   980                           	psect	text3
   981  00138A                     __ptext3:
   982                           	opt callstack 0
   983  00138A                     _uart_send_string:
   984                           	opt callstack 26
   985  00138A                     
   986                           ;uart_layer.c: 51:     uint8_t i=0;
   987  00138A  0E00               	movlw	0
   988  00138C  6E10               	movwf	uart_send_string@i^0,c
   989                           
   990                           ;uart_layer.c: 52:     while(c[i] != '\0'){
   991  00138E  EFE2  F009         	goto	l1959
   992  001392                     l1955:
   993                           
   994                           ;uart_layer.c: 53:         uart_send(c[i]);
   995  001392  5010               	movf	uart_send_string@i^0,w,c
   996  001394  240C               	addwf	uart_send_string@c^0,w,c
   997  001396  6E0E               	movwf	??_uart_send_string^0,c
   998  001398  0E00               	movlw	0
   999  00139A  200D               	addwfc	(uart_send_string@c+1)^0,w,c
  1000  00139C  6E0F               	movwf	(??_uart_send_string+1)^0,c
  1001  00139E  C00E  FFF6         	movff	??_uart_send_string,tblptrl
  1002  0013A2  C00F  FFF7         	movff	??_uart_send_string+1,tblptrh
  1003  0013A6  6AF8               	clrf	tblptru,c
  1004  0013A8  0E05               	movlw	(high __ramtop+-1)
  1005  0013AA  64F7               	cpfsgt	tblptrh,c
  1006  0013AC  D003               	bra	u1437
  1007  0013AE  0008               	tblrd		*
  1008  0013B0  50F5               	movf	tablat,w,c
  1009  0013B2  D005               	bra	u1430
  1010  0013B4                     u1437:
  1011  0013B4  CFF6 FFE1          	movff	tblptrl,fsr1l
  1012  0013B8  CFF7 FFE2          	movff	tblptrh,fsr1h
  1013  0013BC  50E7               	movf	indf1,w,c
  1014  0013BE                     u1430:
  1015  0013BE  EC01  F00C         	call	_uart_send
  1016  0013C2                     
  1017                           ;uart_layer.c: 54:         i++;
  1018  0013C2  2A10               	incf	uart_send_string@i^0,f,c
  1019  0013C4                     l1959:
  1020                           
  1021                           ;uart_layer.c: 52:     while(c[i] != '\0'){
  1022  0013C4  5010               	movf	uart_send_string@i^0,w,c
  1023  0013C6  240C               	addwf	uart_send_string@c^0,w,c
  1024  0013C8  6E0E               	movwf	??_uart_send_string^0,c
  1025  0013CA  0E00               	movlw	0
  1026  0013CC  200D               	addwfc	(uart_send_string@c+1)^0,w,c
  1027  0013CE  6E0F               	movwf	(??_uart_send_string+1)^0,c
  1028  0013D0  C00E  FFF6         	movff	??_uart_send_string,tblptrl
  1029  0013D4  C00F  FFF7         	movff	??_uart_send_string+1,tblptrh
  1030  0013D8  6AF8               	clrf	tblptru,c
  1031  0013DA  0E05               	movlw	(high __ramtop+-1)
  1032  0013DC  64F7               	cpfsgt	tblptrh,c
  1033  0013DE  D003               	bra	u1447
  1034  0013E0  0008               	tblrd		*
  1035  0013E2  50F5               	movf	tablat,w,c
  1036  0013E4  D005               	bra	u1440
  1037  0013E6                     u1447:
  1038  0013E6  CFF6 FFE1          	movff	tblptrl,fsr1l
  1039  0013EA  CFF7 FFE2          	movff	tblptrh,fsr1h
  1040  0013EE  50E7               	movf	indf1,w,c
  1041  0013F0                     u1440:
  1042  0013F0  0900               	iorlw	0
  1043  0013F2  A4D8               	btfss	status,2,c
  1044  0013F4  EFFE  F009         	goto	u1451
  1045  0013F8  EF00  F00A         	goto	u1450
  1046  0013FC                     u1451:
  1047  0013FC  EFC9  F009         	goto	l1955
  1048  001400                     u1450:
  1049  001400  0012               	return		;funcret
  1050  001402                     __end_of_uart_send_string:
  1051                           	opt callstack 0
  1052                           
  1053 ;; *************** function _uart_send *****************
  1054 ;; Defined at:
  1055 ;;		line 24 in file "uart_layer.c"
  1056 ;; Parameters:    Size  Location     Type
  1057 ;;  c               1    wreg     unsigned char 
  1058 ;; Auto vars:     Size  Location     Type
  1059 ;;  c               1   10[COMRAM] unsigned char 
  1060 ;; Return value:  Size  Location     Type
  1061 ;;                  1    wreg      void 
  1062 ;; Registers used:
  1063 ;;		wreg
  1064 ;; Tracked objects:
  1065 ;;		On entry : 0/0
  1066 ;;		On exit  : 0/0
  1067 ;;		Unchanged: 0/0
  1068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1069 ;;      Params:         0       0       0       0       0       0       0
  1070 ;;      Locals:         1       0       0       0       0       0       0
  1071 ;;      Temps:          0       0       0       0       0       0       0
  1072 ;;      Totals:         1       0       0       0       0       0       0
  1073 ;;Total ram usage:        1 bytes
  1074 ;; Hardware stack levels used:    1
  1075 ;; Hardware stack levels required when called:    3
  1076 ;; This function calls:
  1077 ;;		Nothing
  1078 ;; This function is called by:
  1079 ;;		_uart_send_string
  1080 ;;		_uart_send_array
  1081 ;; This function uses a non-reentrant model
  1082 ;;
  1083                           
  1084                           	psect	text4
  1085  001802                     __ptext4:
  1086                           	opt callstack 0
  1087  001802                     _uart_send:
  1088                           	opt callstack 26
  1089                           
  1090                           ;incstack = 0
  1091                           ;uart_send@c stored from wreg
  1092  001802  6E0B               	movwf	uart_send@c^0,c
  1093  001804                     
  1094                           ;uart_layer.c: 25:     while(TXSTAbits.TRMT==0){
  1095  001804  EF05  F00C         	goto	l123
  1096  001808                     l124:
  1097                           
  1098                           ;uart_layer.c: 26:         __nop();
  1099  001808  F000               	nop	
  1100  00180A                     l123:
  1101                           
  1102                           ;uart_layer.c: 25:     while(TXSTAbits.TRMT==0){
  1103  00180A  A2AC               	btfss	172,1,c	;volatile
  1104  00180C  EF0A  F00C         	goto	u1411
  1105  001810  EF0C  F00C         	goto	u1410
  1106  001814                     u1411:
  1107  001814  EF04  F00C         	goto	l124
  1108  001818                     u1410:
  1109  001818                     
  1110                           ;uart_layer.c: 28:     TXREG=c;
  1111  001818  C00B  FFAD         	movff	uart_send@c,4013	;volatile
  1112  00181C  0012               	return		;funcret
  1113  00181E                     __end_of_uart_send:
  1114                           	opt callstack 0
  1115                           
  1116 ;; *************** function _sprintf *****************
  1117 ;; Defined at:
  1118 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\nf_sprintf.c"
  1119 ;; Parameters:    Size  Location     Type
  1120 ;;  s               2    2[BANK0 ] PTR unsigned char 
  1121 ;;		 -> print_buffer(25), 
  1122 ;;  fmt             2    4[BANK0 ] PTR const unsigned char 
  1123 ;;		 -> STR_1(22), 
  1124 ;; Auto vars:     Size  Location     Type
  1125 ;;  f               6   14[BANK0 ] struct _IO_FILE
  1126 ;;  ap              2   12[BANK0 ] PTR void [1]
  1127 ;;		 -> ?_sprintf(2), 
  1128 ;;  ret             2    0        int 
  1129 ;; Return value:  Size  Location     Type
  1130 ;;                  2    2[BANK0 ] int 
  1131 ;; Registers used:
  1132 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1133 ;; Tracked objects:
  1134 ;;		On entry : 0/0
  1135 ;;		On exit  : 0/0
  1136 ;;		Unchanged: 0/0
  1137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1138 ;;      Params:         0       8       0       0       0       0       0
  1139 ;;      Locals:         0      10       0       0       0       0       0
  1140 ;;      Temps:          0       0       0       0       0       0       0
  1141 ;;      Totals:         0      18       0       0       0       0       0
  1142 ;;Total ram usage:       18 bytes
  1143 ;; Hardware stack levels used:    1
  1144 ;; Hardware stack levels required when called:   10
  1145 ;; This function calls:
  1146 ;;		_vfprintf
  1147 ;; This function is called by:
  1148 ;;		_keypad_read
  1149 ;; This function uses a non-reentrant model
  1150 ;;
  1151                           
  1152                           	psect	text5
  1153  00151C                     __ptext5:
  1154                           	opt callstack 0
  1155  00151C                     _sprintf:
  1156                           	opt callstack 19
  1157  00151C  0EC1               	movlw	low (?_sprintf+4)
  1158  00151E  0100               	movlb	0	; () banked
  1159  001520  6FC7               	movwf	sprintf@ap& (0+255),b
  1160  001522  0E00               	movlw	high (?_sprintf+4)
  1161  001524  6FC8               	movwf	(sprintf@ap+1)& (0+255),b
  1162  001526  C0BD  F0C9         	movff	sprintf@s,sprintf@f
  1163  00152A  C0BE  F0CA         	movff	sprintf@s+1,sprintf@f+1
  1164  00152E                     
  1165                           ; BSR set to: 0
  1166  00152E  0E00               	movlw	0
  1167  001530  6FCC               	movwf	(sprintf@f+3)& (0+255),b
  1168  001532  0E00               	movlw	0
  1169  001534  6FCB               	movwf	(sprintf@f+2)& (0+255),b
  1170  001536                     
  1171                           ; BSR set to: 0
  1172  001536  0E00               	movlw	0
  1173  001538  6FCE               	movwf	(sprintf@f+5)& (0+255),b
  1174  00153A  0E00               	movlw	0
  1175  00153C  6FCD               	movwf	(sprintf@f+4)& (0+255),b
  1176  00153E                     
  1177                           ; BSR set to: 0
  1178  00153E  0EC9               	movlw	low sprintf@f
  1179  001540  6E64               	movwf	vfprintf@fp^0,c
  1180  001542  0E00               	movlw	high sprintf@f
  1181  001544  6E65               	movwf	(vfprintf@fp+1)^0,c
  1182  001546  C0BF  F066         	movff	sprintf@fmt,vfprintf@fmt
  1183  00154A  C0C0  F067         	movff	sprintf@fmt+1,vfprintf@fmt+1
  1184  00154E  0EC7               	movlw	low sprintf@ap
  1185  001550  6E68               	movwf	vfprintf@ap^0,c
  1186  001552  0E00               	movlw	high sprintf@ap
  1187  001554  6E69               	movwf	(vfprintf@ap+1)^0,c
  1188  001556  EC01  F00A         	call	_vfprintf	;wreg free
  1189  00155A  0100               	movlb	0	; () banked
  1190  00155C  51CB               	movf	(sprintf@f+2)& (0+255),w,b
  1191  00155E  25BD               	addwf	sprintf@s& (0+255),w,b
  1192  001560  6ED9               	movwf	fsr2l,c
  1193  001562  51CC               	movf	(sprintf@f+3)& (0+255),w,b
  1194  001564  21BE               	addwfc	(sprintf@s+1)& (0+255),w,b
  1195  001566  6EDA               	movwf	fsr2h,c
  1196  001568  0E00               	movlw	0
  1197  00156A  6EDF               	movwf	indf2,c
  1198  00156C                     
  1199                           ; BSR set to: 0
  1200  00156C  0012               	return		;funcret
  1201  00156E                     __end_of_sprintf:
  1202                           	opt callstack 0
  1203                           
  1204 ;; *************** function _vfprintf *****************
  1205 ;; Defined at:
  1206 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
  1207 ;; Parameters:    Size  Location     Type
  1208 ;;  fp              2   99[COMRAM] PTR struct _IO_FILE
  1209 ;;		 -> sprintf@f(6), 
  1210 ;;  fmt             2  101[COMRAM] PTR const unsigned char 
  1211 ;;		 -> STR_1(22), 
  1212 ;;  ap              2  103[COMRAM] PTR PTR void 
  1213 ;;		 -> sprintf@ap(2), 
  1214 ;; Auto vars:     Size  Location     Type
  1215 ;;  cfmt            2    0[BANK0 ] PTR unsigned char 
  1216 ;;		 -> STR_1(22), 
  1217 ;; Return value:  Size  Location     Type
  1218 ;;                  2   99[COMRAM] int 
  1219 ;; Registers used:
  1220 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1221 ;; Tracked objects:
  1222 ;;		On entry : 0/0
  1223 ;;		On exit  : 0/0
  1224 ;;		Unchanged: 0/0
  1225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1226 ;;      Params:         6       0       0       0       0       0       0
  1227 ;;      Locals:         0       2       0       0       0       0       0
  1228 ;;      Temps:          0       0       0       0       0       0       0
  1229 ;;      Totals:         6       2       0       0       0       0       0
  1230 ;;Total ram usage:        8 bytes
  1231 ;; Hardware stack levels used:    1
  1232 ;; Hardware stack levels required when called:    9
  1233 ;; This function calls:
  1234 ;;		_vfpfcnvrt
  1235 ;; This function is called by:
  1236 ;;		_sprintf
  1237 ;; This function uses a non-reentrant model
  1238 ;;
  1239                           
  1240                           	psect	text6
  1241  001402                     __ptext6:
  1242                           	opt callstack 0
  1243  001402                     _vfprintf:
  1244                           	opt callstack 19
  1245  001402                     
  1246                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.1
      +                          0\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.10\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
  1247  001402  C066  F0BB         	movff	vfprintf@fmt,vfprintf@cfmt
  1248  001406  C067  F0BC         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  1249  00140A                     
  1250                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
  1251  00140A  0E00               	movlw	0
  1252  00140C  0100               	movlb	0	; () banked
  1253  00140E  6F81               	movwf	(_nout+1)& (0+255),b
  1254  001410  0E00               	movlw	0
  1255  001412  6F80               	movwf	_nout& (0+255),b
  1256                           
  1257                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  1258  001414  EF1F  F00A         	goto	l2553
  1259  001418                     l2551:
  1260                           
  1261                           ; BSR set to: 0
  1262                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
  1263  001418  C064  F04D         	movff	vfprintf@fp,vfpfcnvrt@fp
  1264  00141C  C065  F04E         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  1265  001420  0EBB               	movlw	low vfprintf@cfmt
  1266  001422  6E4F               	movwf	vfpfcnvrt@fmt^0,c
  1267  001424  0E00               	movlw	high vfprintf@cfmt
  1268  001426  6E50               	movwf	(vfpfcnvrt@fmt+1)^0,c
  1269  001428  C068  F051         	movff	vfprintf@ap,vfpfcnvrt@ap
  1270  00142C  C069  F052         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  1271  001430  EC15  F003         	call	_vfpfcnvrt	;wreg free
  1272  001434  504D               	movf	?_vfpfcnvrt^0,w,c
  1273  001436  0100               	movlb	0	; () banked
  1274  001438  2780               	addwf	_nout& (0+255),f,b
  1275  00143A  504E               	movf	(?_vfpfcnvrt+1)^0,w,c
  1276  00143C  2381               	addwfc	(_nout+1)& (0+255),f,b
  1277  00143E                     l2553:
  1278                           
  1279                           ; BSR set to: 0
  1280                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  1281  00143E  C0BB  FFF6         	movff	vfprintf@cfmt,tblptrl
  1282  001442  C0BC  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  1283  001446                     	if	0	;tblptru may be non-zero
  1284  001446                     	endif
  1285  001446                     	if	0	;tblptru may be non-zero
  1286  001446                     	endif
  1287  001446  0008               	tblrd		*
  1288  001448  50F5               	movf	tablat,w,c
  1289  00144A  0900               	iorlw	0
  1290  00144C  A4D8               	btfss	status,2,c
  1291  00144E  EF2B  F00A         	goto	u2181
  1292  001452  EF2D  F00A         	goto	u2180
  1293  001456                     u2181:
  1294  001456  EF0C  F00A         	goto	l2551
  1295  00145A                     u2180:
  1296  00145A                     
  1297                           ; BSR set to: 0
  1298                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
  1299  00145A  C080  F064         	movff	_nout,?_vfprintf
  1300  00145E  C081  F065         	movff	_nout+1,?_vfprintf+1
  1301  001462                     
  1302                           ; BSR set to: 0
  1303  001462  0012               	return		;funcret
  1304  001464                     __end_of_vfprintf:
  1305                           	opt callstack 0
  1306                           
  1307 ;; *************** function _vfpfcnvrt *****************
  1308 ;; Defined at:
  1309 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
  1310 ;; Parameters:    Size  Location     Type
  1311 ;;  fp              2   76[COMRAM] PTR struct _IO_FILE
  1312 ;;		 -> sprintf@f(6), 
  1313 ;;  fmt             2   78[COMRAM] PTR PTR unsigned char 
  1314 ;;		 -> vfprintf@cfmt(2), 
  1315 ;;  ap              2   80[COMRAM] PTR PTR void 
  1316 ;;		 -> sprintf@ap(2), 
  1317 ;; Auto vars:     Size  Location     Type
  1318 ;;  llu             8   86[COMRAM] unsigned long long 
  1319 ;;  ll              8    0        long long 
  1320 ;;  f               4    0        long long 
  1321 ;;  vp              3    0        PTR void 
  1322 ;;  ct              3    0        unsigned char [3]
  1323 ;;  cp              3    0        PTR unsigned char 
  1324 ;;  done            2   94[COMRAM] int 
  1325 ;;  i               2    0        int 
  1326 ;;  c               1   98[COMRAM] unsigned char 
  1327 ;; Return value:  Size  Location     Type
  1328 ;;                  2   76[COMRAM] int 
  1329 ;; Registers used:
  1330 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1331 ;; Tracked objects:
  1332 ;;		On entry : 0/0
  1333 ;;		On exit  : 0/0
  1334 ;;		Unchanged: 0/0
  1335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1336 ;;      Params:         6       0       0       0       0       0       0
  1337 ;;      Locals:        13       0       0       0       0       0       0
  1338 ;;      Temps:          4       0       0       0       0       0       0
  1339 ;;      Totals:        23       0       0       0       0       0       0
  1340 ;;Total ram usage:       23 bytes
  1341 ;; Hardware stack levels used:    1
  1342 ;; Hardware stack levels required when called:    8
  1343 ;; This function calls:
  1344 ;;		_atoi
  1345 ;;		_ctoa
  1346 ;;		_fputc
  1347 ;;		_isdigit
  1348 ;;		_xtoa
  1349 ;; This function is called by:
  1350 ;;		_vfprintf
  1351 ;; This function uses a non-reentrant model
  1352 ;;
  1353                           
  1354                           	psect	text7
  1355  00062A                     __ptext7:
  1356                           	opt callstack 0
  1357  00062A                     _vfpfcnvrt:
  1358                           	opt callstack 19
  1359  00062A                     
  1360                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.10\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.10\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 674:     long long ll;
  1361  00062A  C04F  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1362  00062E  C050  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1363  000632  CFDE FFF6          	movff	postinc2,tblptrl
  1364  000636  CFDD FFF7          	movff	postdec2,tblptrh
  1365  00063A                     	if	0	;tblptru may be non-zero
  1366  00063A                     	endif
  1367  00063A                     	if	0	;tblptru may be non-zero
  1368  00063A                     	endif
  1369  00063A  0008               	tblrd		*
  1370  00063C  50F5               	movf	tablat,w,c
  1371  00063E  0A25               	xorlw	37
  1372  000640  A4D8               	btfss	status,2,c
  1373  000642  EF25  F003         	goto	u2061
  1374  000646  EF27  F003         	goto	u2060
  1375  00064A                     u2061:
  1376  00064A  EFF4  F004         	goto	l2535
  1377  00064E                     u2060:
  1378  00064E                     
  1379                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
  1380  00064E  C04F  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1381  000652  C050  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1382  000656  2ADE               	incf	postinc2,f,c
  1383  000658  0E00               	movlw	0
  1384  00065A  22DD               	addwfc	postdec2,f,c
  1385  00065C                     
  1386                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
  1387  00065C  0E00               	movlw	0
  1388  00065E  6E6B               	movwf	(_width+1)^0,c
  1389  000660  0E00               	movlw	0
  1390  000662  6E6A               	movwf	_width^0,c
  1391  000664  C06A  F06E         	movff	_width,_flags
  1392  000668  C06B  F06F         	movff	_width+1,_flags+1
  1393  00066C                     
  1394                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
  1395  00066C  686C               	setf	_prec^0,c
  1396  00066E  686D               	setf	(_prec+1)^0,c
  1397  000670                     
  1398                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 688:       
      +                            done = 0;
  1399  000670  0E00               	movlw	0
  1400  000672  6E60               	movwf	(vfpfcnvrt@done+1)^0,c
  1401  000674  0E00               	movlw	0
  1402  000676  6E5F               	movwf	vfpfcnvrt@done^0,c
  1403                           
  1404                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 689:       
      +                            while (!done) {
  1405  000678  EF84  F003         	goto	l2475
  1406  00067C                     l2449:
  1407                           
  1408                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 692:       
      +                                        flags |= (1 << 0);
  1409  00067C  806E               	bsf	_flags^0,0,c
  1410  00067E                     l2451:
  1411                           
  1412                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 693:       
      +                                        ++*fmt;
  1413  00067E  C04F  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1414  000682  C050  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1415  000686  2ADE               	incf	postinc2,f,c
  1416  000688  0E00               	movlw	0
  1417  00068A  22DD               	addwfc	postdec2,f,c
  1418                           
  1419                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 694:       
      +                                        break;
  1420  00068C  EF84  F003         	goto	l2475
  1421  000690                     l2453:
  1422                           
  1423                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 696:       
      +                                        flags |= (1 << 1);
  1424  000690  826E               	bsf	_flags^0,1,c
  1425  000692  EF3F  F003         	goto	l2451
  1426  000696                     l2457:
  1427                           
  1428                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 700:       
      +                                        flags |= (1 << 2);
  1429  000696  846E               	bsf	_flags^0,2,c
  1430  000698  EF3F  F003         	goto	l2451
  1431  00069C                     l2461:
  1432                           
  1433                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 704:       
      +                                        flags |= (1 << 3);
  1434  00069C  866E               	bsf	_flags^0,3,c
  1435  00069E  EF3F  F003         	goto	l2451
  1436  0006A2                     l2465:
  1437                           
  1438                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 708:       
      +                                        flags |= (1 << 4);
  1439  0006A2  886E               	bsf	_flags^0,4,c
  1440  0006A4  EF3F  F003         	goto	l2451
  1441  0006A8                     l2469:
  1442                           
  1443                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 712:       
      +                                        done = 1;
  1444  0006A8  0E00               	movlw	0
  1445  0006AA  6E60               	movwf	(vfpfcnvrt@done+1)^0,c
  1446  0006AC  0E01               	movlw	1
  1447  0006AE  6E5F               	movwf	vfpfcnvrt@done^0,c
  1448                           
  1449                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 713:       
      +                                        break;
  1450  0006B0  EF84  F003         	goto	l2475
  1451  0006B4                     l2473:
  1452  0006B4  C04F  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1453  0006B8  C050  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1454  0006BC  CFDE FFF6          	movff	postinc2,tblptrl
  1455  0006C0  CFDD FFF7          	movff	postdec2,tblptrh
  1456  0006C4                     	if	0	;tblptru may be non-zero
  1457  0006C4                     	endif
  1458  0006C4                     	if	0	;tblptru may be non-zero
  1459  0006C4                     	endif
  1460  0006C4  0008               	tblrd		*
  1461  0006C6  50F5               	movf	tablat,w,c
  1462  0006C8  6E53               	movwf	??_vfpfcnvrt^0,c
  1463  0006CA  6A54               	clrf	(??_vfpfcnvrt+1)^0,c
  1464                           
  1465                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1466                           ; Switch size 1, requested type "simple"
  1467                           ; Number of cases is 1, Range of values is 0 to 0
  1468                           ; switch strategies available:
  1469                           ; Name         Instructions Cycles
  1470                           ; simple_byte            4     3 (average)
  1471                           ;	Chosen strategy is simple_byte
  1472  0006CC  5054               	movf	(??_vfpfcnvrt+1)^0,w,c
  1473  0006CE  0A00               	xorlw	0	; case 0
  1474  0006D0  B4D8               	btfsc	status,2,c
  1475  0006D2  EF6D  F003         	goto	l2711
  1476  0006D6  EF54  F003         	goto	l2469
  1477  0006DA                     l2711:
  1478                           
  1479                           ; Switch size 1, requested type "simple"
  1480                           ; Number of cases is 5, Range of values is 32 to 48
  1481                           ; switch strategies available:
  1482                           ; Name         Instructions Cycles
  1483                           ; simple_byte           16     9 (average)
  1484                           ;	Chosen strategy is simple_byte
  1485  0006DA  5053               	movf	??_vfpfcnvrt^0,w,c
  1486  0006DC  0A20               	xorlw	32	; case 32
  1487  0006DE  B4D8               	btfsc	status,2,c
  1488  0006E0  EF4E  F003         	goto	l2461
  1489  0006E4  0A03               	xorlw	3	; case 35
  1490  0006E6  B4D8               	btfsc	status,2,c
  1491  0006E8  EF51  F003         	goto	l2465
  1492  0006EC  0A08               	xorlw	8	; case 43
  1493  0006EE  B4D8               	btfsc	status,2,c
  1494  0006F0  EF4B  F003         	goto	l2457
  1495  0006F4  0A06               	xorlw	6	; case 45
  1496  0006F6  B4D8               	btfsc	status,2,c
  1497  0006F8  EF3E  F003         	goto	l2449
  1498  0006FC  0A1D               	xorlw	29	; case 48
  1499  0006FE  B4D8               	btfsc	status,2,c
  1500  000700  EF48  F003         	goto	l2453
  1501  000704  EF54  F003         	goto	l2469
  1502  000708                     l2475:
  1503                           
  1504                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 689:       
      +                            while (!done) {
  1505  000708  505F               	movf	vfpfcnvrt@done^0,w,c
  1506  00070A  1060               	iorwf	(vfpfcnvrt@done+1)^0,w,c
  1507  00070C  B4D8               	btfsc	status,2,c
  1508  00070E  EF8B  F003         	goto	u2071
  1509  000712  EF8D  F003         	goto	u2070
  1510  000716                     u2071:
  1511  000716  EF5A  F003         	goto	l2473
  1512  00071A                     u2070:
  1513  00071A                     
  1514                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 716:       
      +                            if (flags & (1 << 0)) {
  1515  00071A  A06E               	btfss	_flags^0,0,c
  1516  00071C  EF92  F003         	goto	u2081
  1517  000720  EF94  F003         	goto	u2080
  1518  000724                     u2081:
  1519  000724  EF95  F003         	goto	l2479
  1520  000728                     u2080:
  1521  000728                     
  1522                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 717:       
      +                                flags &= ~(1 << 1);
  1523  000728  926E               	bcf	_flags^0,1,c
  1524  00072A                     l2479:
  1525                           
  1526                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 723:       
      +                            if ((*fmt)[0] == '*') {
  1527  00072A  C04F  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1528  00072E  C050  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1529  000732  CFDE FFF6          	movff	postinc2,tblptrl
  1530  000736  CFDD FFF7          	movff	postdec2,tblptrh
  1531  00073A                     	if	0	;tblptru may be non-zero
  1532  00073A                     	endif
  1533  00073A                     	if	0	;tblptru may be non-zero
  1534  00073A                     	endif
  1535  00073A  0008               	tblrd		*
  1536  00073C  50F5               	movf	tablat,w,c
  1537  00073E  0A2A               	xorlw	42
  1538  000740  A4D8               	btfss	status,2,c
  1539  000742  EFA5  F003         	goto	u2091
  1540  000746  EFA7  F003         	goto	u2090
  1541  00074A                     u2091:
  1542  00074A  EFD0  F003         	goto	l2487
  1543  00074E                     u2090:
  1544  00074E                     
  1545                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 724:       
      +                                ++*fmt;
  1546  00074E  C04F  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1547  000752  C050  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1548  000756  2ADE               	incf	postinc2,f,c
  1549  000758  0E00               	movlw	0
  1550  00075A  22DD               	addwfc	postdec2,f,c
  1551                           
  1552                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 725:       
      +                                width = (*(int *)__va_arg(*(int **)ap, (int)0));
  1553  00075C  C051  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1554  000760  C052  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1555  000764  CFDF F053          	movff	indf2,??_vfpfcnvrt
  1556  000768  0E02               	movlw	2
  1557  00076A  26DE               	addwf	postinc2,f,c
  1558  00076C  CFDF F054          	movff	indf2,??_vfpfcnvrt+1
  1559  000770  0E00               	movlw	0
  1560  000772  22DD               	addwfc	postdec2,f,c
  1561  000774  C053  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1562  000778  C054  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1563  00077C  CFDE F06A          	movff	postinc2,_width
  1564  000780  CFDD F06B          	movff	postdec2,_width+1
  1565  000784                     
  1566                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 726:       
      +                                if (width < 0) {
  1567  000784  BE6B               	btfsc	(_width+1)^0,7,c
  1568  000786  EFC9  F003         	goto	u2100
  1569  00078A  EFC7  F003         	goto	u2101
  1570  00078E                     u2101:
  1571  00078E  EF13  F004         	goto	l2497
  1572  000792                     u2100:
  1573  000792                     
  1574                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 727:       
      +                                    flags |= (1 << 0);
  1575  000792  806E               	bsf	_flags^0,0,c
  1576                           
  1577                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 728:       
      +                                    width = -width;
  1578  000794  6C6A               	negf	_width^0,c
  1579  000796  1E6B               	comf	(_width+1)^0,f,c
  1580  000798  B0D8               	btfsc	status,0,c
  1581  00079A  2A6B               	incf	(_width+1)^0,f,c
  1582  00079C  EF13  F004         	goto	l2497
  1583  0007A0                     l2487:
  1584                           
  1585                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 731:       
      +                                width = atoi(*fmt);
  1586  0007A0  C04F  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1587  0007A4  C050  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1588  0007A8  CFDE F012          	movff	postinc2,atoi@s
  1589  0007AC  CFDD F013          	movff	postdec2,atoi@s+1
  1590  0007B0  EC7A  F006         	call	_atoi	;wreg free
  1591  0007B4  C012  F06A         	movff	?_atoi,_width
  1592  0007B8  C013  F06B         	movff	?_atoi+1,_width+1
  1593                           
  1594                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 732:       
      +                                while ((0 ? isdigit((*fmt)[0]) : ((unsigned)((*fmt)[0])-'0') < 10)) {
  1595  0007BC  EFE7  F003         	goto	l2491
  1596  0007C0                     l2489:
  1597                           
  1598                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 733:       
      +                                    ++*fmt;
  1599  0007C0  C04F  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1600  0007C4  C050  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1601  0007C8  2ADE               	incf	postinc2,f,c
  1602  0007CA  0E00               	movlw	0
  1603  0007CC  22DD               	addwfc	postdec2,f,c
  1604  0007CE                     l2491:
  1605  0007CE  0ED0               	movlw	208
  1606  0007D0  6E53               	movwf	??_vfpfcnvrt^0,c
  1607  0007D2  0EFF               	movlw	255
  1608  0007D4  6E54               	movwf	(??_vfpfcnvrt+1)^0,c
  1609  0007D6  C04F  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1610  0007DA  C050  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1611  0007DE  CFDE FFF6          	movff	postinc2,tblptrl
  1612  0007E2  CFDD FFF7          	movff	postdec2,tblptrh
  1613  0007E6                     	if	0	;tblptru may be non-zero
  1614  0007E6                     	endif
  1615  0007E6                     	if	0	;tblptru may be non-zero
  1616  0007E6                     	endif
  1617  0007E6  0008               	tblrd		*
  1618  0007E8  50F5               	movf	tablat,w,c
  1619  0007EA  6E55               	movwf	(??_vfpfcnvrt+2)^0,c
  1620  0007EC  6A56               	clrf	(??_vfpfcnvrt+3)^0,c
  1621  0007EE  5053               	movf	??_vfpfcnvrt^0,w,c
  1622  0007F0  2655               	addwf	(??_vfpfcnvrt+2)^0,f,c
  1623  0007F2  5054               	movf	(??_vfpfcnvrt+1)^0,w,c
  1624  0007F4  2256               	addwfc	(??_vfpfcnvrt+3)^0,f,c
  1625  0007F6  5056               	movf	(??_vfpfcnvrt+3)^0,w,c
  1626  0007F8  E10A               	bnz	u2110
  1627  0007FA  0E0A               	movlw	10
  1628  0007FC  5C55               	subwf	(??_vfpfcnvrt+2)^0,w,c
  1629  0007FE  A0D8               	btfss	status,0,c
  1630  000800  EF04  F004         	goto	u2111
  1631  000804  EF07  F004         	goto	u2110
  1632  000808                     u2111:
  1633  000808  0E01               	movlw	1
  1634  00080A  EF08  F004         	goto	u2120
  1635  00080E                     u2110:
  1636  00080E  0E00               	movlw	0
  1637  000810                     u2120:
  1638  000810  6E61               	movwf	_vfpfcnvrt$697^0,c
  1639  000812  6A62               	clrf	(_vfpfcnvrt$697+1)^0,c
  1640  000814  5061               	movf	_vfpfcnvrt$697^0,w,c
  1641  000816  1062               	iorwf	(_vfpfcnvrt$697+1)^0,w,c
  1642  000818  A4D8               	btfss	status,2,c
  1643  00081A  EF11  F004         	goto	u2131
  1644  00081E  EF13  F004         	goto	u2130
  1645  000822                     u2131:
  1646  000822  EFE0  F003         	goto	l2489
  1647  000826                     u2130:
  1648  000826                     l2497:
  1649                           
  1650                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 792:       
      +                            if (*fmt[0] == 'c') {
  1651  000826  C04F  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1652  00082A  C050  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1653  00082E  CFDE FFF6          	movff	postinc2,tblptrl
  1654  000832  CFDD FFF7          	movff	postdec2,tblptrh
  1655  000836                     	if	0	;tblptru may be non-zero
  1656  000836                     	endif
  1657  000836                     	if	0	;tblptru may be non-zero
  1658  000836                     	endif
  1659  000836  0008               	tblrd		*
  1660  000838  50F5               	movf	tablat,w,c
  1661  00083A  0A63               	xorlw	99
  1662  00083C  A4D8               	btfss	status,2,c
  1663  00083E  EF23  F004         	goto	u2141
  1664  000842  EF25  F004         	goto	u2140
  1665  000846                     u2141:
  1666  000846  EF4C  F004         	goto	l2505
  1667  00084A                     u2140:
  1668  00084A                     
  1669                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 793:       
      +                                ++*fmt;
  1670  00084A  C04F  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1671  00084E  C050  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1672  000852  2ADE               	incf	postinc2,f,c
  1673  000854  0E00               	movlw	0
  1674  000856  22DD               	addwfc	postdec2,f,c
  1675                           
  1676                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 794:       
      +                                c = (unsigned char)(*(int *)__va_arg(*(int **)ap, (int)0));
  1677  000858  C051  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1678  00085C  C052  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1679  000860  CFDF F053          	movff	indf2,??_vfpfcnvrt
  1680  000864  0E02               	movlw	2
  1681  000866  26DE               	addwf	postinc2,f,c
  1682  000868  CFDF F054          	movff	indf2,??_vfpfcnvrt+1
  1683  00086C  0E00               	movlw	0
  1684  00086E  22DD               	addwfc	postdec2,f,c
  1685  000870  C053  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1686  000874  C054  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1687  000878  50DF               	movf	indf2,w,c
  1688  00087A  6E63               	movwf	vfpfcnvrt@c^0,c
  1689  00087C                     
  1690                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 795:       
      +                                return ctoa(fp, c);
  1691  00087C  C04D  F026         	movff	vfpfcnvrt@fp,ctoa@fp
  1692  000880  C04E  F027         	movff	vfpfcnvrt@fp+1,ctoa@fp+1
  1693  000884  C063  F028         	movff	vfpfcnvrt@c,ctoa@c
  1694  000888  EC61  F00A         	call	_ctoa	;wreg free
  1695  00088C  C026  F04D         	movff	?_ctoa,?_vfpfcnvrt
  1696  000890  C027  F04E         	movff	?_ctoa+1,?_vfpfcnvrt+1
  1697  000894  EF0F  F005         	goto	l249
  1698  000898                     l2505:
  1699                           
  1700                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1274:      
      +                             if ((*fmt[0] == 'x') || (*fmt[0] == 'X')) {
  1701  000898  C04F  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1702  00089C  C050  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1703  0008A0  CFDE FFF6          	movff	postinc2,tblptrl
  1704  0008A4  CFDD FFF7          	movff	postdec2,tblptrh
  1705  0008A8                     	if	0	;tblptru may be non-zero
  1706  0008A8                     	endif
  1707  0008A8                     	if	0	;tblptru may be non-zero
  1708  0008A8                     	endif
  1709  0008A8  0008               	tblrd		*
  1710  0008AA  50F5               	movf	tablat,w,c
  1711  0008AC  0A78               	xorlw	120
  1712  0008AE  B4D8               	btfsc	status,2,c
  1713  0008B0  EF5C  F004         	goto	u2151
  1714  0008B4  EF5E  F004         	goto	u2150
  1715  0008B8                     u2151:
  1716  0008B8  EF70  F004         	goto	l2509
  1717  0008BC                     u2150:
  1718  0008BC  C04F  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1719  0008C0  C050  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1720  0008C4  CFDE FFF6          	movff	postinc2,tblptrl
  1721  0008C8  CFDD FFF7          	movff	postdec2,tblptrh
  1722  0008CC                     	if	0	;tblptru may be non-zero
  1723  0008CC                     	endif
  1724  0008CC                     	if	0	;tblptru may be non-zero
  1725  0008CC                     	endif
  1726  0008CC  0008               	tblrd		*
  1727  0008CE  50F5               	movf	tablat,w,c
  1728  0008D0  0A58               	xorlw	88
  1729  0008D2  A4D8               	btfss	status,2,c
  1730  0008D4  EF6E  F004         	goto	u2161
  1731  0008D8  EF70  F004         	goto	u2160
  1732  0008DC                     u2161:
  1733  0008DC  EFBE  F004         	goto	l2519
  1734  0008E0                     u2160:
  1735  0008E0                     l2509:
  1736                           
  1737                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1276:      
      +                                 c = (*fmt)[0];
  1738  0008E0  C04F  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1739  0008E4  C050  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1740  0008E8  CFDE FFF6          	movff	postinc2,tblptrl
  1741  0008EC  CFDD FFF7          	movff	postdec2,tblptrh
  1742  0008F0                     	if	0	;tblptru may be non-zero
  1743  0008F0                     	endif
  1744  0008F0                     	if	0	;tblptru may be non-zero
  1745  0008F0                     	endif
  1746  0008F0  0008               	tblrd		*
  1747  0008F2  CFF5 F063          	movff	tablat,vfpfcnvrt@c
  1748  0008F6                     
  1749                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1277:      
      +                                 ++*fmt;
  1750  0008F6  C04F  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1751  0008FA  C050  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1752  0008FE  2ADE               	incf	postinc2,f,c
  1753  000900  0E00               	movlw	0
  1754  000902  22DD               	addwfc	postdec2,f,c
  1755  000904                     
  1756                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1278:      
      +                                 llu = (unsigned long long)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsig
      +                          ned int)0));
  1757  000904  C051  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1758  000908  C052  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1759  00090C  CFDF F053          	movff	indf2,??_vfpfcnvrt
  1760  000910  0E02               	movlw	2
  1761  000912  26DE               	addwf	postinc2,f,c
  1762  000914  CFDF F054          	movff	indf2,??_vfpfcnvrt+1
  1763  000918  0E00               	movlw	0
  1764  00091A  22DD               	addwfc	postdec2,f,c
  1765  00091C  C053  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1766  000920  C054  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1767  000924  CFDE F055          	movff	postinc2,??_vfpfcnvrt+2
  1768  000928  CFDD F056          	movff	postdec2,??_vfpfcnvrt+3
  1769  00092C  C055  F057         	movff	??_vfpfcnvrt+2,vfpfcnvrt@llu
  1770  000930  C056  F058         	movff	??_vfpfcnvrt+3,vfpfcnvrt@llu+1
  1771  000934  6A59               	clrf	(vfpfcnvrt@llu+2)^0,c
  1772  000936  6A5A               	clrf	(vfpfcnvrt@llu+3)^0,c
  1773  000938  6A5B               	clrf	(vfpfcnvrt@llu+4)^0,c
  1774  00093A  6A5C               	clrf	(vfpfcnvrt@llu+5)^0,c
  1775  00093C  6A5D               	clrf	(vfpfcnvrt@llu+6)^0,c
  1776  00093E  6A5E               	clrf	(vfpfcnvrt@llu+7)^0,c
  1777  000940                     
  1778                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1280:      
      +                                 return xtoa(fp, llu, c);
  1779  000940  C04D  F026         	movff	vfpfcnvrt@fp,xtoa@fp
  1780  000944  C04E  F027         	movff	vfpfcnvrt@fp+1,xtoa@fp+1
  1781  000948  C057  F028         	movff	vfpfcnvrt@llu,xtoa@d
  1782  00094C  C058  F029         	movff	vfpfcnvrt@llu+1,xtoa@d+1
  1783  000950  C059  F02A         	movff	vfpfcnvrt@llu+2,xtoa@d+2
  1784  000954  C05A  F02B         	movff	vfpfcnvrt@llu+3,xtoa@d+3
  1785  000958  C05B  F02C         	movff	vfpfcnvrt@llu+4,xtoa@d+4
  1786  00095C  C05C  F02D         	movff	vfpfcnvrt@llu+5,xtoa@d+5
  1787  000960  C05D  F02E         	movff	vfpfcnvrt@llu+6,xtoa@d+6
  1788  000964  C05E  F02F         	movff	vfpfcnvrt@llu+7,xtoa@d+7
  1789  000968  C063  F030         	movff	vfpfcnvrt@c,xtoa@x
  1790  00096C  EC10  F005         	call	_xtoa	;wreg free
  1791  000970  C026  F04D         	movff	?_xtoa,?_vfpfcnvrt
  1792  000974  C027  F04E         	movff	?_xtoa+1,?_vfpfcnvrt+1
  1793  000978  EF0F  F005         	goto	l249
  1794  00097C                     l2519:
  1795                           
  1796                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  1797  00097C  C04F  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1798  000980  C050  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1799  000984  CFDE FFF6          	movff	postinc2,tblptrl
  1800  000988  CFDD FFF7          	movff	postdec2,tblptrh
  1801  00098C                     	if	0	;tblptru may be non-zero
  1802  00098C                     	endif
  1803  00098C                     	if	0	;tblptru may be non-zero
  1804  00098C                     	endif
  1805  00098C  0008               	tblrd		*
  1806  00098E  50F5               	movf	tablat,w,c
  1807  000990  0A25               	xorlw	37
  1808  000992  A4D8               	btfss	status,2,c
  1809  000994  EFCE  F004         	goto	u2171
  1810  000998  EFD0  F004         	goto	u2170
  1811  00099C                     u2171:
  1812  00099C  EFE7  F004         	goto	l2529
  1813  0009A0                     u2170:
  1814  0009A0                     
  1815                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  1816  0009A0  C04F  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1817  0009A4  C050  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1818  0009A8  2ADE               	incf	postinc2,f,c
  1819  0009AA  0E00               	movlw	0
  1820  0009AC  22DD               	addwfc	postdec2,f,c
  1821  0009AE                     
  1822                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  1823  0009AE  0E00               	movlw	0
  1824  0009B0  6E0C               	movwf	(fputc@c+1)^0,c
  1825  0009B2  0E25               	movlw	37
  1826  0009B4  6E0B               	movwf	fputc@c^0,c
  1827  0009B6  C04D  F00D         	movff	vfpfcnvrt@fp,fputc@fp
  1828  0009BA  C04E  F00E         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1829  0009BE  EC42  F007         	call	_fputc	;wreg free
  1830  0009C2                     l2525:
  1831                           
  1832                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  1833  0009C2  0E00               	movlw	0
  1834  0009C4  6E4E               	movwf	(?_vfpfcnvrt+1)^0,c
  1835  0009C6  0E01               	movlw	1
  1836  0009C8  6E4D               	movwf	?_vfpfcnvrt^0,c
  1837  0009CA  EF0F  F005         	goto	l249
  1838  0009CE                     l2529:
  1839                           
  1840                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  1841  0009CE  C04F  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1842  0009D2  C050  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1843  0009D6  2ADE               	incf	postinc2,f,c
  1844  0009D8  0E00               	movlw	0
  1845  0009DA  22DD               	addwfc	postdec2,f,c
  1846  0009DC                     
  1847                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  1848  0009DC  0E00               	movlw	0
  1849  0009DE  6E4E               	movwf	(?_vfpfcnvrt+1)^0,c
  1850  0009E0  0E00               	movlw	0
  1851  0009E2  6E4D               	movwf	?_vfpfcnvrt^0,c
  1852  0009E4  EF0F  F005         	goto	l249
  1853  0009E8                     l2535:
  1854                           
  1855                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  1856  0009E8  C04F  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1857  0009EC  C050  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1858  0009F0  CFDE FFF6          	movff	postinc2,tblptrl
  1859  0009F4  CFDD FFF7          	movff	postdec2,tblptrh
  1860  0009F8                     	if	0	;tblptru may be non-zero
  1861  0009F8                     	endif
  1862  0009F8                     	if	0	;tblptru may be non-zero
  1863  0009F8                     	endif
  1864  0009F8  0008               	tblrd		*
  1865  0009FA  50F5               	movf	tablat,w,c
  1866  0009FC  6E0B               	movwf	fputc@c^0,c
  1867  0009FE  6A0C               	clrf	(fputc@c+1)^0,c
  1868  000A00  C04D  F00D         	movff	vfpfcnvrt@fp,fputc@fp
  1869  000A04  C04E  F00E         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1870  000A08  EC42  F007         	call	_fputc	;wreg free
  1871  000A0C                     
  1872                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  1873  000A0C  C04F  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1874  000A10  C050  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1875  000A14  2ADE               	incf	postinc2,f,c
  1876  000A16  0E00               	movlw	0
  1877  000A18  22DD               	addwfc	postdec2,f,c
  1878  000A1A  EFE1  F004         	goto	l2525
  1879  000A1E                     l249:
  1880  000A1E  0012               	return		;funcret
  1881  000A20                     __end_of_vfpfcnvrt:
  1882                           	opt callstack 0
  1883                           
  1884 ;; *************** function _xtoa *****************
  1885 ;; Defined at:
  1886 ;;		line 623 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
  1887 ;; Parameters:    Size  Location     Type
  1888 ;;  fp              2   37[COMRAM] PTR struct _IO_FILE
  1889 ;;		 -> sprintf@f(6), 
  1890 ;;  d               8   39[COMRAM] unsigned long long 
  1891 ;;  x               1   47[COMRAM] unsigned char 
  1892 ;; Auto vars:     Size  Location     Type
  1893 ;;  n               8   64[COMRAM] unsigned long long 
  1894 ;;  c               2   74[COMRAM] int 
  1895 ;;  i               2   72[COMRAM] int 
  1896 ;;  w               2   62[COMRAM] int 
  1897 ;;  p               2   60[COMRAM] int 
  1898 ;; Return value:  Size  Location     Type
  1899 ;;                  2   37[COMRAM] int 
  1900 ;; Registers used:
  1901 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1902 ;; Tracked objects:
  1903 ;;		On entry : 0/0
  1904 ;;		On exit  : 0/0
  1905 ;;		Unchanged: 0/0
  1906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1907 ;;      Params:        11       0       0       0       0       0       0
  1908 ;;      Locals:        20       0       0       0       0       0       0
  1909 ;;      Temps:          8       0       0       0       0       0       0
  1910 ;;      Totals:        39       0       0       0       0       0       0
  1911 ;;Total ram usage:       39 bytes
  1912 ;; Hardware stack levels used:    1
  1913 ;; Hardware stack levels required when called:    7
  1914 ;; This function calls:
  1915 ;;		_isalpha
  1916 ;;		_isupper
  1917 ;;		_pad
  1918 ;;		_toupper
  1919 ;; This function is called by:
  1920 ;;		_vfpfcnvrt
  1921 ;; This function uses a non-reentrant model
  1922 ;;
  1923                           
  1924                           	psect	text8
  1925  000A20                     __ptext8:
  1926                           	opt callstack 0
  1927  000A20                     _xtoa:
  1928                           	opt callstack 19
  1929  000A20                     
  1930                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 623: static
      +                           int xtoa(FILE *fp, unsigned long long d, char x);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.10\pic\sources\c99\common\doprnt.c: 624: {;C:\Program Files (x86)\Microchip\xc8\v2.10\
      +                          pic\sources\c99\common\doprnt.c: 625:     int c, i, p, w;;C:\Program Files (x86)\Microch
      +                          ip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 626:     unsigned long long n;;C:\Program 
      +                          Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 629:     if (!(prec < 0
      +                          )) {
  1931  000A20  BE6D               	btfsc	(_prec+1)^0,7,c
  1932  000A22  EF15  F005         	goto	u1821
  1933  000A26  EF17  F005         	goto	u1820
  1934  000A2A                     u1821:
  1935  000A2A  EF18  F005         	goto	l2335
  1936  000A2E                     u1820:
  1937  000A2E                     
  1938                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 630:       
      +                            flags &= ~(1 << 1);
  1939  000A2E  926E               	bcf	_flags^0,1,c
  1940  000A30                     l2335:
  1941                           
  1942                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 632:     p 
      +                          = (0 < prec) ? prec : 1;
  1943  000A30  BE6D               	btfsc	(_prec+1)^0,7,c
  1944  000A32  EF25  F005         	goto	u1830
  1945  000A36  506D               	movf	(_prec+1)^0,w,c
  1946  000A38  E106               	bnz	u1831
  1947  000A3A  046C               	decf	_prec^0,w,c
  1948  000A3C  B0D8               	btfsc	status,0,c
  1949  000A3E  EF23  F005         	goto	u1831
  1950  000A42  EF25  F005         	goto	u1830
  1951  000A46                     u1831:
  1952  000A46  EF2B  F005         	goto	l197
  1953  000A4A                     u1830:
  1954  000A4A  0E00               	movlw	0
  1955  000A4C  6E3E               	movwf	(xtoa@p+1)^0,c
  1956  000A4E  0E01               	movlw	1
  1957  000A50  6E3D               	movwf	xtoa@p^0,c
  1958  000A52  EF2F  F005         	goto	l199
  1959  000A56                     l197:
  1960  000A56  C06C  F03D         	movff	_prec,xtoa@p
  1961  000A5A  C06D  F03E         	movff	_prec+1,xtoa@p+1
  1962  000A5E                     l199:
  1963                           
  1964                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 633:     w 
      +                          = width;
  1965  000A5E  C06A  F03F         	movff	_width,xtoa@w
  1966  000A62  C06B  F040         	movff	_width+1,xtoa@w+1
  1967                           
  1968                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 634:     if
      +                           (flags & (1 << 4)) {
  1969  000A66  A86E               	btfss	_flags^0,4,c
  1970  000A68  EF38  F005         	goto	u1841
  1971  000A6C  EF3A  F005         	goto	u1840
  1972  000A70                     u1841:
  1973  000A70  EF3E  F005         	goto	l2341
  1974  000A74                     u1840:
  1975  000A74                     
  1976                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 635:       
      +                            w -= 2;
  1977  000A74  0EFE               	movlw	254
  1978  000A76  263F               	addwf	xtoa@w^0,f,c
  1979  000A78  0EFF               	movlw	255
  1980  000A7A  2240               	addwfc	(xtoa@w+1)^0,f,c
  1981  000A7C                     l2341:
  1982                           
  1983                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 639:     n 
      +                          = d;
  1984  000A7C  C028  F041         	movff	xtoa@d,xtoa@n
  1985  000A80  C029  F042         	movff	xtoa@d+1,xtoa@n+1
  1986  000A84  C02A  F043         	movff	xtoa@d+2,xtoa@n+2
  1987  000A88  C02B  F044         	movff	xtoa@d+3,xtoa@n+3
  1988  000A8C  C02C  F045         	movff	xtoa@d+4,xtoa@n+4
  1989  000A90  C02D  F046         	movff	xtoa@d+5,xtoa@n+5
  1990  000A94  C02E  F047         	movff	xtoa@d+6,xtoa@n+6
  1991  000A98  C02F  F048         	movff	xtoa@d+7,xtoa@n+7
  1992  000A9C                     
  1993                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 640:     i 
      +                          = sizeof(dbuf) - 1;
  1994  000A9C  0E00               	movlw	0
  1995  000A9E  6E4A               	movwf	(xtoa@i+1)^0,c
  1996  000AA0  0E1F               	movlw	31
  1997  000AA2  6E49               	movwf	xtoa@i^0,c
  1998  000AA4                     
  1999                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 641:     db
      +                          uf[i] = '\0';
  2000  000AA4  0E00               	movlw	0
  2001  000AA6  0100               	movlb	0	; () banked
  2002  000AA8  6FA1               	movwf	(_dbuf+31)& (0+255),b
  2003                           
  2004                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 642:     wh
      +                          ile (!(i < 2) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  2005  000AAA  EF0A  F006         	goto	l2377
  2006  000AAE                     l2347:
  2007                           
  2008                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 643:       
      +                            --i;
  2009  000AAE  0649               	decf	xtoa@i^0,f,c
  2010  000AB0  A0D8               	btfss	status,0,c
  2011  000AB2  064A               	decf	(xtoa@i+1)^0,f,c
  2012  000AB4                     
  2013                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 644:       
      +                            c = n & 0x0f;
  2014  000AB4  0E0F               	movlw	15
  2015  000AB6  1441               	andwf	xtoa@n^0,w,c
  2016  000AB8  6E4B               	movwf	xtoa@c^0,c
  2017  000ABA  6A4C               	clrf	(xtoa@c+1)^0,c
  2018  000ABC                     
  2019                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 645:       
      +                            c = (c < 10) ? '0' + c : 'a' + (c - 10);
  2020  000ABC  BE4C               	btfsc	(xtoa@c+1)^0,7,c
  2021  000ABE  EF6A  F005         	goto	u1851
  2022  000AC2  504C               	movf	(xtoa@c+1)^0,w,c
  2023  000AC4  E109               	bnz	u1850
  2024  000AC6  0E0A               	movlw	10
  2025  000AC8  5C4B               	subwf	xtoa@c^0,w,c
  2026  000ACA  A0D8               	btfss	status,0,c
  2027  000ACC  EF6A  F005         	goto	u1851
  2028  000AD0  EF6C  F005         	goto	u1850
  2029  000AD4                     u1851:
  2030  000AD4  EF74  F005         	goto	l2355
  2031  000AD8                     u1850:
  2032  000AD8  0E57               	movlw	87
  2033  000ADA  244B               	addwf	xtoa@c^0,w,c
  2034  000ADC  6E4B               	movwf	xtoa@c^0,c
  2035  000ADE  0E00               	movlw	0
  2036  000AE0  204C               	addwfc	(xtoa@c+1)^0,w,c
  2037  000AE2  6E4C               	movwf	(xtoa@c+1)^0,c
  2038  000AE4  EF7A  F005         	goto	l206
  2039  000AE8                     l2355:
  2040  000AE8  0E30               	movlw	48
  2041  000AEA  244B               	addwf	xtoa@c^0,w,c
  2042  000AEC  6E4B               	movwf	xtoa@c^0,c
  2043  000AEE  0E00               	movlw	0
  2044  000AF0  204C               	addwfc	(xtoa@c+1)^0,w,c
  2045  000AF2  6E4C               	movwf	(xtoa@c+1)^0,c
  2046  000AF4                     l206:
  2047  000AF4  0EBF               	movlw	191
  2048  000AF6  6E31               	movwf	??_xtoa^0,c
  2049  000AF8  0EFF               	movlw	255
  2050  000AFA  6E32               	movwf	(??_xtoa+1)^0,c
  2051  000AFC  5030               	movf	xtoa@x^0,w,c
  2052  000AFE  6E33               	movwf	(??_xtoa+2)^0,c
  2053  000B00  6A34               	clrf	(??_xtoa+3)^0,c
  2054  000B02  5031               	movf	??_xtoa^0,w,c
  2055  000B04  2633               	addwf	(??_xtoa+2)^0,f,c
  2056  000B06  5032               	movf	(??_xtoa+1)^0,w,c
  2057  000B08  2234               	addwfc	(??_xtoa+3)^0,f,c
  2058  000B0A  5034               	movf	(??_xtoa+3)^0,w,c
  2059  000B0C  E10A               	bnz	u1860
  2060  000B0E  0E1A               	movlw	26
  2061  000B10  5C33               	subwf	(??_xtoa+2)^0,w,c
  2062  000B12  A0D8               	btfss	status,0,c
  2063  000B14  EF8E  F005         	goto	u1861
  2064  000B18  EF91  F005         	goto	u1860
  2065  000B1C                     u1861:
  2066  000B1C  0E01               	movlw	1
  2067  000B1E  EF92  F005         	goto	u1870
  2068  000B22                     u1860:
  2069  000B22  0E00               	movlw	0
  2070  000B24                     u1870:
  2071  000B24  6E39               	movwf	_xtoa$682^0,c
  2072  000B26  6A3A               	clrf	(_xtoa$682+1)^0,c
  2073  000B28  5039               	movf	_xtoa$682^0,w,c
  2074  000B2A  103A               	iorwf	(_xtoa$682+1)^0,w,c
  2075  000B2C  B4D8               	btfsc	status,2,c
  2076  000B2E  EF9B  F005         	goto	u1881
  2077  000B32  EF9D  F005         	goto	u1880
  2078  000B36                     u1881:
  2079  000B36  EFCD  F005         	goto	l2369
  2080  000B3A                     u1880:
  2081  000B3A  0E9F               	movlw	159
  2082  000B3C  6E31               	movwf	??_xtoa^0,c
  2083  000B3E  0EFF               	movlw	255
  2084  000B40  6E32               	movwf	(??_xtoa+1)^0,c
  2085  000B42  0E20               	movlw	32
  2086  000B44  104B               	iorwf	xtoa@c^0,w,c
  2087  000B46  6E33               	movwf	(??_xtoa+2)^0,c
  2088  000B48  0E00               	movlw	0
  2089  000B4A  104C               	iorwf	(xtoa@c+1)^0,w,c
  2090  000B4C  6E34               	movwf	(??_xtoa+3)^0,c
  2091  000B4E  5031               	movf	??_xtoa^0,w,c
  2092  000B50  2633               	addwf	(??_xtoa+2)^0,f,c
  2093  000B52  5032               	movf	(??_xtoa+1)^0,w,c
  2094  000B54  2234               	addwfc	(??_xtoa+3)^0,f,c
  2095  000B56  5034               	movf	(??_xtoa+3)^0,w,c
  2096  000B58  E10A               	bnz	u1890
  2097  000B5A  0E1A               	movlw	26
  2098  000B5C  5C33               	subwf	(??_xtoa+2)^0,w,c
  2099  000B5E  A0D8               	btfss	status,0,c
  2100  000B60  EFB4  F005         	goto	u1891
  2101  000B64  EFB7  F005         	goto	u1890
  2102  000B68                     u1891:
  2103  000B68  0E01               	movlw	1
  2104  000B6A  EFB8  F005         	goto	u1900
  2105  000B6E                     u1890:
  2106  000B6E  0E00               	movlw	0
  2107  000B70                     u1900:
  2108  000B70  6E3B               	movwf	_xtoa$683^0,c
  2109  000B72  6A3C               	clrf	(_xtoa$683+1)^0,c
  2110  000B74  503B               	movf	_xtoa$683^0,w,c
  2111  000B76  103C               	iorwf	(_xtoa$683+1)^0,w,c
  2112  000B78  B4D8               	btfsc	status,2,c
  2113  000B7A  EFC1  F005         	goto	u1911
  2114  000B7E  EFC3  F005         	goto	u1910
  2115  000B82                     u1911:
  2116  000B82  EFCD  F005         	goto	l2369
  2117  000B86                     u1910:
  2118  000B86                     
  2119                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 647:       
      +                                c = toupper(c);
  2120  000B86  C04B  F011         	movff	xtoa@c,toupper@c
  2121  000B8A  C04C  F012         	movff	xtoa@c+1,toupper@c+1
  2122  000B8E  EC32  F00A         	call	_toupper	;wreg free
  2123  000B92  C011  F04B         	movff	?_toupper,xtoa@c
  2124  000B96  C012  F04C         	movff	?_toupper+1,xtoa@c+1
  2125  000B9A                     l2369:
  2126                           
  2127                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 649:       
      +                            dbuf[i] = (char)c;
  2128  000B9A  0E82               	movlw	low _dbuf
  2129  000B9C  2449               	addwf	xtoa@i^0,w,c
  2130  000B9E  6ED9               	movwf	fsr2l,c
  2131  000BA0  0E00               	movlw	high _dbuf
  2132  000BA2  204A               	addwfc	(xtoa@i+1)^0,w,c
  2133  000BA4  6EDA               	movwf	fsr2h,c
  2134  000BA6  C04B  FFDF         	movff	xtoa@c,indf2
  2135  000BAA                     
  2136                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 650:       
      +                            --p;
  2137  000BAA  063D               	decf	xtoa@p^0,f,c
  2138  000BAC  A0D8               	btfss	status,0,c
  2139  000BAE  063E               	decf	(xtoa@p+1)^0,f,c
  2140  000BB0                     
  2141                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 651:       
      +                            --w;
  2142  000BB0  063F               	decf	xtoa@w^0,f,c
  2143  000BB2  A0D8               	btfss	status,0,c
  2144  000BB4  0640               	decf	(xtoa@w+1)^0,f,c
  2145  000BB6                     
  2146                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 652:       
      +                            n = n >> 4;
  2147  000BB6  C041  F031         	movff	xtoa@n,??_xtoa
  2148  000BBA  C042  F032         	movff	xtoa@n+1,??_xtoa+1
  2149  000BBE  C043  F033         	movff	xtoa@n+2,??_xtoa+2
  2150  000BC2  C044  F034         	movff	xtoa@n+3,??_xtoa+3
  2151  000BC6  C045  F035         	movff	xtoa@n+4,??_xtoa+4
  2152  000BCA  C046  F036         	movff	xtoa@n+5,??_xtoa+5
  2153  000BCE  C047  F037         	movff	xtoa@n+6,??_xtoa+6
  2154  000BD2  C048  F038         	movff	xtoa@n+7,??_xtoa+7
  2155  000BD6  0E05               	movlw	5
  2156  000BD8  EFF7  F005         	goto	u1920
  2157  000BDC                     u1925:
  2158  000BDC  90D8               	bcf	status,0,c
  2159  000BDE  3238               	rrcf	(??_xtoa+7)^0,f,c
  2160  000BE0  3237               	rrcf	(??_xtoa+6)^0,f,c
  2161  000BE2  3236               	rrcf	(??_xtoa+5)^0,f,c
  2162  000BE4  3235               	rrcf	(??_xtoa+4)^0,f,c
  2163  000BE6  3234               	rrcf	(??_xtoa+3)^0,f,c
  2164  000BE8  3233               	rrcf	(??_xtoa+2)^0,f,c
  2165  000BEA  3232               	rrcf	(??_xtoa+1)^0,f,c
  2166  000BEC  3231               	rrcf	??_xtoa^0,f,c
  2167  000BEE                     u1920:
  2168  000BEE  2EE8               	decfsz	wreg,f,c
  2169  000BF0  EFEE  F005         	goto	u1925
  2170  000BF4  C031  F041         	movff	??_xtoa,xtoa@n
  2171  000BF8  C032  F042         	movff	??_xtoa+1,xtoa@n+1
  2172  000BFC  C033  F043         	movff	??_xtoa+2,xtoa@n+2
  2173  000C00  C034  F044         	movff	??_xtoa+3,xtoa@n+3
  2174  000C04  C035  F045         	movff	??_xtoa+4,xtoa@n+4
  2175  000C08  C036  F046         	movff	??_xtoa+5,xtoa@n+5
  2176  000C0C  C037  F047         	movff	??_xtoa+6,xtoa@n+6
  2177  000C10  C038  F048         	movff	??_xtoa+7,xtoa@n+7
  2178  000C14                     l2377:
  2179                           
  2180                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 642:     wh
      +                          ile (!(i < 2) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  2181  000C14  BE4A               	btfsc	(xtoa@i+1)^0,7,c
  2182  000C16  EF16  F006         	goto	u1931
  2183  000C1A  504A               	movf	(xtoa@i+1)^0,w,c
  2184  000C1C  E109               	bnz	u1930
  2185  000C1E  0E02               	movlw	2
  2186  000C20  5C49               	subwf	xtoa@i^0,w,c
  2187  000C22  A0D8               	btfss	status,0,c
  2188  000C24  EF16  F006         	goto	u1931
  2189  000C28  EF18  F006         	goto	u1930
  2190  000C2C                     u1931:
  2191  000C2C  EF48  F006         	goto	l220
  2192  000C30                     u1930:
  2193  000C30  5041               	movf	xtoa@n^0,w,c
  2194  000C32  1042               	iorwf	(xtoa@n+1)^0,w,c
  2195  000C34  1043               	iorwf	(xtoa@n+2)^0,w,c
  2196  000C36  1044               	iorwf	(xtoa@n+3)^0,w,c
  2197  000C38  1045               	iorwf	(xtoa@n+4)^0,w,c
  2198  000C3A  1046               	iorwf	(xtoa@n+5)^0,w,c
  2199  000C3C  1047               	iorwf	(xtoa@n+6)^0,w,c
  2200  000C3E  1048               	iorwf	(xtoa@n+7)^0,w,c
  2201  000C40  A4D8               	btfss	status,2,c
  2202  000C42  EF25  F006         	goto	u1941
  2203  000C46  EF27  F006         	goto	u1940
  2204  000C4A                     u1941:
  2205  000C4A  EF57  F005         	goto	l2347
  2206  000C4E                     u1940:
  2207  000C4E  BE3E               	btfsc	(xtoa@p+1)^0,7,c
  2208  000C50  EF34  F006         	goto	u1950
  2209  000C54  503E               	movf	(xtoa@p+1)^0,w,c
  2210  000C56  E106               	bnz	u1951
  2211  000C58  043D               	decf	xtoa@p^0,w,c
  2212  000C5A  B0D8               	btfsc	status,0,c
  2213  000C5C  EF32  F006         	goto	u1951
  2214  000C60  EF34  F006         	goto	u1950
  2215  000C64                     u1951:
  2216  000C64  EF57  F005         	goto	l2347
  2217  000C68                     u1950:
  2218  000C68  BE40               	btfsc	(xtoa@w+1)^0,7,c
  2219  000C6A  EF3F  F006         	goto	u1961
  2220  000C6E  5040               	movf	(xtoa@w+1)^0,w,c
  2221  000C70  E108               	bnz	u1960
  2222  000C72  043F               	decf	xtoa@w^0,w,c
  2223  000C74  A0D8               	btfss	status,0,c
  2224  000C76  EF3F  F006         	goto	u1961
  2225  000C7A  EF41  F006         	goto	u1960
  2226  000C7E                     u1961:
  2227  000C7E  EF48  F006         	goto	l220
  2228  000C82                     u1960:
  2229  000C82  B26E               	btfsc	_flags^0,1,c
  2230  000C84  EF46  F006         	goto	u1971
  2231  000C88  EF48  F006         	goto	u1970
  2232  000C8C                     u1971:
  2233  000C8C  EF57  F005         	goto	l2347
  2234  000C90                     u1970:
  2235  000C90                     l220:
  2236                           
  2237                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 656:     if
      +                           (flags & (1 << 4)) {
  2238  000C90  A86E               	btfss	_flags^0,4,c
  2239  000C92  EF4D  F006         	goto	u1981
  2240  000C96  EF4F  F006         	goto	u1980
  2241  000C9A                     u1981:
  2242  000C9A  EF65  F006         	goto	l2393
  2243  000C9E                     u1980:
  2244  000C9E                     
  2245                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 657:       
      +                            --i;
  2246  000C9E  0649               	decf	xtoa@i^0,f,c
  2247  000CA0  A0D8               	btfss	status,0,c
  2248  000CA2  064A               	decf	(xtoa@i+1)^0,f,c
  2249  000CA4                     
  2250                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 658:       
      +                            dbuf[i] = x;
  2251  000CA4  0E82               	movlw	low _dbuf
  2252  000CA6  2449               	addwf	xtoa@i^0,w,c
  2253  000CA8  6ED9               	movwf	fsr2l,c
  2254  000CAA  0E00               	movlw	high _dbuf
  2255  000CAC  204A               	addwfc	(xtoa@i+1)^0,w,c
  2256  000CAE  6EDA               	movwf	fsr2h,c
  2257  000CB0  C030  FFDF         	movff	xtoa@x,indf2
  2258  000CB4                     
  2259                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 659:       
      +                            --i;
  2260  000CB4  0649               	decf	xtoa@i^0,f,c
  2261  000CB6  A0D8               	btfss	status,0,c
  2262  000CB8  064A               	decf	(xtoa@i+1)^0,f,c
  2263                           
  2264                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 660:       
      +                            dbuf[i] = '0';
  2265  000CBA  0E82               	movlw	low _dbuf
  2266  000CBC  2449               	addwf	xtoa@i^0,w,c
  2267  000CBE  6ED9               	movwf	fsr2l,c
  2268  000CC0  0E00               	movlw	high _dbuf
  2269  000CC2  204A               	addwfc	(xtoa@i+1)^0,w,c
  2270  000CC4  6EDA               	movwf	fsr2h,c
  2271  000CC6  0E30               	movlw	48
  2272  000CC8  6EDF               	movwf	indf2,c
  2273  000CCA                     l2393:
  2274                           
  2275                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 664:     re
      +                          turn pad(fp, &dbuf[i], w);
  2276  000CCA  C026  F01B         	movff	xtoa@fp,pad@fp
  2277  000CCE  C027  F01C         	movff	xtoa@fp+1,pad@fp+1
  2278  000CD2  0E82               	movlw	low _dbuf
  2279  000CD4  2449               	addwf	xtoa@i^0,w,c
  2280  000CD6  6E1D               	movwf	pad@buf^0,c
  2281  000CD8  0E00               	movlw	high _dbuf
  2282  000CDA  204A               	addwfc	(xtoa@i+1)^0,w,c
  2283  000CDC  6E1E               	movwf	(pad@buf+1)^0,c
  2284  000CDE  C03F  F01F         	movff	xtoa@w,pad@p
  2285  000CE2  C040  F020         	movff	xtoa@w+1,pad@p+1
  2286  000CE6  ECA7  F007         	call	_pad	;wreg free
  2287  000CEA  C01B  F026         	movff	?_pad,?_xtoa
  2288  000CEE  C01C  F027         	movff	?_pad+1,?_xtoa+1
  2289  000CF2  0012               	return		;funcret
  2290  000CF4                     __end_of_xtoa:
  2291                           	opt callstack 0
  2292                           
  2293 ;; *************** function _toupper *****************
  2294 ;; Defined at:
  2295 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\toupper.c"
  2296 ;; Parameters:    Size  Location     Type
  2297 ;;  c               2   16[COMRAM] int 
  2298 ;; Auto vars:     Size  Location     Type
  2299 ;;		None
  2300 ;; Return value:  Size  Location     Type
  2301 ;;                  2   16[COMRAM] int 
  2302 ;; Registers used:
  2303 ;;		wreg, status,2, status,0
  2304 ;; Tracked objects:
  2305 ;;		On entry : 0/0
  2306 ;;		On exit  : 0/0
  2307 ;;		Unchanged: 0/0
  2308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2309 ;;      Params:         2       0       0       0       0       0       0
  2310 ;;      Locals:         2       0       0       0       0       0       0
  2311 ;;      Temps:          4       0       0       0       0       0       0
  2312 ;;      Totals:         8       0       0       0       0       0       0
  2313 ;;Total ram usage:        8 bytes
  2314 ;; Hardware stack levels used:    1
  2315 ;; Hardware stack levels required when called:    4
  2316 ;; This function calls:
  2317 ;;		_islower
  2318 ;; This function is called by:
  2319 ;;		_xtoa
  2320 ;; This function uses a non-reentrant model
  2321 ;;
  2322                           
  2323                           	psect	text9
  2324  001464                     __ptext9:
  2325                           	opt callstack 0
  2326  001464                     _toupper:
  2327                           	opt callstack 21
  2328  001464  0E9F               	movlw	159
  2329  001466  6E13               	movwf	??_toupper^0,c
  2330  001468  0EFF               	movlw	255
  2331  00146A  6E14               	movwf	(??_toupper+1)^0,c
  2332  00146C  C011  F015         	movff	toupper@c,??_toupper+2
  2333  001470  C012  F016         	movff	toupper@c+1,??_toupper+3
  2334  001474  5013               	movf	??_toupper^0,w,c
  2335  001476  2615               	addwf	(??_toupper+2)^0,f,c
  2336  001478  5014               	movf	(??_toupper+1)^0,w,c
  2337  00147A  2216               	addwfc	(??_toupper+3)^0,f,c
  2338  00147C  5016               	movf	(??_toupper+3)^0,w,c
  2339  00147E  E10A               	bnz	u1740
  2340  001480  0E1A               	movlw	26
  2341  001482  5C15               	subwf	(??_toupper+2)^0,w,c
  2342  001484  A0D8               	btfss	status,0,c
  2343  001486  EF47  F00A         	goto	u1741
  2344  00148A  EF4A  F00A         	goto	u1740
  2345  00148E                     u1741:
  2346  00148E  0E01               	movlw	1
  2347  001490  EF4B  F00A         	goto	u1750
  2348  001494                     u1740:
  2349  001494  0E00               	movlw	0
  2350  001496                     u1750:
  2351  001496  6E17               	movwf	_toupper$1256^0,c
  2352  001498  6A18               	clrf	(_toupper$1256+1)^0,c
  2353  00149A  5017               	movf	_toupper$1256^0,w,c
  2354  00149C  1018               	iorwf	(_toupper$1256+1)^0,w,c
  2355  00149E  B4D8               	btfsc	status,2,c
  2356  0014A0  EF54  F00A         	goto	u1761
  2357  0014A4  EF56  F00A         	goto	u1760
  2358  0014A8                     u1761:
  2359  0014A8  EF5C  F00A         	goto	l1031
  2360  0014AC                     u1760:
  2361  0014AC  0E5F               	movlw	95
  2362  0014AE  1411               	andwf	toupper@c^0,w,c
  2363  0014B0  6E11               	movwf	?_toupper^0,c
  2364  0014B2  6A12               	clrf	(?_toupper+1)^0,c
  2365  0014B4  EF60  F00A         	goto	l1036
  2366  0014B8                     l1031:
  2367  0014B8  C011  F011         	movff	toupper@c,?_toupper
  2368  0014BC  C012  F012         	movff	toupper@c+1,?_toupper+1
  2369  0014C0                     l1036:
  2370  0014C0  0012               	return		;funcret
  2371  0014C2                     __end_of_toupper:
  2372                           	opt callstack 0
  2373                           
  2374 ;; *************** function _islower *****************
  2375 ;; Defined at:
  2376 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\islower.c"
  2377 ;; Parameters:    Size  Location     Type
  2378 ;;  c               2   10[COMRAM] int 
  2379 ;; Auto vars:     Size  Location     Type
  2380 ;;		None
  2381 ;; Return value:  Size  Location     Type
  2382 ;;                  2   10[COMRAM] int 
  2383 ;; Registers used:
  2384 ;;		wreg, status,2, status,0
  2385 ;; Tracked objects:
  2386 ;;		On entry : 0/0
  2387 ;;		On exit  : 0/0
  2388 ;;		Unchanged: 0/0
  2389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2390 ;;      Params:         2       0       0       0       0       0       0
  2391 ;;      Locals:         0       0       0       0       0       0       0
  2392 ;;      Temps:          4       0       0       0       0       0       0
  2393 ;;      Totals:         6       0       0       0       0       0       0
  2394 ;;Total ram usage:        6 bytes
  2395 ;; Hardware stack levels used:    1
  2396 ;; Hardware stack levels required when called:    3
  2397 ;; This function calls:
  2398 ;;		Nothing
  2399 ;; This function is called by:
  2400 ;;		_toupper
  2401 ;; This function uses a non-reentrant model
  2402 ;;
  2403                           
  2404                           	psect	text10
  2405  001678                     __ptext10:
  2406                           	opt callstack 0
  2407  001678                     _islower:
  2408                           	opt callstack 21
  2409  001678  0E9F               	movlw	159
  2410  00167A  6E0D               	movwf	??_islower^0,c
  2411  00167C  0EFF               	movlw	255
  2412  00167E  6E0E               	movwf	(??_islower+1)^0,c
  2413  001680  C00B  F00F         	movff	islower@c,??_islower+2
  2414  001684  C00C  F010         	movff	islower@c+1,??_islower+3
  2415  001688  500D               	movf	??_islower^0,w,c
  2416  00168A  260F               	addwf	(??_islower+2)^0,f,c
  2417  00168C  500E               	movf	(??_islower+1)^0,w,c
  2418  00168E  2210               	addwfc	(??_islower+3)^0,f,c
  2419  001690  5010               	movf	(??_islower+3)^0,w,c
  2420  001692  E10A               	bnz	u1640
  2421  001694  0E1A               	movlw	26
  2422  001696  5C0F               	subwf	(??_islower+2)^0,w,c
  2423  001698  A0D8               	btfss	status,0,c
  2424  00169A  EF51  F00B         	goto	u1641
  2425  00169E  EF54  F00B         	goto	u1640
  2426  0016A2                     u1641:
  2427  0016A2  0E01               	movlw	1
  2428  0016A4  EF55  F00B         	goto	u1650
  2429  0016A8                     u1640:
  2430  0016A8  0E00               	movlw	0
  2431  0016AA                     u1650:
  2432  0016AA  6E0B               	movwf	?_islower^0,c
  2433  0016AC  6A0C               	clrf	(?_islower+1)^0,c
  2434  0016AE  0012               	return		;funcret
  2435  0016B0                     __end_of_islower:
  2436                           	opt callstack 0
  2437                           
  2438 ;; *************** function _isupper *****************
  2439 ;; Defined at:
  2440 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\isupper.c"
  2441 ;; Parameters:    Size  Location     Type
  2442 ;;  c               2   10[COMRAM] int 
  2443 ;; Auto vars:     Size  Location     Type
  2444 ;;		None
  2445 ;; Return value:  Size  Location     Type
  2446 ;;                  2   10[COMRAM] int 
  2447 ;; Registers used:
  2448 ;;		wreg, status,2, status,0
  2449 ;; Tracked objects:
  2450 ;;		On entry : 0/0
  2451 ;;		On exit  : 0/0
  2452 ;;		Unchanged: 0/0
  2453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2454 ;;      Params:         2       0       0       0       0       0       0
  2455 ;;      Locals:         0       0       0       0       0       0       0
  2456 ;;      Temps:          4       0       0       0       0       0       0
  2457 ;;      Totals:         6       0       0       0       0       0       0
  2458 ;;Total ram usage:        6 bytes
  2459 ;; Hardware stack levels used:    1
  2460 ;; Hardware stack levels required when called:    3
  2461 ;; This function calls:
  2462 ;;		Nothing
  2463 ;; This function is called by:
  2464 ;;		_xtoa
  2465 ;; This function uses a non-reentrant model
  2466 ;;
  2467                           
  2468                           	psect	text11
  2469  0016B0                     __ptext11:
  2470                           	opt callstack 0
  2471  0016B0                     _isupper:
  2472                           	opt callstack 22
  2473  0016B0  0EBF               	movlw	191
  2474  0016B2  6E0D               	movwf	??_isupper^0,c
  2475  0016B4  0EFF               	movlw	255
  2476  0016B6  6E0E               	movwf	(??_isupper+1)^0,c
  2477  0016B8  C00B  F00F         	movff	isupper@c,??_isupper+2
  2478  0016BC  C00C  F010         	movff	isupper@c+1,??_isupper+3
  2479  0016C0  500D               	movf	??_isupper^0,w,c
  2480  0016C2  260F               	addwf	(??_isupper+2)^0,f,c
  2481  0016C4  500E               	movf	(??_isupper+1)^0,w,c
  2482  0016C6  2210               	addwfc	(??_isupper+3)^0,f,c
  2483  0016C8  5010               	movf	(??_isupper+3)^0,w,c
  2484  0016CA  E10A               	bnz	u1700
  2485  0016CC  0E1A               	movlw	26
  2486  0016CE  5C0F               	subwf	(??_isupper+2)^0,w,c
  2487  0016D0  A0D8               	btfss	status,0,c
  2488  0016D2  EF6D  F00B         	goto	u1701
  2489  0016D6  EF70  F00B         	goto	u1700
  2490  0016DA                     u1701:
  2491  0016DA  0E01               	movlw	1
  2492  0016DC  EF71  F00B         	goto	u1710
  2493  0016E0                     u1700:
  2494  0016E0  0E00               	movlw	0
  2495  0016E2                     u1710:
  2496  0016E2  6E0B               	movwf	?_isupper^0,c
  2497  0016E4  6A0C               	clrf	(?_isupper+1)^0,c
  2498  0016E6  0012               	return		;funcret
  2499  0016E8                     __end_of_isupper:
  2500                           	opt callstack 0
  2501                           
  2502 ;; *************** function _isalpha *****************
  2503 ;; Defined at:
  2504 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\isalpha.c"
  2505 ;; Parameters:    Size  Location     Type
  2506 ;;  c               2   10[COMRAM] int 
  2507 ;; Auto vars:     Size  Location     Type
  2508 ;;		None
  2509 ;; Return value:  Size  Location     Type
  2510 ;;                  2   10[COMRAM] int 
  2511 ;; Registers used:
  2512 ;;		wreg, status,2, status,0
  2513 ;; Tracked objects:
  2514 ;;		On entry : 0/0
  2515 ;;		On exit  : 0/0
  2516 ;;		Unchanged: 0/0
  2517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2518 ;;      Params:         2       0       0       0       0       0       0
  2519 ;;      Locals:         0       0       0       0       0       0       0
  2520 ;;      Temps:          4       0       0       0       0       0       0
  2521 ;;      Totals:         6       0       0       0       0       0       0
  2522 ;;Total ram usage:        6 bytes
  2523 ;; Hardware stack levels used:    1
  2524 ;; Hardware stack levels required when called:    3
  2525 ;; This function calls:
  2526 ;;		Nothing
  2527 ;; This function is called by:
  2528 ;;		_xtoa
  2529 ;; This function uses a non-reentrant model
  2530 ;;
  2531                           
  2532                           	psect	text12
  2533  001604                     __ptext12:
  2534                           	opt callstack 0
  2535  001604                     _isalpha:
  2536                           	opt callstack 22
  2537  001604  0E9F               	movlw	159
  2538  001606  6E0D               	movwf	??_isalpha^0,c
  2539  001608  0EFF               	movlw	255
  2540  00160A  6E0E               	movwf	(??_isalpha+1)^0,c
  2541  00160C  0E20               	movlw	32
  2542  00160E  100B               	iorwf	isalpha@c^0,w,c
  2543  001610  6E0F               	movwf	(??_isalpha+2)^0,c
  2544  001612  0E00               	movlw	0
  2545  001614  100C               	iorwf	(isalpha@c+1)^0,w,c
  2546  001616  6E10               	movwf	(??_isalpha+3)^0,c
  2547  001618  500D               	movf	??_isalpha^0,w,c
  2548  00161A  260F               	addwf	(??_isalpha+2)^0,f,c
  2549  00161C  500E               	movf	(??_isalpha+1)^0,w,c
  2550  00161E  2210               	addwfc	(??_isalpha+3)^0,f,c
  2551  001620  5010               	movf	(??_isalpha+3)^0,w,c
  2552  001622  E10A               	bnz	u1720
  2553  001624  0E1A               	movlw	26
  2554  001626  5C0F               	subwf	(??_isalpha+2)^0,w,c
  2555  001628  A0D8               	btfss	status,0,c
  2556  00162A  EF19  F00B         	goto	u1721
  2557  00162E  EF1C  F00B         	goto	u1720
  2558  001632                     u1721:
  2559  001632  0E01               	movlw	1
  2560  001634  EF1D  F00B         	goto	u1730
  2561  001638                     u1720:
  2562  001638  0E00               	movlw	0
  2563  00163A                     u1730:
  2564  00163A  6E0B               	movwf	?_isalpha^0,c
  2565  00163C  6A0C               	clrf	(?_isalpha+1)^0,c
  2566  00163E  0012               	return		;funcret
  2567  001640                     __end_of_isalpha:
  2568                           	opt callstack 0
  2569                           
  2570 ;; *************** function _ctoa *****************
  2571 ;; Defined at:
  2572 ;;		line 259 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
  2573 ;; Parameters:    Size  Location     Type
  2574 ;;  fp              2   37[COMRAM] PTR struct _IO_FILE
  2575 ;;		 -> sprintf@f(6), 
  2576 ;;  c               1   39[COMRAM] unsigned char 
  2577 ;; Auto vars:     Size  Location     Type
  2578 ;;  w               2   40[COMRAM] int 
  2579 ;;  l               2    0        int 
  2580 ;; Return value:  Size  Location     Type
  2581 ;;                  2   37[COMRAM] int 
  2582 ;; Registers used:
  2583 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2584 ;; Tracked objects:
  2585 ;;		On entry : 0/0
  2586 ;;		On exit  : 0/0
  2587 ;;		Unchanged: 0/0
  2588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2589 ;;      Params:         3       0       0       0       0       0       0
  2590 ;;      Locals:         2       0       0       0       0       0       0
  2591 ;;      Temps:          0       0       0       0       0       0       0
  2592 ;;      Totals:         5       0       0       0       0       0       0
  2593 ;;Total ram usage:        5 bytes
  2594 ;; Hardware stack levels used:    1
  2595 ;; Hardware stack levels required when called:    7
  2596 ;; This function calls:
  2597 ;;		_pad
  2598 ;; This function is called by:
  2599 ;;		_vfpfcnvrt
  2600 ;; This function uses a non-reentrant model
  2601 ;;
  2602                           
  2603                           	psect	text13
  2604  0014C2                     __ptext13:
  2605                           	opt callstack 0
  2606  0014C2                     _ctoa:
  2607                           	opt callstack 19
  2608  0014C2                     
  2609                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 259: static
      +                           int ctoa(FILE *fp, char c);C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\c
      +                          ommon\doprnt.c: 260: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common
      +                          \doprnt.c: 261:     int l, w;;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99
      +                          \common\doprnt.c: 264:     w = width ? width - 1 : width;
  2610  0014C2  506A               	movf	_width^0,w,c
  2611  0014C4  106B               	iorwf	(_width+1)^0,w,c
  2612  0014C6  A4D8               	btfss	status,2,c
  2613  0014C8  EF68  F00A         	goto	u1811
  2614  0014CC  EF6A  F00A         	goto	u1810
  2615  0014D0                     u1811:
  2616  0014D0  EF70  F00A         	goto	l2321
  2617  0014D4                     u1810:
  2618  0014D4  C06A  F029         	movff	_width,ctoa@w
  2619  0014D8  C06B  F02A         	movff	_width+1,ctoa@w+1
  2620  0014DC  EF76  F00A         	goto	l2323
  2621  0014E0                     l2321:
  2622  0014E0  0EFF               	movlw	255
  2623  0014E2  246A               	addwf	_width^0,w,c
  2624  0014E4  6E29               	movwf	ctoa@w^0,c
  2625  0014E6  0EFF               	movlw	255
  2626  0014E8  206B               	addwfc	(_width+1)^0,w,c
  2627  0014EA  6E2A               	movwf	(ctoa@w+1)^0,c
  2628  0014EC                     l2323:
  2629                           
  2630                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 267:     db
      +                          uf[0] = c;
  2631  0014EC  C028  F082         	movff	ctoa@c,_dbuf
  2632  0014F0                     
  2633                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 268:     db
      +                          uf[1] = '\0';
  2634  0014F0  0E00               	movlw	0
  2635  0014F2  0100               	movlb	0	; () banked
  2636  0014F4  6F83               	movwf	(_dbuf+1)& (0+255),b
  2637  0014F6                     
  2638                           ; BSR set to: 0
  2639                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 269:     re
      +                          turn pad(fp, &dbuf[0], w);
  2640  0014F6  C026  F01B         	movff	ctoa@fp,pad@fp
  2641  0014FA  C027  F01C         	movff	ctoa@fp+1,pad@fp+1
  2642  0014FE  0E82               	movlw	low _dbuf
  2643  001500  6E1D               	movwf	pad@buf^0,c
  2644  001502  0E00               	movlw	high _dbuf
  2645  001504  6E1E               	movwf	(pad@buf+1)^0,c
  2646  001506  C029  F01F         	movff	ctoa@w,pad@p
  2647  00150A  C02A  F020         	movff	ctoa@w+1,pad@p+1
  2648  00150E  ECA7  F007         	call	_pad	;wreg free
  2649  001512  C01B  F026         	movff	?_pad,?_ctoa
  2650  001516  C01C  F027         	movff	?_pad+1,?_ctoa+1
  2651  00151A  0012               	return		;funcret
  2652  00151C                     __end_of_ctoa:
  2653                           	opt callstack 0
  2654                           
  2655 ;; *************** function _pad *****************
  2656 ;; Defined at:
  2657 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
  2658 ;; Parameters:    Size  Location     Type
  2659 ;;  fp              2   26[COMRAM] PTR struct _IO_FILE
  2660 ;;		 -> sprintf@f(6), 
  2661 ;;  buf             2   28[COMRAM] PTR unsigned char 
  2662 ;;		 -> dbuf(32), 
  2663 ;;  p               2   30[COMRAM] int 
  2664 ;; Auto vars:     Size  Location     Type
  2665 ;;  w               2   35[COMRAM] int 
  2666 ;;  i               2   33[COMRAM] int 
  2667 ;; Return value:  Size  Location     Type
  2668 ;;                  2   26[COMRAM] int 
  2669 ;; Registers used:
  2670 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2671 ;; Tracked objects:
  2672 ;;		On entry : 0/0
  2673 ;;		On exit  : 0/0
  2674 ;;		Unchanged: 0/0
  2675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2676 ;;      Params:         6       0       0       0       0       0       0
  2677 ;;      Locals:         4       0       0       0       0       0       0
  2678 ;;      Temps:          1       0       0       0       0       0       0
  2679 ;;      Totals:        11       0       0       0       0       0       0
  2680 ;;Total ram usage:       11 bytes
  2681 ;; Hardware stack levels used:    1
  2682 ;; Hardware stack levels required when called:    6
  2683 ;; This function calls:
  2684 ;;		_fputc
  2685 ;;		_fputs
  2686 ;;		_strlen
  2687 ;; This function is called by:
  2688 ;;		_ctoa
  2689 ;;		_xtoa
  2690 ;; This function uses a non-reentrant model
  2691 ;;
  2692                           
  2693                           	psect	text14
  2694  000F4E                     __ptext14:
  2695                           	opt callstack 0
  2696  000F4E                     _pad:
  2697                           	opt callstack 19
  2698  000F4E                     
  2699                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  2700  000F4E  A06E               	btfss	_flags^0,0,c
  2701  000F50  EFAC  F007         	goto	u1661
  2702  000F54  EFAE  F007         	goto	u1660
  2703  000F58                     u1661:
  2704  000F58  EFB8  F007         	goto	l2259
  2705  000F5C                     u1660:
  2706  000F5C                     
  2707                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  2708  000F5C  C01D  F014         	movff	pad@buf,fputs@s
  2709  000F60  C01E  F015         	movff	pad@buf+1,fputs@s+1
  2710  000F64  C01B  F016         	movff	pad@fp,fputs@fp
  2711  000F68  C01C  F017         	movff	pad@fp+1,fputs@fp+1
  2712  000F6C  ECE0  F00A         	call	_fputs	;wreg free
  2713  000F70                     l2259:
  2714                           
  2715                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  2716  000F70  BE20               	btfsc	(pad@p+1)^0,7,c
  2717  000F72  EFBD  F007         	goto	u1671
  2718  000F76  EFBF  F007         	goto	u1670
  2719  000F7A                     u1671:
  2720  000F7A  EFC5  F007         	goto	l2263
  2721  000F7E                     u1670:
  2722  000F7E  C01F  F024         	movff	pad@p,pad@w
  2723  000F82  C020  F025         	movff	pad@p+1,pad@w+1
  2724  000F86  EFC9  F007         	goto	l180
  2725  000F8A                     l2263:
  2726  000F8A  0E00               	movlw	0
  2727  000F8C  6E25               	movwf	(pad@w+1)^0,c
  2728  000F8E  0E00               	movlw	0
  2729  000F90  6E24               	movwf	pad@w^0,c
  2730  000F92                     l180:
  2731                           
  2732                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  2733  000F92  0E00               	movlw	0
  2734  000F94  6E23               	movwf	(pad@i+1)^0,c
  2735  000F96  0E00               	movlw	0
  2736  000F98  6E22               	movwf	pad@i^0,c
  2737                           
  2738                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  2739  000F9A  EFDB  F007         	goto	l2269
  2740  000F9E                     l2265:
  2741                           
  2742                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  2743  000F9E  0E00               	movlw	0
  2744  000FA0  6E0C               	movwf	(fputc@c+1)^0,c
  2745  000FA2  0E20               	movlw	32
  2746  000FA4  6E0B               	movwf	fputc@c^0,c
  2747  000FA6  C01B  F00D         	movff	pad@fp,fputc@fp
  2748  000FAA  C01C  F00E         	movff	pad@fp+1,fputc@fp+1
  2749  000FAE  EC42  F007         	call	_fputc	;wreg free
  2750  000FB2                     
  2751                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  2752  000FB2  4A22               	infsnz	pad@i^0,f,c
  2753  000FB4  2A23               	incf	(pad@i+1)^0,f,c
  2754  000FB6                     l2269:
  2755                           
  2756                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  2757  000FB6  5024               	movf	pad@w^0,w,c
  2758  000FB8  5C22               	subwf	pad@i^0,w,c
  2759  000FBA  5023               	movf	(pad@i+1)^0,w,c
  2760  000FBC  0A80               	xorlw	128
  2761  000FBE  6E21               	movwf	??_pad^0,c
  2762  000FC0  5025               	movf	(pad@w+1)^0,w,c
  2763  000FC2  0A80               	xorlw	128
  2764  000FC4  5821               	subwfb	??_pad^0,w,c
  2765  000FC6  A0D8               	btfss	status,0,c
  2766  000FC8  EFE8  F007         	goto	u1681
  2767  000FCC  EFEA  F007         	goto	u1680
  2768  000FD0                     u1681:
  2769  000FD0  EFCF  F007         	goto	l2265
  2770  000FD4                     u1680:
  2771  000FD4                     
  2772                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  2773  000FD4  B06E               	btfsc	_flags^0,0,c
  2774  000FD6  EFEF  F007         	goto	u1691
  2775  000FDA  EFF1  F007         	goto	u1690
  2776  000FDE                     u1691:
  2777  000FDE  EFFB  F007         	goto	l2273
  2778  000FE2                     u1690:
  2779  000FE2                     
  2780                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  2781  000FE2  C01D  F014         	movff	pad@buf,fputs@s
  2782  000FE6  C01E  F015         	movff	pad@buf+1,fputs@s+1
  2783  000FEA  C01B  F016         	movff	pad@fp,fputs@fp
  2784  000FEE  C01C  F017         	movff	pad@fp+1,fputs@fp+1
  2785  000FF2  ECE0  F00A         	call	_fputs	;wreg free
  2786  000FF6                     l2273:
  2787                           
  2788                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  2789  000FF6  C01D  F00B         	movff	pad@buf,strlen@s
  2790  000FFA  C01E  F00C         	movff	pad@buf+1,strlen@s+1
  2791  000FFE  ECAB  F00B         	call	_strlen	;wreg free
  2792  001002  5024               	movf	pad@w^0,w,c
  2793  001004  240B               	addwf	?_strlen^0,w,c
  2794  001006  6E1B               	movwf	?_pad^0,c
  2795  001008  5025               	movf	(pad@w+1)^0,w,c
  2796  00100A  200C               	addwfc	(?_strlen+1)^0,w,c
  2797  00100C  6E1C               	movwf	(?_pad+1)^0,c
  2798  00100E  0012               	return		;funcret
  2799  001010                     __end_of_pad:
  2800                           	opt callstack 0
  2801                           
  2802 ;; *************** function _strlen *****************
  2803 ;; Defined at:
  2804 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\strlen.c"
  2805 ;; Parameters:    Size  Location     Type
  2806 ;;  s               2   10[COMRAM] PTR const unsigned char 
  2807 ;;		 -> dbuf(32), 
  2808 ;; Auto vars:     Size  Location     Type
  2809 ;;  a               2   12[COMRAM] PTR const unsigned char 
  2810 ;;		 -> dbuf(32), 
  2811 ;; Return value:  Size  Location     Type
  2812 ;;                  2   10[COMRAM] unsigned int 
  2813 ;; Registers used:
  2814 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2815 ;; Tracked objects:
  2816 ;;		On entry : 0/0
  2817 ;;		On exit  : 0/0
  2818 ;;		Unchanged: 0/0
  2819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2820 ;;      Params:         2       0       0       0       0       0       0
  2821 ;;      Locals:         2       0       0       0       0       0       0
  2822 ;;      Temps:          0       0       0       0       0       0       0
  2823 ;;      Totals:         4       0       0       0       0       0       0
  2824 ;;Total ram usage:        4 bytes
  2825 ;; Hardware stack levels used:    1
  2826 ;; Hardware stack levels required when called:    3
  2827 ;; This function calls:
  2828 ;;		Nothing
  2829 ;; This function is called by:
  2830 ;;		_pad
  2831 ;; This function uses a non-reentrant model
  2832 ;;
  2833                           
  2834                           	psect	text15
  2835  001756                     __ptext15:
  2836                           	opt callstack 0
  2837  001756                     _strlen:
  2838                           	opt callstack 21
  2839  001756  C00B  F00D         	movff	strlen@s,strlen@a
  2840  00175A  C00C  F00E         	movff	strlen@s+1,strlen@a+1
  2841  00175E  EFB3  F00B         	goto	l2245
  2842  001762                     l2243:
  2843  001762  4A0B               	infsnz	strlen@s^0,f,c
  2844  001764  2A0C               	incf	(strlen@s+1)^0,f,c
  2845  001766                     l2245:
  2846  001766  C00B  FFD9         	movff	strlen@s,fsr2l
  2847  00176A  C00C  FFDA         	movff	strlen@s+1,fsr2h
  2848  00176E  50DF               	movf	indf2,w,c
  2849  001770  A4D8               	btfss	status,2,c
  2850  001772  EFBD  F00B         	goto	u1631
  2851  001776  EFBF  F00B         	goto	u1630
  2852  00177A                     u1631:
  2853  00177A  EFB1  F00B         	goto	l2243
  2854  00177E                     u1630:
  2855  00177E  500D               	movf	strlen@a^0,w,c
  2856  001780  5C0B               	subwf	strlen@s^0,w,c
  2857  001782  6E0B               	movwf	?_strlen^0,c
  2858  001784  500E               	movf	(strlen@a+1)^0,w,c
  2859  001786  580C               	subwfb	(strlen@s+1)^0,w,c
  2860  001788  6E0C               	movwf	(?_strlen+1)^0,c
  2861  00178A  0012               	return		;funcret
  2862  00178C                     __end_of_strlen:
  2863                           	opt callstack 0
  2864                           
  2865 ;; *************** function _fputs *****************
  2866 ;; Defined at:
  2867 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\nf_fputs.c"
  2868 ;; Parameters:    Size  Location     Type
  2869 ;;  s               2   19[COMRAM] PTR const unsigned char 
  2870 ;;		 -> dbuf(32), 
  2871 ;;  fp              2   21[COMRAM] PTR struct _IO_FILE
  2872 ;;		 -> sprintf@f(6), 
  2873 ;; Auto vars:     Size  Location     Type
  2874 ;;  i               2   24[COMRAM] int 
  2875 ;;  c               1   23[COMRAM] unsigned char 
  2876 ;; Return value:  Size  Location     Type
  2877 ;;                  2   19[COMRAM] int 
  2878 ;; Registers used:
  2879 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2880 ;; Tracked objects:
  2881 ;;		On entry : 0/0
  2882 ;;		On exit  : 0/0
  2883 ;;		Unchanged: 0/0
  2884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2885 ;;      Params:         4       0       0       0       0       0       0
  2886 ;;      Locals:         3       0       0       0       0       0       0
  2887 ;;      Temps:          0       0       0       0       0       0       0
  2888 ;;      Totals:         7       0       0       0       0       0       0
  2889 ;;Total ram usage:        7 bytes
  2890 ;; Hardware stack levels used:    1
  2891 ;; Hardware stack levels required when called:    5
  2892 ;; This function calls:
  2893 ;;		_fputc
  2894 ;; This function is called by:
  2895 ;;		_pad
  2896 ;; This function uses a non-reentrant model
  2897 ;;
  2898                           
  2899                           	psect	text16
  2900  0015C0                     __ptext16:
  2901                           	opt callstack 0
  2902  0015C0                     _fputs:
  2903                           	opt callstack 19
  2904  0015C0  0E00               	movlw	0
  2905  0015C2  6E1A               	movwf	(fputs@i+1)^0,c
  2906  0015C4  0E00               	movlw	0
  2907  0015C6  6E19               	movwf	fputs@i^0,c
  2908  0015C8  EFF1  F00A         	goto	l2239
  2909  0015CC                     l2235:
  2910  0015CC  C018  F00B         	movff	fputs@c,fputc@c
  2911  0015D0  6A0C               	clrf	(fputc@c+1)^0,c
  2912  0015D2  C016  F00D         	movff	fputs@fp,fputc@fp
  2913  0015D6  C017  F00E         	movff	fputs@fp+1,fputc@fp+1
  2914  0015DA  EC42  F007         	call	_fputc	;wreg free
  2915  0015DE  4A19               	infsnz	fputs@i^0,f,c
  2916  0015E0  2A1A               	incf	(fputs@i+1)^0,f,c
  2917  0015E2                     l2239:
  2918  0015E2  5019               	movf	fputs@i^0,w,c
  2919  0015E4  2414               	addwf	fputs@s^0,w,c
  2920  0015E6  6ED9               	movwf	fsr2l,c
  2921  0015E8  501A               	movf	(fputs@i+1)^0,w,c
  2922  0015EA  2015               	addwfc	(fputs@s+1)^0,w,c
  2923  0015EC  6EDA               	movwf	fsr2h,c
  2924  0015EE  50DF               	movf	indf2,w,c
  2925  0015F0  6E18               	movwf	fputs@c^0,c
  2926  0015F2  5018               	movf	fputs@c^0,w,c
  2927  0015F4  A4D8               	btfss	status,2,c
  2928  0015F6  EFFF  F00A         	goto	u1621
  2929  0015FA  EF01  F00B         	goto	u1620
  2930  0015FE                     u1621:
  2931  0015FE  EFE6  F00A         	goto	l2235
  2932  001602                     u1620:
  2933  001602  0012               	return		;funcret
  2934  001604                     __end_of_fputs:
  2935                           	opt callstack 0
  2936                           
  2937 ;; *************** function _fputc *****************
  2938 ;; Defined at:
  2939 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\nf_fputc.c"
  2940 ;; Parameters:    Size  Location     Type
  2941 ;;  c               2   10[COMRAM] int 
  2942 ;;  fp              2   12[COMRAM] PTR struct _IO_FILE
  2943 ;;		 -> sprintf@f(6), 
  2944 ;; Auto vars:     Size  Location     Type
  2945 ;;		None
  2946 ;; Return value:  Size  Location     Type
  2947 ;;                  2   10[COMRAM] int 
  2948 ;; Registers used:
  2949 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2950 ;; Tracked objects:
  2951 ;;		On entry : 0/0
  2952 ;;		On exit  : 0/0
  2953 ;;		Unchanged: 0/0
  2954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2955 ;;      Params:         4       0       0       0       0       0       0
  2956 ;;      Locals:         0       0       0       0       0       0       0
  2957 ;;      Temps:          5       0       0       0       0       0       0
  2958 ;;      Totals:         9       0       0       0       0       0       0
  2959 ;;Total ram usage:        9 bytes
  2960 ;; Hardware stack levels used:    1
  2961 ;; Hardware stack levels required when called:    4
  2962 ;; This function calls:
  2963 ;;		_putch
  2964 ;; This function is called by:
  2965 ;;		_pad
  2966 ;;		_vfpfcnvrt
  2967 ;;		_fputs
  2968 ;; This function uses a non-reentrant model
  2969 ;;
  2970                           
  2971                           	psect	text17
  2972  000E84                     __ptext17:
  2973                           	opt callstack 0
  2974  000E84                     _fputc:
  2975                           	opt callstack 19
  2976  000E84  500D               	movf	fputc@fp^0,w,c
  2977  000E86  100E               	iorwf	(fputc@fp+1)^0,w,c
  2978  000E88  B4D8               	btfsc	status,2,c
  2979  000E8A  EF49  F007         	goto	u1581
  2980  000E8E  EF4B  F007         	goto	u1580
  2981  000E92                     u1581:
  2982  000E92  EF54  F007         	goto	l2223
  2983  000E96                     u1580:
  2984  000E96  500D               	movf	fputc@fp^0,w,c
  2985  000E98  100E               	iorwf	(fputc@fp+1)^0,w,c
  2986  000E9A  A4D8               	btfss	status,2,c
  2987  000E9C  EF52  F007         	goto	u1591
  2988  000EA0  EF54  F007         	goto	u1590
  2989  000EA4                     u1591:
  2990  000EA4  EF59  F007         	goto	l2225
  2991  000EA8                     u1590:
  2992  000EA8                     l2223:
  2993  000EA8  500B               	movf	fputc@c^0,w,c
  2994  000EAA  EC0F  F00C         	call	_putch
  2995  000EAE  EFA6  F007         	goto	l1002
  2996  000EB2                     l2225:
  2997  000EB2  EE20 F004          	lfsr	2,4
  2998  000EB6  500D               	movf	fputc@fp^0,w,c
  2999  000EB8  26D9               	addwf	fsr2l,f,c
  3000  000EBA  500E               	movf	(fputc@fp+1)^0,w,c
  3001  000EBC  22DA               	addwfc	fsr2h,f,c
  3002  000EBE  50DE               	movf	postinc2,w,c
  3003  000EC0  10DE               	iorwf	postinc2,w,c
  3004  000EC2  B4D8               	btfsc	status,2,c
  3005  000EC4  EF66  F007         	goto	u1601
  3006  000EC8  EF68  F007         	goto	u1600
  3007  000ECC                     u1601:
  3008  000ECC  EF83  F007         	goto	l2229
  3009  000ED0                     u1600:
  3010  000ED0  EE20 F004          	lfsr	2,4
  3011  000ED4  500D               	movf	fputc@fp^0,w,c
  3012  000ED6  26D9               	addwf	fsr2l,f,c
  3013  000ED8  500E               	movf	(fputc@fp+1)^0,w,c
  3014  000EDA  22DA               	addwfc	fsr2h,f,c
  3015  000EDC  EE10 F002          	lfsr	1,2
  3016  000EE0  500D               	movf	fputc@fp^0,w,c
  3017  000EE2  26E1               	addwf	fsr1l,f,c
  3018  000EE4  500E               	movf	(fputc@fp+1)^0,w,c
  3019  000EE6  22E2               	addwfc	fsr1h,f,c
  3020  000EE8  50DE               	movf	postinc2,w,c
  3021  000EEA  5CE6               	subwf	postinc1,w,c
  3022  000EEC  50E6               	movf	postinc1,w,c
  3023  000EEE  0A80               	xorlw	128
  3024  000EF0  6E13               	movwf	(??_fputc+4)^0,c
  3025  000EF2  50DE               	movf	postinc2,w,c
  3026  000EF4  0A80               	xorlw	128
  3027  000EF6  5813               	subwfb	(??_fputc+4)^0,w,c
  3028  000EF8  B0D8               	btfsc	status,0,c
  3029  000EFA  EF81  F007         	goto	u1611
  3030  000EFE  EF83  F007         	goto	u1610
  3031  000F02                     u1611:
  3032  000F02  EFA6  F007         	goto	l1002
  3033  000F06                     u1610:
  3034  000F06                     l2229:
  3035  000F06  EE20 F002          	lfsr	2,2
  3036  000F0A  500D               	movf	fputc@fp^0,w,c
  3037  000F0C  26D9               	addwf	fsr2l,f,c
  3038  000F0E  500E               	movf	(fputc@fp+1)^0,w,c
  3039  000F10  22DA               	addwfc	fsr2h,f,c
  3040  000F12  CFDE F00F          	movff	postinc2,??_fputc
  3041  000F16  CFDD F010          	movff	postdec2,??_fputc+1
  3042  000F1A  C00D  FFD9         	movff	fputc@fp,fsr2l
  3043  000F1E  C00E  FFDA         	movff	fputc@fp+1,fsr2h
  3044  000F22  CFDE F011          	movff	postinc2,??_fputc+2
  3045  000F26  CFDD F012          	movff	postdec2,??_fputc+3
  3046  000F2A  500F               	movf	??_fputc^0,w,c
  3047  000F2C  2411               	addwf	(??_fputc+2)^0,w,c
  3048  000F2E  6ED9               	movwf	fsr2l,c
  3049  000F30  5010               	movf	(??_fputc+1)^0,w,c
  3050  000F32  2012               	addwfc	(??_fputc+3)^0,w,c
  3051  000F34  6EDA               	movwf	fsr2h,c
  3052  000F36  C00B  FFDF         	movff	fputc@c,indf2
  3053  000F3A  EE20 F002          	lfsr	2,2
  3054  000F3E  500D               	movf	fputc@fp^0,w,c
  3055  000F40  26D9               	addwf	fsr2l,f,c
  3056  000F42  500E               	movf	(fputc@fp+1)^0,w,c
  3057  000F44  22DA               	addwfc	fsr2h,f,c
  3058  000F46  2ADE               	incf	postinc2,f,c
  3059  000F48  0E00               	movlw	0
  3060  000F4A  22DD               	addwfc	postdec2,f,c
  3061  000F4C                     l1002:
  3062  000F4C  0012               	return		;funcret
  3063  000F4E                     __end_of_fputc:
  3064                           	opt callstack 0
  3065                           
  3066 ;; *************** function _putch *****************
  3067 ;; Defined at:
  3068 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\putch.c"
  3069 ;; Parameters:    Size  Location     Type
  3070 ;;  c               1    wreg     unsigned char 
  3071 ;; Auto vars:     Size  Location     Type
  3072 ;;  c               1    0[COMRAM] unsigned char 
  3073 ;; Return value:  Size  Location     Type
  3074 ;;                  1    wreg      void 
  3075 ;; Registers used:
  3076 ;;		wreg
  3077 ;; Tracked objects:
  3078 ;;		On entry : 0/0
  3079 ;;		On exit  : 0/0
  3080 ;;		Unchanged: 0/0
  3081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3082 ;;      Params:         0       0       0       0       0       0       0
  3083 ;;      Locals:         0       0       0       0       0       0       0
  3084 ;;      Temps:          0       0       0       0       0       0       0
  3085 ;;      Totals:         0       0       0       0       0       0       0
  3086 ;;Total ram usage:        0 bytes
  3087 ;; Hardware stack levels used:    1
  3088 ;; Hardware stack levels required when called:    3
  3089 ;; This function calls:
  3090 ;;		Nothing
  3091 ;; This function is called by:
  3092 ;;		_fputc
  3093 ;; This function uses a non-reentrant model
  3094 ;;
  3095                           
  3096                           	psect	text18
  3097  00181E                     __ptext18:
  3098                           	opt callstack 0
  3099  00181E                     _putch:
  3100                           	opt callstack 19
  3101  00181E  0012               	return		;funcret
  3102  001820                     __end_of_putch:
  3103                           	opt callstack 0
  3104                           
  3105 ;; *************** function _atoi *****************
  3106 ;; Defined at:
  3107 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\atoi.c"
  3108 ;; Parameters:    Size  Location     Type
  3109 ;;  s               2   17[COMRAM] PTR const unsigned char 
  3110 ;;		 -> STR_1(22), 
  3111 ;; Auto vars:     Size  Location     Type
  3112 ;;  n               2   30[COMRAM] int 
  3113 ;;  neg             2   23[COMRAM] int 
  3114 ;; Return value:  Size  Location     Type
  3115 ;;                  2   17[COMRAM] int 
  3116 ;; Registers used:
  3117 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3118 ;; Tracked objects:
  3119 ;;		On entry : 0/0
  3120 ;;		On exit  : 0/0
  3121 ;;		Unchanged: 0/0
  3122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3123 ;;      Params:         2       0       0       0       0       0       0
  3124 ;;      Locals:         9       0       0       0       0       0       0
  3125 ;;      Temps:          4       0       0       0       0       0       0
  3126 ;;      Totals:        15       0       0       0       0       0       0
  3127 ;;Total ram usage:       15 bytes
  3128 ;; Hardware stack levels used:    1
  3129 ;; Hardware stack levels required when called:    4
  3130 ;; This function calls:
  3131 ;;		___wmul
  3132 ;;		_isdigit
  3133 ;;		_isspace
  3134 ;; This function is called by:
  3135 ;;		_vfpfcnvrt
  3136 ;; This function uses a non-reentrant model
  3137 ;;
  3138                           
  3139                           	psect	text19
  3140  000CF4                     __ptext19:
  3141                           	opt callstack 0
  3142  000CF4                     _atoi:
  3143                           	opt callstack 22
  3144  000CF4  0E00               	movlw	0
  3145  000CF6  6E20               	movwf	(atoi@n+1)^0,c
  3146  000CF8  0E00               	movlw	0
  3147  000CFA  6E1F               	movwf	atoi@n^0,c
  3148  000CFC  0E00               	movlw	0
  3149  000CFE  6E19               	movwf	(atoi@neg+1)^0,c
  3150  000D00  0E00               	movlw	0
  3151  000D02  6E18               	movwf	atoi@neg^0,c
  3152  000D04  EF86  F006         	goto	l2401
  3153  000D08                     l2399:
  3154  000D08  4A12               	infsnz	atoi@s^0,f,c
  3155  000D0A  2A13               	incf	(atoi@s+1)^0,f,c
  3156  000D0C                     l2401:
  3157  000D0C  0E01               	movlw	1
  3158  000D0E  6E1E               	movwf	_atoi$1154^0,c
  3159  000D10  C012  FFF6         	movff	atoi@s,tblptrl
  3160  000D14  C013  FFF7         	movff	atoi@s+1,tblptrh
  3161  000D18                     	if	0	;tblptru may be non-zero
  3162  000D18                     	endif
  3163  000D18                     	if	0	;tblptru may be non-zero
  3164  000D18                     	endif
  3165  000D18  0008               	tblrd		*
  3166  000D1A  50F5               	movf	tablat,w,c
  3167  000D1C  0A20               	xorlw	32
  3168  000D1E  B4D8               	btfsc	status,2,c
  3169  000D20  EF94  F006         	goto	u1991
  3170  000D24  EF96  F006         	goto	u1990
  3171  000D28                     u1991:
  3172  000D28  EFB3  F006         	goto	l2409
  3173  000D2C                     u1990:
  3174  000D2C  0EF7               	movlw	247
  3175  000D2E  6E14               	movwf	??_atoi^0,c
  3176  000D30  0EFF               	movlw	255
  3177  000D32  6E15               	movwf	(??_atoi+1)^0,c
  3178  000D34  C012  FFF6         	movff	atoi@s,tblptrl
  3179  000D38  C013  FFF7         	movff	atoi@s+1,tblptrh
  3180  000D3C                     	if	0	;tblptru may be non-zero
  3181  000D3C                     	endif
  3182  000D3C                     	if	0	;tblptru may be non-zero
  3183  000D3C                     	endif
  3184  000D3C  0008               	tblrd		*
  3185  000D3E  50F5               	movf	tablat,w,c
  3186  000D40  6E16               	movwf	(??_atoi+2)^0,c
  3187  000D42  6A17               	clrf	(??_atoi+3)^0,c
  3188  000D44  5014               	movf	??_atoi^0,w,c
  3189  000D46  2616               	addwf	(??_atoi+2)^0,f,c
  3190  000D48  5015               	movf	(??_atoi+1)^0,w,c
  3191  000D4A  2217               	addwfc	(??_atoi+3)^0,f,c
  3192  000D4C  5017               	movf	(??_atoi+3)^0,w,c
  3193  000D4E  E109               	bnz	u2000
  3194  000D50  0E05               	movlw	5
  3195  000D52  5C16               	subwf	(??_atoi+2)^0,w,c
  3196  000D54  A0D8               	btfss	status,0,c
  3197  000D56  EFAF  F006         	goto	u2001
  3198  000D5A  EFB1  F006         	goto	u2000
  3199  000D5E                     u2001:
  3200  000D5E  EFB3  F006         	goto	l2409
  3201  000D62                     u2000:
  3202  000D62  0E00               	movlw	0
  3203  000D64  6E1E               	movwf	_atoi$1154^0,c
  3204  000D66                     l2409:
  3205  000D66  C01E  F01A         	movff	_atoi$1154,_atoi$1153
  3206  000D6A  6A1B               	clrf	(_atoi$1153+1)^0,c
  3207  000D6C  501A               	movf	_atoi$1153^0,w,c
  3208  000D6E  101B               	iorwf	(_atoi$1153+1)^0,w,c
  3209  000D70  A4D8               	btfss	status,2,c
  3210  000D72  EFBD  F006         	goto	u2011
  3211  000D76  EFBF  F006         	goto	u2010
  3212  000D7A                     u2011:
  3213  000D7A  EF84  F006         	goto	l2399
  3214  000D7E                     u2010:
  3215  000D7E  EFC9  F006         	goto	l2419
  3216  000D82                     l2415:
  3217  000D82  0E00               	movlw	0
  3218  000D84  6E19               	movwf	(atoi@neg+1)^0,c
  3219  000D86  0E01               	movlw	1
  3220  000D88  6E18               	movwf	atoi@neg^0,c
  3221  000D8A                     l2417:
  3222  000D8A  4A12               	infsnz	atoi@s^0,f,c
  3223  000D8C  2A13               	incf	(atoi@s+1)^0,f,c
  3224  000D8E  EFFE  F006         	goto	l2425
  3225  000D92                     l2419:
  3226  000D92  C012  FFF6         	movff	atoi@s,tblptrl
  3227  000D96  C013  FFF7         	movff	atoi@s+1,tblptrh
  3228  000D9A                     	if	0	;tblptru may be non-zero
  3229  000D9A                     	endif
  3230  000D9A                     	if	0	;tblptru may be non-zero
  3231  000D9A                     	endif
  3232  000D9A  0008               	tblrd		*
  3233  000D9C  50F5               	movf	tablat,w,c
  3234  000D9E  6E14               	movwf	??_atoi^0,c
  3235  000DA0  6A15               	clrf	(??_atoi+1)^0,c
  3236                           
  3237                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3238                           ; Switch size 1, requested type "simple"
  3239                           ; Number of cases is 1, Range of values is 0 to 0
  3240                           ; switch strategies available:
  3241                           ; Name         Instructions Cycles
  3242                           ; simple_byte            4     3 (average)
  3243                           ;	Chosen strategy is simple_byte
  3244  000DA2  5015               	movf	(??_atoi+1)^0,w,c
  3245  000DA4  0A00               	xorlw	0	; case 0
  3246  000DA6  B4D8               	btfsc	status,2,c
  3247  000DA8  EFD8  F006         	goto	l2713
  3248  000DAC  EFFE  F006         	goto	l2425
  3249  000DB0                     l2713:
  3250                           
  3251                           ; Switch size 1, requested type "simple"
  3252                           ; Number of cases is 2, Range of values is 43 to 45
  3253                           ; switch strategies available:
  3254                           ; Name         Instructions Cycles
  3255                           ; simple_byte            7     4 (average)
  3256                           ;	Chosen strategy is simple_byte
  3257  000DB0  5014               	movf	??_atoi^0,w,c
  3258  000DB2  0A2B               	xorlw	43	; case 43
  3259  000DB4  B4D8               	btfsc	status,2,c
  3260  000DB6  EFC5  F006         	goto	l2417
  3261  000DBA  0A06               	xorlw	6	; case 45
  3262  000DBC  B4D8               	btfsc	status,2,c
  3263  000DBE  EFC1  F006         	goto	l2415
  3264  000DC2  EFFE  F006         	goto	l2425
  3265  000DC6                     l2421:
  3266  000DC6  C01F  F00B         	movff	atoi@n,___wmul@multiplier
  3267  000DCA  C020  F00C         	movff	atoi@n+1,___wmul@multiplier+1
  3268  000DCE  0E00               	movlw	0
  3269  000DD0  6E0E               	movwf	(___wmul@multiplicand+1)^0,c
  3270  000DD2  0E0A               	movlw	10
  3271  000DD4  6E0D               	movwf	___wmul@multiplicand^0,c
  3272  000DD6  ECDE  F00B         	call	___wmul	;wreg free
  3273  000DDA  C012  FFF6         	movff	atoi@s,tblptrl
  3274  000DDE  C013  FFF7         	movff	atoi@s+1,tblptrh
  3275  000DE2                     	if	0	;tblptru may be non-zero
  3276  000DE2                     	endif
  3277  000DE2                     	if	0	;tblptru may be non-zero
  3278  000DE2                     	endif
  3279  000DE2  0008               	tblrd		*
  3280  000DE4  50F5               	movf	tablat,w,c
  3281  000DE6  5E0B               	subwf	?___wmul^0,f,c
  3282  000DE8  0E00               	movlw	0
  3283  000DEA  5A0C               	subwfb	(?___wmul+1)^0,f,c
  3284  000DEC  0E30               	movlw	48
  3285  000DEE  240B               	addwf	?___wmul^0,w,c
  3286  000DF0  6E1F               	movwf	atoi@n^0,c
  3287  000DF2  0E00               	movlw	0
  3288  000DF4  200C               	addwfc	(?___wmul+1)^0,w,c
  3289  000DF6  6E20               	movwf	(atoi@n+1)^0,c
  3290  000DF8  EFC5  F006         	goto	l2417
  3291  000DFC                     l2425:
  3292  000DFC  0ED0               	movlw	208
  3293  000DFE  6E14               	movwf	??_atoi^0,c
  3294  000E00  0EFF               	movlw	255
  3295  000E02  6E15               	movwf	(??_atoi+1)^0,c
  3296  000E04  C012  FFF6         	movff	atoi@s,tblptrl
  3297  000E08  C013  FFF7         	movff	atoi@s+1,tblptrh
  3298  000E0C                     	if	0	;tblptru may be non-zero
  3299  000E0C                     	endif
  3300  000E0C                     	if	0	;tblptru may be non-zero
  3301  000E0C                     	endif
  3302  000E0C  0008               	tblrd		*
  3303  000E0E  50F5               	movf	tablat,w,c
  3304  000E10  6E16               	movwf	(??_atoi+2)^0,c
  3305  000E12  6A17               	clrf	(??_atoi+3)^0,c
  3306  000E14  5014               	movf	??_atoi^0,w,c
  3307  000E16  2616               	addwf	(??_atoi+2)^0,f,c
  3308  000E18  5015               	movf	(??_atoi+1)^0,w,c
  3309  000E1A  2217               	addwfc	(??_atoi+3)^0,f,c
  3310  000E1C  5017               	movf	(??_atoi+3)^0,w,c
  3311  000E1E  E10A               	bnz	u2020
  3312  000E20  0E0A               	movlw	10
  3313  000E22  5C16               	subwf	(??_atoi+2)^0,w,c
  3314  000E24  A0D8               	btfss	status,0,c
  3315  000E26  EF17  F007         	goto	u2021
  3316  000E2A  EF1A  F007         	goto	u2020
  3317  000E2E                     u2021:
  3318  000E2E  0E01               	movlw	1
  3319  000E30  EF1B  F007         	goto	u2030
  3320  000E34                     u2020:
  3321  000E34  0E00               	movlw	0
  3322  000E36                     u2030:
  3323  000E36  6E1C               	movwf	_atoi$1155^0,c
  3324  000E38  6A1D               	clrf	(_atoi$1155+1)^0,c
  3325  000E3A  501C               	movf	_atoi$1155^0,w,c
  3326  000E3C  101D               	iorwf	(_atoi$1155+1)^0,w,c
  3327  000E3E  A4D8               	btfss	status,2,c
  3328  000E40  EF24  F007         	goto	u2041
  3329  000E44  EF26  F007         	goto	u2040
  3330  000E48                     u2041:
  3331  000E48  EFE3  F006         	goto	l2421
  3332  000E4C                     u2040:
  3333  000E4C  5018               	movf	atoi@neg^0,w,c
  3334  000E4E  1019               	iorwf	(atoi@neg+1)^0,w,c
  3335  000E50  A4D8               	btfss	status,2,c
  3336  000E52  EF2D  F007         	goto	u2051
  3337  000E56  EF2F  F007         	goto	u2050
  3338  000E5A                     u2051:
  3339  000E5A  EF3D  F007         	goto	l961
  3340  000E5E                     u2050:
  3341  000E5E  C01F  F014         	movff	atoi@n,??_atoi
  3342  000E62  C020  F015         	movff	atoi@n+1,??_atoi+1
  3343  000E66  1E14               	comf	??_atoi^0,f,c
  3344  000E68  1E15               	comf	(??_atoi+1)^0,f,c
  3345  000E6A  4A14               	infsnz	??_atoi^0,f,c
  3346  000E6C  2A15               	incf	(??_atoi+1)^0,f,c
  3347  000E6E  C014  F012         	movff	??_atoi,?_atoi
  3348  000E72  C015  F013         	movff	??_atoi+1,?_atoi+1
  3349  000E76  EF41  F007         	goto	l964
  3350  000E7A                     l961:
  3351  000E7A  C01F  F012         	movff	atoi@n,?_atoi
  3352  000E7E  C020  F013         	movff	atoi@n+1,?_atoi+1
  3353  000E82                     l964:
  3354  000E82  0012               	return		;funcret
  3355  000E84                     __end_of_atoi:
  3356                           	opt callstack 0
  3357                           
  3358 ;; *************** function _isspace *****************
  3359 ;; Defined at:
  3360 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\isspace.c"
  3361 ;; Parameters:    Size  Location     Type
  3362 ;;  c               2   10[COMRAM] int 
  3363 ;; Auto vars:     Size  Location     Type
  3364 ;;		None
  3365 ;; Return value:  Size  Location     Type
  3366 ;;                  2   10[COMRAM] int 
  3367 ;; Registers used:
  3368 ;;		wreg, status,2, status,0
  3369 ;; Tracked objects:
  3370 ;;		On entry : 0/0
  3371 ;;		On exit  : 0/0
  3372 ;;		Unchanged: 0/0
  3373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3374 ;;      Params:         2       0       0       0       0       0       0
  3375 ;;      Locals:         1       0       0       0       0       0       0
  3376 ;;      Temps:          4       0       0       0       0       0       0
  3377 ;;      Totals:         7       0       0       0       0       0       0
  3378 ;;Total ram usage:        7 bytes
  3379 ;; Hardware stack levels used:    1
  3380 ;; Hardware stack levels required when called:    3
  3381 ;; This function calls:
  3382 ;;		Nothing
  3383 ;; This function is called by:
  3384 ;;		_atoi
  3385 ;; This function uses a non-reentrant model
  3386 ;;
  3387                           
  3388                           	psect	text20
  3389  00156E                     __ptext20:
  3390                           	opt callstack 0
  3391  00156E                     _isspace:
  3392                           	opt callstack 22
  3393  00156E  0E01               	movlw	1
  3394  001570  6E11               	movwf	_isspace$1180^0,c
  3395  001572  0E20               	movlw	32
  3396  001574  180B               	xorwf	isspace@c^0,w,c
  3397  001576  100C               	iorwf	(isspace@c+1)^0,w,c
  3398  001578  B4D8               	btfsc	status,2,c
  3399  00157A  EFC1  F00A         	goto	u1791
  3400  00157E  EFC3  F00A         	goto	u1790
  3401  001582                     u1791:
  3402  001582  EFDC  F00A         	goto	l2313
  3403  001586                     u1790:
  3404  001586  0EF7               	movlw	247
  3405  001588  6E0D               	movwf	??_isspace^0,c
  3406  00158A  0EFF               	movlw	255
  3407  00158C  6E0E               	movwf	(??_isspace+1)^0,c
  3408  00158E  C00B  F00F         	movff	isspace@c,??_isspace+2
  3409  001592  C00C  F010         	movff	isspace@c+1,??_isspace+3
  3410  001596  500D               	movf	??_isspace^0,w,c
  3411  001598  260F               	addwf	(??_isspace+2)^0,f,c
  3412  00159A  500E               	movf	(??_isspace+1)^0,w,c
  3413  00159C  2210               	addwfc	(??_isspace+3)^0,f,c
  3414  00159E  5010               	movf	(??_isspace+3)^0,w,c
  3415  0015A0  E109               	bnz	u1800
  3416  0015A2  0E05               	movlw	5
  3417  0015A4  5C0F               	subwf	(??_isspace+2)^0,w,c
  3418  0015A6  A0D8               	btfss	status,0,c
  3419  0015A8  EFD8  F00A         	goto	u1801
  3420  0015AC  EFDA  F00A         	goto	u1800
  3421  0015B0                     u1801:
  3422  0015B0  EFDC  F00A         	goto	l2313
  3423  0015B4                     u1800:
  3424  0015B4  0E00               	movlw	0
  3425  0015B6  6E11               	movwf	_isspace$1180^0,c
  3426  0015B8                     l2313:
  3427  0015B8  C011  F00B         	movff	_isspace$1180,?_isspace
  3428  0015BC  6A0C               	clrf	(?_isspace+1)^0,c
  3429  0015BE  0012               	return		;funcret
  3430  0015C0                     __end_of_isspace:
  3431                           	opt callstack 0
  3432                           
  3433 ;; *************** function _isdigit *****************
  3434 ;; Defined at:
  3435 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\isdigit.c"
  3436 ;; Parameters:    Size  Location     Type
  3437 ;;  c               2   10[COMRAM] int 
  3438 ;; Auto vars:     Size  Location     Type
  3439 ;;		None
  3440 ;; Return value:  Size  Location     Type
  3441 ;;                  2   10[COMRAM] int 
  3442 ;; Registers used:
  3443 ;;		wreg, status,2, status,0
  3444 ;; Tracked objects:
  3445 ;;		On entry : 0/0
  3446 ;;		On exit  : 0/0
  3447 ;;		Unchanged: 0/0
  3448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3449 ;;      Params:         2       0       0       0       0       0       0
  3450 ;;      Locals:         0       0       0       0       0       0       0
  3451 ;;      Temps:          4       0       0       0       0       0       0
  3452 ;;      Totals:         6       0       0       0       0       0       0
  3453 ;;Total ram usage:        6 bytes
  3454 ;; Hardware stack levels used:    1
  3455 ;; Hardware stack levels required when called:    3
  3456 ;; This function calls:
  3457 ;;		Nothing
  3458 ;; This function is called by:
  3459 ;;		_vfpfcnvrt
  3460 ;;		_atoi
  3461 ;; This function uses a non-reentrant model
  3462 ;;
  3463                           
  3464                           	psect	text21
  3465  0016E8                     __ptext21:
  3466                           	opt callstack 0
  3467  0016E8                     _isdigit:
  3468                           	opt callstack 23
  3469  0016E8  0ED0               	movlw	208
  3470  0016EA  6E0D               	movwf	??_isdigit^0,c
  3471  0016EC  0EFF               	movlw	255
  3472  0016EE  6E0E               	movwf	(??_isdigit+1)^0,c
  3473  0016F0  C00B  F00F         	movff	isdigit@c,??_isdigit+2
  3474  0016F4  C00C  F010         	movff	isdigit@c+1,??_isdigit+3
  3475  0016F8  500D               	movf	??_isdigit^0,w,c
  3476  0016FA  260F               	addwf	(??_isdigit+2)^0,f,c
  3477  0016FC  500E               	movf	(??_isdigit+1)^0,w,c
  3478  0016FE  2210               	addwfc	(??_isdigit+3)^0,f,c
  3479  001700  5010               	movf	(??_isdigit+3)^0,w,c
  3480  001702  E10A               	bnz	u1770
  3481  001704  0E0A               	movlw	10
  3482  001706  5C0F               	subwf	(??_isdigit+2)^0,w,c
  3483  001708  A0D8               	btfss	status,0,c
  3484  00170A  EF89  F00B         	goto	u1771
  3485  00170E  EF8C  F00B         	goto	u1770
  3486  001712                     u1771:
  3487  001712  0E01               	movlw	1
  3488  001714  EF8D  F00B         	goto	u1780
  3489  001718                     u1770:
  3490  001718  0E00               	movlw	0
  3491  00171A                     u1780:
  3492  00171A  6E0B               	movwf	?_isdigit^0,c
  3493  00171C  6A0C               	clrf	(?_isdigit+1)^0,c
  3494  00171E  0012               	return		;funcret
  3495  001720                     __end_of_isdigit:
  3496                           	opt callstack 0
  3497                           
  3498 ;; *************** function ___wmul *****************
  3499 ;; Defined at:
  3500 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul16.c"
  3501 ;; Parameters:    Size  Location     Type
  3502 ;;  multiplier      2   10[COMRAM] unsigned int 
  3503 ;;  multiplicand    2   12[COMRAM] unsigned int 
  3504 ;; Auto vars:     Size  Location     Type
  3505 ;;  product         2   14[COMRAM] unsigned int 
  3506 ;; Return value:  Size  Location     Type
  3507 ;;                  2   10[COMRAM] unsigned int 
  3508 ;; Registers used:
  3509 ;;		wreg, status,2, status,0, prodl, prodh
  3510 ;; Tracked objects:
  3511 ;;		On entry : 0/0
  3512 ;;		On exit  : 0/0
  3513 ;;		Unchanged: 0/0
  3514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3515 ;;      Params:         4       0       0       0       0       0       0
  3516 ;;      Locals:         2       0       0       0       0       0       0
  3517 ;;      Temps:          0       0       0       0       0       0       0
  3518 ;;      Totals:         6       0       0       0       0       0       0
  3519 ;;Total ram usage:        6 bytes
  3520 ;; Hardware stack levels used:    1
  3521 ;; Hardware stack levels required when called:    3
  3522 ;; This function calls:
  3523 ;;		Nothing
  3524 ;; This function is called by:
  3525 ;;		_atoi
  3526 ;; This function uses a non-reentrant model
  3527 ;;
  3528                           
  3529                           	psect	text22
  3530  0017BC                     __ptext22:
  3531                           	opt callstack 0
  3532  0017BC                     ___wmul:
  3533                           	opt callstack 22
  3534  0017BC  500B               	movf	___wmul@multiplier^0,w,c
  3535  0017BE  020D               	mulwf	___wmul@multiplicand^0,c
  3536  0017C0  CFF3 F00F          	movff	prodl,___wmul@product
  3537  0017C4  CFF4 F010          	movff	prodh,___wmul@product+1
  3538  0017C8  500B               	movf	___wmul@multiplier^0,w,c
  3539  0017CA  020E               	mulwf	(___wmul@multiplicand+1)^0,c
  3540  0017CC  50F3               	movf	243,w,c
  3541  0017CE  2610               	addwf	(___wmul@product+1)^0,f,c
  3542  0017D0  500C               	movf	(___wmul@multiplier+1)^0,w,c
  3543  0017D2  020D               	mulwf	___wmul@multiplicand^0,c
  3544  0017D4  50F3               	movf	243,w,c
  3545  0017D6  2610               	addwf	(___wmul@product+1)^0,f,c
  3546  0017D8  C00F  F00B         	movff	___wmul@product,?___wmul
  3547  0017DC  C010  F00C         	movff	___wmul@product+1,?___wmul+1
  3548  0017E0  0012               	return		;funcret
  3549  0017E2                     __end_of___wmul:
  3550                           	opt callstack 0
  3551                           
  3552 ;; *************** function _keypad_line_scan *****************
  3553 ;; Defined at:
  3554 ;;		line 17 in file "main.c"
  3555 ;; Parameters:    Size  Location     Type
  3556 ;;		None
  3557 ;; Auto vars:     Size  Location     Type
  3558 ;;		None
  3559 ;; Return value:  Size  Location     Type
  3560 ;;                  1    wreg      void 
  3561 ;; Registers used:
  3562 ;;		wreg, status,2, status,0
  3563 ;; Tracked objects:
  3564 ;;		On entry : 0/0
  3565 ;;		On exit  : 0/0
  3566 ;;		Unchanged: 0/0
  3567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3568 ;;      Params:         0       0       0       0       0       0       0
  3569 ;;      Locals:         0       0       0       0       0       0       0
  3570 ;;      Temps:          0       0       0       0       0       0       0
  3571 ;;      Totals:         0       0       0       0       0       0       0
  3572 ;;Total ram usage:        0 bytes
  3573 ;; Hardware stack levels used:    1
  3574 ;; Hardware stack levels required when called:    3
  3575 ;; This function calls:
  3576 ;;		Nothing
  3577 ;; This function is called by:
  3578 ;;		_main
  3579 ;; This function uses a non-reentrant model
  3580 ;;
  3581                           
  3582                           	psect	text23
  3583  0017E2                     __ptext23:
  3584                           	opt callstack 0
  3585  0017E2                     _keypad_line_scan:
  3586                           	opt callstack 27
  3587  0017E2                     
  3588                           ;main.c: 18:     static uint8_t k_scan = 0x08;;main.c: 20:     k_scan = k_scan << 1;
  3589  0017E2  5073               	movf	keypad_line_scan@k_scan^0,w,c
  3590  0017E4  2473               	addwf	keypad_line_scan@k_scan^0,w,c
  3591  0017E6  6E73               	movwf	keypad_line_scan@k_scan^0,c
  3592                           
  3593                           ;main.c: 21:     if(k_scan >= 0x80){
  3594  0017E8  0E7F               	movlw	127
  3595  0017EA  6473               	cpfsgt	keypad_line_scan@k_scan^0,c
  3596  0017EC  EFFA  F00B         	goto	u661
  3597  0017F0  EFFC  F00B         	goto	u660
  3598  0017F4                     u661:
  3599  0017F4  EFFE  F00B         	goto	l1411
  3600  0017F8                     u660:
  3601  0017F8                     
  3602                           ;main.c: 22:         k_scan = 0x08;
  3603  0017F8  0E08               	movlw	8
  3604  0017FA  6E73               	movwf	keypad_line_scan@k_scan^0,c
  3605  0017FC                     l1411:
  3606                           
  3607                           ;main.c: 24:     LATB = k_scan;
  3608  0017FC  C073  FF8A         	movff	keypad_line_scan@k_scan,3978	;volatile
  3609  001800  0012               	return		;funcret
  3610  001802                     __end_of_keypad_line_scan:
  3611                           	opt callstack 0
  3612                           
  3613 ;; *************** function _low_isr *****************
  3614 ;; Defined at:
  3615 ;;		line 159 in file "main.c"
  3616 ;; Parameters:    Size  Location     Type
  3617 ;;		None
  3618 ;; Auto vars:     Size  Location     Type
  3619 ;;		None
  3620 ;; Return value:  Size  Location     Type
  3621 ;;                  1    wreg      void 
  3622 ;; Registers used:
  3623 ;;		None
  3624 ;; Tracked objects:
  3625 ;;		On entry : 0/0
  3626 ;;		On exit  : 0/0
  3627 ;;		Unchanged: 0/0
  3628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3629 ;;      Params:         0       0       0       0       0       0       0
  3630 ;;      Locals:         0       0       0       0       0       0       0
  3631 ;;      Temps:          1       0       0       0       0       0       0
  3632 ;;      Totals:         1       0       0       0       0       0       0
  3633 ;;Total ram usage:        1 bytes
  3634 ;; Hardware stack levels used:    1
  3635 ;; Hardware stack levels required when called:    2
  3636 ;; This function calls:
  3637 ;;		Nothing
  3638 ;; This function is called by:
  3639 ;;		Interrupt level 1
  3640 ;; This function uses a non-reentrant model
  3641 ;;
  3642                           
  3643                           	psect	intcodelo
  3644  000018                     __pintcodelo:
  3645                           	opt callstack 0
  3646  000018                     _low_isr:
  3647                           	opt callstack 19
  3648                           
  3649                           ;incstack = 0
  3650  000018  8074               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  3651  00001A  CFE0 F00A          	movff	bsr,??_low_isr
  3652  00001E                     
  3653                           ;main.c: 160:     INTCONbits.GIEH = 0;
  3654  00001E  9EF2               	bcf	242,7,c	;volatile
  3655                           
  3656                           ;main.c: 163:     INTCONbits.GIEH = 1;
  3657  000020  8EF2               	bsf	242,7,c	;volatile
  3658  000022  C00A  FFE0         	movff	??_low_isr,bsr
  3659  000026  9074               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  3660  000028  0010               	retfie	
  3661  00002A                     __end_of_low_isr:
  3662                           	opt callstack 0
  3663                           
  3664 ;; *************** function _high_isr *****************
  3665 ;; Defined at:
  3666 ;;		line 135 in file "main.c"
  3667 ;; Parameters:    Size  Location     Type
  3668 ;;		None
  3669 ;; Auto vars:     Size  Location     Type
  3670 ;;		None
  3671 ;; Return value:  Size  Location     Type
  3672 ;;                  1    wreg      void 
  3673 ;; Registers used:
  3674 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3675 ;; Tracked objects:
  3676 ;;		On entry : 0/0
  3677 ;;		On exit  : 0/0
  3678 ;;		Unchanged: 0/0
  3679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3680 ;;      Params:         0       0       0       0       0       0       0
  3681 ;;      Locals:         0       0       0       0       0       0       0
  3682 ;;      Temps:          2       0       0       0       0       0       0
  3683 ;;      Totals:         2       0       0       0       0       0       0
  3684 ;;Total ram usage:        2 bytes
  3685 ;; Hardware stack levels used:    1
  3686 ;; Hardware stack levels required when called:    1
  3687 ;; This function calls:
  3688 ;;		_keypad_to_value_int0
  3689 ;;		_keypad_to_value_int1
  3690 ;;		_keypad_to_value_int2
  3691 ;; This function is called by:
  3692 ;;		Interrupt level 2
  3693 ;; This function uses a non-reentrant model
  3694 ;;
  3695                           
  3696                           	psect	intcode
  3697  000008                     __pintcode:
  3698                           	opt callstack 0
  3699  000008                     _high_isr:
  3700                           	opt callstack 19
  3701                           
  3702                           ;incstack = 0
  3703  000008  8274               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  3704  00000A  ED08  F008         	call	int_func,f	;refresh shadow registers
  3705                           
  3706                           	psect	intcode_body
  3707  001010                     __pintcode_body:
  3708                           	opt callstack 19
  3709  001010                     int_func:
  3710                           	opt callstack 19
  3711  001010  0006               	pop		; remove dummy address from shadow register refresh
  3712  001012  CFD9 F008          	movff	fsr2l,??_high_isr
  3713  001016  CFDA F009          	movff	fsr2h,??_high_isr+1
  3714  00101A                     
  3715                           ;main.c: 136:     INTCONbits.GIEH = 0;
  3716  00101A  9EF2               	bcf	242,7,c	;volatile
  3717                           
  3718                           ;main.c: 137:     if(INTCONbits.INT0F || INTCON3bits.INT1F || INTCON3bits.INT2F){
  3719  00101C  B2F2               	btfsc	242,1,c	;volatile
  3720  00101E  EF13  F008         	goto	i2u151_41
  3721  001022  EF15  F008         	goto	i2u151_40
  3722  001026                     i2u151_41:
  3723  001026  EF23  F008         	goto	i2l86
  3724  00102A                     i2u151_40:
  3725  00102A  B0F0               	btfsc	240,0,c	;volatile
  3726  00102C  EF1A  F008         	goto	i2u152_41
  3727  001030  EF1C  F008         	goto	i2u152_40
  3728  001034                     i2u152_41:
  3729  001034  EF23  F008         	goto	i2l86
  3730  001038                     i2u152_40:
  3731  001038  A2F0               	btfss	240,1,c	;volatile
  3732  00103A  EF21  F008         	goto	i2u153_41
  3733  00103E  EF23  F008         	goto	i2u153_40
  3734  001042                     i2u153_41:
  3735  001042  EF62  F008         	goto	i2l2109
  3736  001046                     i2u153_40:
  3737  001046                     i2l86:
  3738                           
  3739                           ;main.c: 139:         if(INTCONbits.INT0F){
  3740  001046  A2F2               	btfss	242,1,c	;volatile
  3741  001048  EF28  F008         	goto	i2u154_41
  3742  00104C  EF2A  F008         	goto	i2u154_40
  3743  001050                     i2u154_41:
  3744  001050  EF38  F008         	goto	i2l2093
  3745  001054                     i2u154_40:
  3746  001054                     
  3747                           ;main.c: 140:             keypad_to_value_int0(PORTB,&key_value,&key_char);
  3748  001054  0E72               	movlw	low _key_value
  3749  001056  6E01               	movwf	keypad_to_value_int0@value^0,c
  3750  001058  0E00               	movlw	high _key_value
  3751  00105A  6E02               	movwf	(keypad_to_value_int0@value+1)^0,c
  3752  00105C  0E71               	movlw	low _key_char
  3753  00105E  6E03               	movwf	keypad_to_value_int0@value_char^0,c
  3754  001060  0E00               	movlw	high _key_char
  3755  001062  6E04               	movwf	(keypad_to_value_int0@value_char+1)^0,c
  3756  001064  5081               	movf	129,w,c	;volatile
  3757  001066  EC1B  F009         	call	_keypad_to_value_int0
  3758  00106A                     
  3759                           ;main.c: 141:             key_isr = 1;
  3760  00106A  0E01               	movlw	1
  3761  00106C  6E70               	movwf	_key_isr^0,c	;volatile
  3762  00106E                     
  3763                           ;main.c: 142:             INTCONbits.INT0F = 0;
  3764  00106E  92F2               	bcf	242,1,c	;volatile
  3765  001070                     i2l2093:
  3766                           
  3767                           ;main.c: 144:         if(INTCON3bits.INT1F){
  3768  001070  A0F0               	btfss	240,0,c	;volatile
  3769  001072  EF3D  F008         	goto	i2u155_41
  3770  001076  EF3F  F008         	goto	i2u155_40
  3771  00107A                     i2u155_41:
  3772  00107A  EF4D  F008         	goto	i2l2101
  3773  00107E                     i2u155_40:
  3774  00107E                     
  3775                           ;main.c: 145:             keypad_to_value_int1(PORTB,&key_value,&key_char);
  3776  00107E  0E72               	movlw	low _key_value
  3777  001080  6E01               	movwf	keypad_to_value_int1@value^0,c
  3778  001082  0E00               	movlw	high _key_value
  3779  001084  6E02               	movwf	(keypad_to_value_int1@value+1)^0,c
  3780  001086  0E71               	movlw	low _key_char
  3781  001088  6E03               	movwf	keypad_to_value_int1@value_char^0,c
  3782  00108A  0E00               	movlw	high _key_char
  3783  00108C  6E04               	movwf	(keypad_to_value_int1@value_char+1)^0,c
  3784  00108E  5081               	movf	129,w,c	;volatile
  3785  001090  ECC2  F008         	call	_keypad_to_value_int1
  3786  001094                     
  3787                           ;main.c: 146:             key_isr = 1;
  3788  001094  0E01               	movlw	1
  3789  001096  6E70               	movwf	_key_isr^0,c	;volatile
  3790  001098                     
  3791                           ;main.c: 147:             INTCON3bits.INT1F = 0;
  3792  001098  90F0               	bcf	240,0,c	;volatile
  3793  00109A                     i2l2101:
  3794                           
  3795                           ;main.c: 149:         if(INTCON3bits.INT2F){
  3796  00109A  A2F0               	btfss	240,1,c	;volatile
  3797  00109C  EF52  F008         	goto	i2u156_41
  3798  0010A0  EF54  F008         	goto	i2u156_40
  3799  0010A4                     i2u156_41:
  3800  0010A4  EF62  F008         	goto	i2l2109
  3801  0010A8                     i2u156_40:
  3802  0010A8                     
  3803                           ;main.c: 150:             keypad_to_value_int2(PORTB,&key_value,&key_char);
  3804  0010A8  0E72               	movlw	low _key_value
  3805  0010AA  6E01               	movwf	keypad_to_value_int2@value^0,c
  3806  0010AC  0E00               	movlw	high _key_value
  3807  0010AE  6E02               	movwf	(keypad_to_value_int2@value+1)^0,c
  3808  0010B0  0E71               	movlw	low _key_char
  3809  0010B2  6E03               	movwf	keypad_to_value_int2@value_char^0,c
  3810  0010B4  0E00               	movlw	high _key_char
  3811  0010B6  6E04               	movwf	(keypad_to_value_int2@value_char+1)^0,c
  3812  0010B8  5081               	movf	129,w,c	;volatile
  3813  0010BA  EC69  F008         	call	_keypad_to_value_int2
  3814  0010BE                     
  3815                           ;main.c: 151:             key_isr = 1;
  3816  0010BE  0E01               	movlw	1
  3817  0010C0  6E70               	movwf	_key_isr^0,c	;volatile
  3818  0010C2                     
  3819                           ;main.c: 152:             INTCON3bits.INT2F = 0;
  3820  0010C2  92F0               	bcf	240,1,c	;volatile
  3821  0010C4                     i2l2109:
  3822                           
  3823                           ;main.c: 156:     INTCONbits.GIEH = 1;
  3824  0010C4  8EF2               	bsf	242,7,c	;volatile
  3825  0010C6  C009  FFDA         	movff	??_high_isr+1,fsr2h
  3826  0010CA  C008  FFD9         	movff	??_high_isr,fsr2l
  3827  0010CE  9274               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  3828  0010D0  0011               	retfie		f
  3829  0010D2                     __end_of_high_isr:
  3830                           	opt callstack 0
  3831                           
  3832 ;; *************** function _keypad_to_value_int2 *****************
  3833 ;; Defined at:
  3834 ;;		line 68 in file "main.c"
  3835 ;; Parameters:    Size  Location     Type
  3836 ;;  port_value      1    wreg     unsigned char 
  3837 ;;  value           2    0[COMRAM] PTR volatile unsigned ch
  3838 ;;		 -> key_value(1), 
  3839 ;;  value_char      2    2[COMRAM] PTR volatile unsigned ch
  3840 ;;		 -> key_char(1), 
  3841 ;; Auto vars:     Size  Location     Type
  3842 ;;  port_value      1    6[COMRAM] unsigned char 
  3843 ;; Return value:  Size  Location     Type
  3844 ;;                  1    wreg      void 
  3845 ;; Registers used:
  3846 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3847 ;; Tracked objects:
  3848 ;;		On entry : 0/0
  3849 ;;		On exit  : 0/0
  3850 ;;		Unchanged: 0/0
  3851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3852 ;;      Params:         4       0       0       0       0       0       0
  3853 ;;      Locals:         1       0       0       0       0       0       0
  3854 ;;      Temps:          2       0       0       0       0       0       0
  3855 ;;      Totals:         7       0       0       0       0       0       0
  3856 ;;Total ram usage:        7 bytes
  3857 ;; Hardware stack levels used:    1
  3858 ;; This function calls:
  3859 ;;		Nothing
  3860 ;; This function is called by:
  3861 ;;		_high_isr
  3862 ;; This function uses a non-reentrant model
  3863 ;;
  3864                           
  3865                           	psect	text26
  3866  0010D2                     __ptext26:
  3867                           	opt callstack 0
  3868  0010D2                     _keypad_to_value_int2:
  3869                           	opt callstack 19
  3870                           
  3871                           ;incstack = 0
  3872                           ;keypad_to_value_int2@port_value stored from wreg
  3873  0010D2  6E07               	movwf	keypad_to_value_int2@port_value^0,c
  3874  0010D4                     
  3875                           ;main.c: 69:     switch(port_value){
  3876  0010D4  EFA4  F008         	goto	i2l2009
  3877  0010D8                     i2l1999:
  3878                           
  3879                           ;main.c: 71:             *value_char = '3';
  3880  0010D8  C003  FFD9         	movff	keypad_to_value_int2@value_char,fsr2l
  3881  0010DC  C004  FFDA         	movff	keypad_to_value_int2@value_char+1,fsr2h
  3882  0010E0  0E33               	movlw	51
  3883  0010E2  6EDF               	movwf	indf2,c
  3884                           
  3885                           ;main.c: 72:             *value = 3;
  3886  0010E4  C001  FFD9         	movff	keypad_to_value_int2@value,fsr2l
  3887  0010E8  C002  FFDA         	movff	keypad_to_value_int2@value+1,fsr2h
  3888  0010EC  0E03               	movlw	3
  3889  0010EE  6EDF               	movwf	indf2,c
  3890                           
  3891                           ;main.c: 73:         break;
  3892  0010F0  EFC1  F008         	goto	i2l65
  3893  0010F4                     i2l2001:
  3894                           
  3895                           ;main.c: 75:             *value_char = '9';
  3896  0010F4  C003  FFD9         	movff	keypad_to_value_int2@value_char,fsr2l
  3897  0010F8  C004  FFDA         	movff	keypad_to_value_int2@value_char+1,fsr2h
  3898  0010FC  0E39               	movlw	57
  3899  0010FE  6EDF               	movwf	indf2,c
  3900                           
  3901                           ;main.c: 76:             *value = 9;
  3902  001100  C001  FFD9         	movff	keypad_to_value_int2@value,fsr2l
  3903  001104  C002  FFDA         	movff	keypad_to_value_int2@value+1,fsr2h
  3904  001108  0E09               	movlw	9
  3905  00110A  6EDF               	movwf	indf2,c
  3906                           
  3907                           ;main.c: 77:         break;
  3908  00110C  EFC1  F008         	goto	i2l65
  3909  001110                     i2l2003:
  3910                           
  3911                           ;main.c: 79:             *value_char = '#';
  3912  001110  C003  FFD9         	movff	keypad_to_value_int2@value_char,fsr2l
  3913  001114  C004  FFDA         	movff	keypad_to_value_int2@value_char+1,fsr2h
  3914  001118  0E23               	movlw	35
  3915  00111A  6EDF               	movwf	indf2,c
  3916                           
  3917                           ;main.c: 80:             *value = 11;
  3918  00111C  C001  FFD9         	movff	keypad_to_value_int2@value,fsr2l
  3919  001120  C002  FFDA         	movff	keypad_to_value_int2@value+1,fsr2h
  3920  001124  0E0B               	movlw	11
  3921  001126  6EDF               	movwf	indf2,c
  3922                           
  3923                           ;main.c: 81:         break;
  3924  001128  EFC1  F008         	goto	i2l65
  3925  00112C                     i2l2005:
  3926                           
  3927                           ;main.c: 83:             *value_char = '6';
  3928  00112C  C003  FFD9         	movff	keypad_to_value_int2@value_char,fsr2l
  3929  001130  C004  FFDA         	movff	keypad_to_value_int2@value_char+1,fsr2h
  3930  001134  0E36               	movlw	54
  3931  001136  6EDF               	movwf	indf2,c
  3932                           
  3933                           ;main.c: 84:             *value = 6;
  3934  001138  C001  FFD9         	movff	keypad_to_value_int2@value,fsr2l
  3935  00113C  C002  FFDA         	movff	keypad_to_value_int2@value+1,fsr2h
  3936  001140  0E06               	movlw	6
  3937  001142  6EDF               	movwf	indf2,c
  3938                           
  3939                           ;main.c: 85:         break;
  3940  001144  EFC1  F008         	goto	i2l65
  3941  001148                     i2l2009:
  3942  001148  5007               	movf	keypad_to_value_int2@port_value^0,w,c
  3943  00114A  6E05               	movwf	??_keypad_to_value_int2^0,c
  3944  00114C  6A06               	clrf	(??_keypad_to_value_int2+1)^0,c
  3945                           
  3946                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3947                           ; Switch size 1, requested type "simple"
  3948                           ; Number of cases is 1, Range of values is 0 to 0
  3949                           ; switch strategies available:
  3950                           ; Name         Instructions Cycles
  3951                           ; simple_byte            4     3 (average)
  3952                           ;	Chosen strategy is simple_byte
  3953  00114E  5006               	movf	(??_keypad_to_value_int2+1)^0,w,c
  3954  001150  0A00               	xorlw	0	; case 0
  3955  001152  B4D8               	btfsc	status,2,c
  3956  001154  EFAE  F008         	goto	i2l2715
  3957  001158  EFC1  F008         	goto	i2l65
  3958  00115C                     i2l2715:
  3959                           
  3960                           ; Switch size 1, requested type "simple"
  3961                           ; Number of cases is 4, Range of values is 12 to 68
  3962                           ; switch strategies available:
  3963                           ; Name         Instructions Cycles
  3964                           ; simple_byte           13     7 (average)
  3965                           ;	Chosen strategy is simple_byte
  3966  00115C  5005               	movf	??_keypad_to_value_int2^0,w,c
  3967  00115E  0A0C               	xorlw	12	; case 12
  3968  001160  B4D8               	btfsc	status,2,c
  3969  001162  EF96  F008         	goto	i2l2005
  3970  001166  0A18               	xorlw	24	; case 20
  3971  001168  B4D8               	btfsc	status,2,c
  3972  00116A  EF7A  F008         	goto	i2l2001
  3973  00116E  0A30               	xorlw	48	; case 36
  3974  001170  B4D8               	btfsc	status,2,c
  3975  001172  EF88  F008         	goto	i2l2003
  3976  001176  0A60               	xorlw	96	; case 68
  3977  001178  B4D8               	btfsc	status,2,c
  3978  00117A  EF6C  F008         	goto	i2l1999
  3979  00117E  EFC1  F008         	goto	i2l65
  3980  001182                     i2l65:
  3981  001182  0012               	return		;funcret
  3982  001184                     __end_of_keypad_to_value_int2:
  3983                           	opt callstack 0
  3984                           
  3985 ;; *************** function _keypad_to_value_int1 *****************
  3986 ;; Defined at:
  3987 ;;		line 47 in file "main.c"
  3988 ;; Parameters:    Size  Location     Type
  3989 ;;  port_value      1    wreg     unsigned char 
  3990 ;;  value           2    0[COMRAM] PTR volatile unsigned ch
  3991 ;;		 -> key_value(1), 
  3992 ;;  value_char      2    2[COMRAM] PTR volatile unsigned ch
  3993 ;;		 -> key_char(1), 
  3994 ;; Auto vars:     Size  Location     Type
  3995 ;;  port_value      1    6[COMRAM] unsigned char 
  3996 ;; Return value:  Size  Location     Type
  3997 ;;                  1    wreg      void 
  3998 ;; Registers used:
  3999 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4000 ;; Tracked objects:
  4001 ;;		On entry : 0/0
  4002 ;;		On exit  : 0/0
  4003 ;;		Unchanged: 0/0
  4004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4005 ;;      Params:         4       0       0       0       0       0       0
  4006 ;;      Locals:         1       0       0       0       0       0       0
  4007 ;;      Temps:          2       0       0       0       0       0       0
  4008 ;;      Totals:         7       0       0       0       0       0       0
  4009 ;;Total ram usage:        7 bytes
  4010 ;; Hardware stack levels used:    1
  4011 ;; This function calls:
  4012 ;;		Nothing
  4013 ;; This function is called by:
  4014 ;;		_high_isr
  4015 ;; This function uses a non-reentrant model
  4016 ;;
  4017                           
  4018                           	psect	text27
  4019  001184                     __ptext27:
  4020                           	opt callstack 0
  4021  001184                     _keypad_to_value_int1:
  4022                           	opt callstack 19
  4023                           
  4024                           ;incstack = 0
  4025                           ;keypad_to_value_int1@port_value stored from wreg
  4026  001184  6E07               	movwf	keypad_to_value_int1@port_value^0,c
  4027  001186                     
  4028                           ;main.c: 48:     switch(port_value){
  4029  001186  EFFD  F008         	goto	i2l1991
  4030  00118A                     i2l1981:
  4031                           
  4032                           ;main.c: 51:             *value_char = '2';
  4033  00118A  C003  FFD9         	movff	keypad_to_value_int1@value_char,fsr2l
  4034  00118E  C004  FFDA         	movff	keypad_to_value_int1@value_char+1,fsr2h
  4035  001192  0E32               	movlw	50
  4036  001194  6EDF               	movwf	indf2,c
  4037                           
  4038                           ;main.c: 52:             *value = 2;
  4039  001196  C001  FFD9         	movff	keypad_to_value_int1@value,fsr2l
  4040  00119A  C002  FFDA         	movff	keypad_to_value_int1@value+1,fsr2h
  4041  00119E  0E02               	movlw	2
  4042  0011A0  6EDF               	movwf	indf2,c
  4043                           
  4044                           ;main.c: 53:             break;
  4045  0011A2  EF1A  F009         	goto	i2l56
  4046  0011A6                     i2l1983:
  4047                           
  4048                           ;main.c: 55:             *value_char = '8';
  4049  0011A6  C003  FFD9         	movff	keypad_to_value_int1@value_char,fsr2l
  4050  0011AA  C004  FFDA         	movff	keypad_to_value_int1@value_char+1,fsr2h
  4051  0011AE  0E38               	movlw	56
  4052  0011B0  6EDF               	movwf	indf2,c
  4053                           
  4054                           ;main.c: 56:              *value = 8;
  4055  0011B2  C001  FFD9         	movff	keypad_to_value_int1@value,fsr2l
  4056  0011B6  C002  FFDA         	movff	keypad_to_value_int1@value+1,fsr2h
  4057  0011BA  0E08               	movlw	8
  4058  0011BC  6EDF               	movwf	indf2,c
  4059                           
  4060                           ;main.c: 57:             break;
  4061  0011BE  EF1A  F009         	goto	i2l56
  4062  0011C2                     i2l1985:
  4063                           
  4064                           ;main.c: 59:             *value_char = '*';
  4065  0011C2  C003  FFD9         	movff	keypad_to_value_int1@value_char,fsr2l
  4066  0011C6  C004  FFDA         	movff	keypad_to_value_int1@value_char+1,fsr2h
  4067  0011CA  0E2A               	movlw	42
  4068  0011CC  6EDF               	movwf	indf2,c
  4069                           
  4070                           ;main.c: 60:             *value = 10;
  4071  0011CE  C001  FFD9         	movff	keypad_to_value_int1@value,fsr2l
  4072  0011D2  C002  FFDA         	movff	keypad_to_value_int1@value+1,fsr2h
  4073  0011D6  0E0A               	movlw	10
  4074  0011D8  6EDF               	movwf	indf2,c
  4075                           
  4076                           ;main.c: 61:         break;
  4077  0011DA  EF1A  F009         	goto	i2l56
  4078  0011DE                     i2l1987:
  4079                           
  4080                           ;main.c: 63:             *value_char = '5';
  4081  0011DE  C003  FFD9         	movff	keypad_to_value_int1@value_char,fsr2l
  4082  0011E2  C004  FFDA         	movff	keypad_to_value_int1@value_char+1,fsr2h
  4083  0011E6  0E35               	movlw	53
  4084  0011E8  6EDF               	movwf	indf2,c
  4085                           
  4086                           ;main.c: 64:             *value = 5;
  4087  0011EA  C001  FFD9         	movff	keypad_to_value_int1@value,fsr2l
  4088  0011EE  C002  FFDA         	movff	keypad_to_value_int1@value+1,fsr2h
  4089  0011F2  0E05               	movlw	5
  4090  0011F4  6EDF               	movwf	indf2,c
  4091                           
  4092                           ;main.c: 65:         break;
  4093  0011F6  EF1A  F009         	goto	i2l56
  4094  0011FA                     i2l1991:
  4095  0011FA  5007               	movf	keypad_to_value_int1@port_value^0,w,c
  4096  0011FC  6E05               	movwf	??_keypad_to_value_int1^0,c
  4097  0011FE  6A06               	clrf	(??_keypad_to_value_int1+1)^0,c
  4098                           
  4099                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4100                           ; Switch size 1, requested type "simple"
  4101                           ; Number of cases is 1, Range of values is 0 to 0
  4102                           ; switch strategies available:
  4103                           ; Name         Instructions Cycles
  4104                           ; simple_byte            4     3 (average)
  4105                           ;	Chosen strategy is simple_byte
  4106  001200  5006               	movf	(??_keypad_to_value_int1+1)^0,w,c
  4107  001202  0A00               	xorlw	0	; case 0
  4108  001204  B4D8               	btfsc	status,2,c
  4109  001206  EF07  F009         	goto	i2l2717
  4110  00120A  EF1A  F009         	goto	i2l56
  4111  00120E                     i2l2717:
  4112                           
  4113                           ; Switch size 1, requested type "simple"
  4114                           ; Number of cases is 4, Range of values is 10 to 66
  4115                           ; switch strategies available:
  4116                           ; Name         Instructions Cycles
  4117                           ; simple_byte           13     7 (average)
  4118                           ;	Chosen strategy is simple_byte
  4119  00120E  5005               	movf	??_keypad_to_value_int1^0,w,c
  4120  001210  0A0A               	xorlw	10	; case 10
  4121  001212  B4D8               	btfsc	status,2,c
  4122  001214  EFEF  F008         	goto	i2l1987
  4123  001218  0A18               	xorlw	24	; case 18
  4124  00121A  B4D8               	btfsc	status,2,c
  4125  00121C  EFD3  F008         	goto	i2l1983
  4126  001220  0A33               	xorlw	51	; case 33
  4127  001222  B4D8               	btfsc	status,2,c
  4128  001224  EFE1  F008         	goto	i2l1985
  4129  001228  0A63               	xorlw	99	; case 66
  4130  00122A  B4D8               	btfsc	status,2,c
  4131  00122C  EFC5  F008         	goto	i2l1981
  4132  001230  EF1A  F009         	goto	i2l56
  4133  001234                     i2l56:
  4134  001234  0012               	return		;funcret
  4135  001236                     __end_of_keypad_to_value_int1:
  4136                           	opt callstack 0
  4137                           
  4138 ;; *************** function _keypad_to_value_int0 *****************
  4139 ;; Defined at:
  4140 ;;		line 27 in file "main.c"
  4141 ;; Parameters:    Size  Location     Type
  4142 ;;  port_value      1    wreg     unsigned char 
  4143 ;;  value           2    0[COMRAM] PTR volatile unsigned ch
  4144 ;;		 -> key_value(1), 
  4145 ;;  value_char      2    2[COMRAM] PTR volatile unsigned ch
  4146 ;;		 -> key_char(1), 
  4147 ;; Auto vars:     Size  Location     Type
  4148 ;;  port_value      1    6[COMRAM] unsigned char 
  4149 ;; Return value:  Size  Location     Type
  4150 ;;                  1    wreg      void 
  4151 ;; Registers used:
  4152 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4153 ;; Tracked objects:
  4154 ;;		On entry : 0/0
  4155 ;;		On exit  : 0/0
  4156 ;;		Unchanged: 0/0
  4157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4158 ;;      Params:         4       0       0       0       0       0       0
  4159 ;;      Locals:         1       0       0       0       0       0       0
  4160 ;;      Temps:          2       0       0       0       0       0       0
  4161 ;;      Totals:         7       0       0       0       0       0       0
  4162 ;;Total ram usage:        7 bytes
  4163 ;; Hardware stack levels used:    1
  4164 ;; This function calls:
  4165 ;;		Nothing
  4166 ;; This function is called by:
  4167 ;;		_high_isr
  4168 ;; This function uses a non-reentrant model
  4169 ;;
  4170                           
  4171                           	psect	text28
  4172  001236                     __ptext28:
  4173                           	opt callstack 0
  4174  001236                     _keypad_to_value_int0:
  4175                           	opt callstack 19
  4176                           
  4177                           ;incstack = 0
  4178                           ;keypad_to_value_int0@port_value stored from wreg
  4179  001236  6E07               	movwf	keypad_to_value_int0@port_value^0,c
  4180  001238                     
  4181                           ;main.c: 28:     switch(port_value){
  4182  001238  EF56  F009         	goto	i2l1973
  4183  00123C                     i2l1963:
  4184                           
  4185                           ;main.c: 30:             *value_char = '1';
  4186  00123C  C003  FFD9         	movff	keypad_to_value_int0@value_char,fsr2l
  4187  001240  C004  FFDA         	movff	keypad_to_value_int0@value_char+1,fsr2h
  4188  001244  0E31               	movlw	49
  4189  001246  6EDF               	movwf	indf2,c
  4190                           
  4191                           ;main.c: 31:             *value = 1;
  4192  001248  C001  FFD9         	movff	keypad_to_value_int0@value,fsr2l
  4193  00124C  C002  FFDA         	movff	keypad_to_value_int0@value+1,fsr2h
  4194  001250  0E01               	movlw	1
  4195  001252  6EDF               	movwf	indf2,c
  4196                           
  4197                           ;main.c: 32:         break;
  4198  001254  EF73  F009         	goto	i2l47
  4199  001258                     i2l1965:
  4200                           
  4201                           ;main.c: 34:             *value_char = '7';
  4202  001258  C003  FFD9         	movff	keypad_to_value_int0@value_char,fsr2l
  4203  00125C  C004  FFDA         	movff	keypad_to_value_int0@value_char+1,fsr2h
  4204  001260  0E37               	movlw	55
  4205  001262  6EDF               	movwf	indf2,c
  4206                           
  4207                           ;main.c: 35:             *value = 7;
  4208  001264  C001  FFD9         	movff	keypad_to_value_int0@value,fsr2l
  4209  001268  C002  FFDA         	movff	keypad_to_value_int0@value+1,fsr2h
  4210  00126C  0E07               	movlw	7
  4211  00126E  6EDF               	movwf	indf2,c
  4212                           
  4213                           ;main.c: 36:         break;
  4214  001270  EF73  F009         	goto	i2l47
  4215  001274                     i2l1967:
  4216                           
  4217                           ;main.c: 38:             *value_char = '*';
  4218  001274  C003  FFD9         	movff	keypad_to_value_int0@value_char,fsr2l
  4219  001278  C004  FFDA         	movff	keypad_to_value_int0@value_char+1,fsr2h
  4220  00127C  0E2A               	movlw	42
  4221  00127E  6EDF               	movwf	indf2,c
  4222                           
  4223                           ;main.c: 39:             *value = 10;
  4224  001280  C001  FFD9         	movff	keypad_to_value_int0@value,fsr2l
  4225  001284  C002  FFDA         	movff	keypad_to_value_int0@value+1,fsr2h
  4226  001288  0E0A               	movlw	10
  4227  00128A  6EDF               	movwf	indf2,c
  4228                           
  4229                           ;main.c: 40:         break;
  4230  00128C  EF73  F009         	goto	i2l47
  4231  001290                     i2l1969:
  4232                           
  4233                           ;main.c: 42:             *value_char = '4';
  4234  001290  C003  FFD9         	movff	keypad_to_value_int0@value_char,fsr2l
  4235  001294  C004  FFDA         	movff	keypad_to_value_int0@value_char+1,fsr2h
  4236  001298  0E34               	movlw	52
  4237  00129A  6EDF               	movwf	indf2,c
  4238                           
  4239                           ;main.c: 43:             *value = 4;
  4240  00129C  C001  FFD9         	movff	keypad_to_value_int0@value,fsr2l
  4241  0012A0  C002  FFDA         	movff	keypad_to_value_int0@value+1,fsr2h
  4242  0012A4  0E04               	movlw	4
  4243  0012A6  6EDF               	movwf	indf2,c
  4244                           
  4245                           ;main.c: 44:         break;
  4246  0012A8  EF73  F009         	goto	i2l47
  4247  0012AC                     i2l1973:
  4248  0012AC  5007               	movf	keypad_to_value_int0@port_value^0,w,c
  4249  0012AE  6E05               	movwf	??_keypad_to_value_int0^0,c
  4250  0012B0  6A06               	clrf	(??_keypad_to_value_int0+1)^0,c
  4251                           
  4252                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4253                           ; Switch size 1, requested type "simple"
  4254                           ; Number of cases is 1, Range of values is 0 to 0
  4255                           ; switch strategies available:
  4256                           ; Name         Instructions Cycles
  4257                           ; simple_byte            4     3 (average)
  4258                           ;	Chosen strategy is simple_byte
  4259  0012B2  5006               	movf	(??_keypad_to_value_int0+1)^0,w,c
  4260  0012B4  0A00               	xorlw	0	; case 0
  4261  0012B6  B4D8               	btfsc	status,2,c
  4262  0012B8  EF60  F009         	goto	i2l2719
  4263  0012BC  EF73  F009         	goto	i2l47
  4264  0012C0                     i2l2719:
  4265                           
  4266                           ; Switch size 1, requested type "simple"
  4267                           ; Number of cases is 4, Range of values is 9 to 65
  4268                           ; switch strategies available:
  4269                           ; Name         Instructions Cycles
  4270                           ; simple_byte           13     7 (average)
  4271                           ;	Chosen strategy is simple_byte
  4272  0012C0  5005               	movf	??_keypad_to_value_int0^0,w,c
  4273  0012C2  0A09               	xorlw	9	; case 9
  4274  0012C4  B4D8               	btfsc	status,2,c
  4275  0012C6  EF48  F009         	goto	i2l1969
  4276  0012CA  0A18               	xorlw	24	; case 17
  4277  0012CC  B4D8               	btfsc	status,2,c
  4278  0012CE  EF2C  F009         	goto	i2l1965
  4279  0012D2  0A30               	xorlw	48	; case 33
  4280  0012D4  B4D8               	btfsc	status,2,c
  4281  0012D6  EF3A  F009         	goto	i2l1967
  4282  0012DA  0A60               	xorlw	96	; case 65
  4283  0012DC  B4D8               	btfsc	status,2,c
  4284  0012DE  EF1E  F009         	goto	i2l1963
  4285  0012E2  EF73  F009         	goto	i2l47
  4286  0012E6                     i2l47:
  4287  0012E6  0012               	return		;funcret
  4288  0012E8                     __end_of_keypad_to_value_int0:
  4289                           	opt callstack 0
  4290                           
  4291                           	psect	rparam
  4292  0000                     
  4293                           	psect	temp
  4294  000074                     btemp:
  4295                           	opt callstack 0
  4296  000074                     	ds	1
  4297  0000                     int$flags	set	btemp
  4298  0000                     wtemp8	set	btemp+1
  4299  0000                     ttemp5	set	btemp+1
  4300  0000                     ttemp6	set	btemp+4
  4301  0000                     ttemp7	set	btemp+8
  4302                           tosu	equ	0xFFF
  4303                           tosh	equ	0xFFE
  4304                           tosl	equ	0xFFD
  4305                           stkptr	equ	0xFFC
  4306                           pclatu	equ	0xFFB
  4307                           pclath	equ	0xFFA
  4308                           pcl	equ	0xFF9
  4309                           tblptru	equ	0xFF8
  4310                           tblptrh	equ	0xFF7
  4311                           tblptrl	equ	0xFF6
  4312                           tablat	equ	0xFF5
  4313                           prodh	equ	0xFF4
  4314                           prodl	equ	0xFF3
  4315                           indf0	equ	0xFEF
  4316                           postinc0	equ	0xFEE
  4317                           postdec0	equ	0xFED
  4318                           preinc0	equ	0xFEC
  4319                           plusw0	equ	0xFEB
  4320                           fsr0h	equ	0xFEA
  4321                           fsr0l	equ	0xFE9
  4322                           wreg	equ	0xFE8
  4323                           indf1	equ	0xFE7
  4324                           postinc1	equ	0xFE6
  4325                           postdec1	equ	0xFE5
  4326                           preinc1	equ	0xFE4
  4327                           plusw1	equ	0xFE3
  4328                           fsr1h	equ	0xFE2
  4329                           fsr1l	equ	0xFE1
  4330                           bsr	equ	0xFE0
  4331                           indf2	equ	0xFDF
  4332                           postinc2	equ	0xFDE
  4333                           postdec2	equ	0xFDD
  4334                           preinc2	equ	0xFDC
  4335                           plusw2	equ	0xFDB
  4336                           fsr2h	equ	0xFDA
  4337                           fsr2l	equ	0xFD9
  4338                           status	equ	0xFD8


Data Sizes:
    Strings     22
    Constant    18
    Data        1
    BSS         68
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    105     115
    BANK0           128     22      81
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_1(CODE[22]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 25
		 -> print_buffer(BANK0[25]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 25
		 -> print_buffer(BANK0[25]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    S1193_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 25
		 -> print_buffer(BANK0[25]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 25
		 -> print_buffer(BANK0[25]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_1(CODE[22]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_1(CODE[22]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 22
		 -> STR_1(CODE[22]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    xtoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    ctoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    uart_send_string@c	PTR unsigned char  size(2) Largest target is 25
		 -> program_start(CODE[18]), print_buffer(BANK0[25]), 

    keypad_to_value_int2@value	PTR volatile unsigned char  size(2) Largest target is 1
		 -> key_value(COMRAM[1]), 

    keypad_to_value_int2@value_char	PTR volatile unsigned char  size(2) Largest target is 1
		 -> key_char(COMRAM[1]), 

    keypad_to_value_int1@value	PTR volatile unsigned char  size(2) Largest target is 1
		 -> key_value(COMRAM[1]), 

    keypad_to_value_int1@value_char	PTR volatile unsigned char  size(2) Largest target is 1
		 -> key_char(COMRAM[1]), 

    keypad_to_value_int0@value	PTR volatile unsigned char  size(2) Largest target is 1
		 -> key_value(COMRAM[1]), 

    keypad_to_value_int0@value_char	PTR volatile unsigned char  size(2) Largest target is 1
		 -> key_char(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _uart_send_string->_uart_send
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_xtoa
    _xtoa->_pad
    _toupper->_islower
    _ctoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _atoi->_isspace

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    _high_isr->_keypad_to_value_int0
    _high_isr->_keypad_to_value_int1
    _high_isr->_keypad_to_value_int2

Critical Paths under _main in BANK0

    _keypad_read->_sprintf
    _sprintf->_vfprintf

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   16086
                                             20 BANK0      2     2      0
                   _keypad_line_scan
                        _keypad_read
                          _uart_init
                   _uart_send_string
 ---------------------------------------------------------------------------------
 (1) _uart_init                                            8     0      8     414
                                             10 COMRAM     8     0      8
 ---------------------------------------------------------------------------------
 (1) _keypad_read                                          0     0      0   15408
                            _sprintf
                   _uart_send_string
 ---------------------------------------------------------------------------------
 (1) _uart_send_string                                     5     3      2     264
                                             11 COMRAM     5     3      2
                          _uart_send
 ---------------------------------------------------------------------------------
 (2) _uart_send                                            1     1      0      22
                                             10 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             18    10      8   15144
                                              2 BANK0     18    10      8
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             8     2      6   14646
                                             99 COMRAM     6     0      6
                                              0 BANK0      2     2      0
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           46    40      6   14104
                                             76 COMRAM    23    17      6
                               _atoi
                               _ctoa
                              _fputc
                            _isdigit
                               _xtoa
 ---------------------------------------------------------------------------------
 (5) _xtoa                                                39    28     11    5717
                                             37 COMRAM    39    28     11
                            _isalpha
                            _isupper
                                _pad
                            _toupper
 ---------------------------------------------------------------------------------
 (6) _toupper                                              8     6      2     512
                                             16 COMRAM     8     6      2
                            _islower
 ---------------------------------------------------------------------------------
 (7) _islower                                              6     4      2     191
                                             10 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (6) _isupper                                              6     4      2     191
                                             10 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (6) _isalpha                                              6     4      2     191
                                             10 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) _ctoa                                                 7     4      3    3966
                                             37 COMRAM     5     2      3
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                 11     5      6    3687
                                             26 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (7) _strlen                                               4     2      2     220
                                             10 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (7) _fputs                                                7     3      4    1537
                                             19 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (8) _fputc                                                9     5      4    1037
                                             10 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (9) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _atoi                                                15    13      2    1665
                                             17 COMRAM    15    13      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (6) _isspace                                              7     5      2     259
                                             10 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              6     4      2     281
                                             10 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4     562
                                             10 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _keypad_line_scan                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _low_isr                                             1     1      0       0
                                              9 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _high_isr                                            2     2      0    1050
                                              7 COMRAM     2     2      0
               _keypad_to_value_int0
               _keypad_to_value_int1
               _keypad_to_value_int2
 ---------------------------------------------------------------------------------
 (12) _keypad_to_value_int2                                7     3      4     350
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (12) _keypad_to_value_int1                                7     3      4     350
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (12) _keypad_to_value_int0                                7     3      4     350
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _keypad_line_scan
   _keypad_read
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _atoi
             ___wmul
             _isdigit
             _isspace
           _ctoa
             _pad
               _fputc
                 _putch
               _fputs
                 _fputc
                   _putch
               _strlen
           _fputc
             _putch
           _isdigit
           _xtoa
             _isalpha
             _isupper
             _pad
               _fputc
                 _putch
               _fputs
                 _fputc
                   _putch
               _strlen
             _toupper
               _islower
     _uart_send_string
       _uart_send
   _uart_init
   _uart_send_string
     _uart_send

 _low_isr (ROOT)

 _high_isr (ROOT)
   _keypad_to_value_int0
   _keypad_to_value_int1
   _keypad_to_value_int2

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     16      51       5       63.3%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     69      73       1       91.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C4      15        0.0%
DATA                 0      0      C4       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Fri Dec 27 15:44:08 2019

      __end_of_uart_send_string 1402                              l38 1800                              l73 12F2  
                            l68 17BA                              bsr 000FE0             ___wmul@multiplicand 000D  
                   __CFG_BORV$3 000000                    __CFG_CP0$OFF 000000                    __CFG_CP1$OFF 000000  
keypad_to_value_int2@port_value 0007                    __CFG_CP2$OFF 000000                    __CFG_CP3$OFF 000000  
                           l120 1754                             l123 180A                             l220 0C90  
                           l124 1808                             l222 0CF2                             l206 0AF4  
                           l126 181C                             l145 1400                             l180 0F92  
                           l236 071A                             l262 17E0                             l183 0FD4  
                           l192 151A                             l185 100E                             l249 0A1E  
                           l258 145A                             l259 1462                             l197 0A56  
                           l199 0A5E                             l961 0E7A                             l964 0E82  
                           l973 171E                             l981 15BE                             l967 163E  
                           l987 16E6                    __CFG_CPB$OFF 000000                    __CFG_CPD$OFF 000000  
                           u660 17F8                             u661 17F4                             _pad 0F4E  
                           wreg 000FE8          ??_keypad_to_value_int0 0005          ??_keypad_to_value_int1 0005  
        ??_keypad_to_value_int2 0005                    __CFG_LVP$OFF 000000                    __CFG_WDT$OFF 000000  
                          l1002 0F4C                            l1010 1602                            l1020 181E  
                          l1031 14B8                            l1017 156C                            l1026 178A  
                          l1042 16AE                            l1036 14C0                            l2021 1724  
                          l2031 173A                            l2023 1728                            l2033 1744  
                          l2025 172C                            l1411 17FC                            l2035 174E  
                          l2027 172E                            l2019 1720                            l2301 17D8  
                          l2221 0E96                            l2037 1750                            l2029 1730  
                          l1407 17E2                            l2311 15B4                            l2223 0EA8  
                          l2039 1752                            l1409 17F8                            l2313 15B8  
                          l2305 156E                            l2401 0D0C                            l2225 0EB2  
                          l2233 15C0                            l2241 1756                            l2321 14E0  
                          l2307 1572                            l2403 0D10                            l2227 0ED0  
                          l2219 0E84                            l2235 15CC                            l2243 1762  
                          l2323 14EC                            l2251 1678                            l2331 0A20  
                          l2309 1586                            l2421 0DC6                            l2413 0D6C  
                          l2405 0D2C                            l2229 0F06                            l2237 15DE  
                          l2245 1766                            l2261 0F7E                            l2325 14F0  
                          l2317 14C2                            l2341 0A7C                            l2333 0A2E  
                          l2501 087C                            l2431 0E4C                            l2415 0D82  
                          l2407 0D62                            l2239 15E2                            l2247 177E  
                          l2271 0FE2                            l2263 0F8A                            l2255 0F4E  
                          l2327 14F6                            l2319 14D4                            l2351 0ABC  
                          l2343 0A9C                            l2335 0A30                            l2511 08F6  
                          l2433 0E5E                            l2425 0DFC                            l2417 0D8A  
                          l2409 0D66                            l2273 0FF6                            l2265 0F9E  
                          l2257 0F5C                            l2281 1604                            l2361 0B3A  
                          l2353 0AD8                            l2345 0AA4                            l2337 0A4A  
                          l2521 09A0                            l2513 0904                            l2505 0898  
                          l2441 064E                            l2601 135A                            l2419 0D92  
                          l2267 0FB2                            l2259 0F70                            l2291 14AC  
                          l2371 0BAA                            l2355 0AE8                            l2347 0AAE  
                          l2339 0A74                            l2531 09DC                            l2523 09AE  
                          l2515 0940                            l2507 08BC                            l2451 067E  
                          l2443 065C                            l2603 1366                            l2429 0E3A  
                          l2269 0FB6                            l2277 16B0                            l2285 1464  
                          l2381 0C4E                            l2373 0BB0                            l2365 0B74  
                          l2349 0AB4                            l2525 09C2                            l2509 08E0  
                          l2461 069C                            l2453 0690                            l2445 066C  
                          l2605 136A                            l2295 16E8                            l2391 0CB4  
                          l2383 0C68                            l2375 0BB6                            l2367 0B86  
                          l2359 0B28                            l2519 097C                            l2711 06DA  
                          l2447 0670                            l2535 09E8                            l2439 062A  
                          l2551 1418                            l2607 137A                            l2713 0DB0  
                          l2289 149A                            l2393 0CCA                            l2385 0C82  
                          l2369 0B9A                            l2377 0C14                            l2537 0A0C  
                          l2529 09CE                            l2481 074E                            l2473 06B4  
                          l2465 06A2                            l2457 0696                            l2449 067C  
                          l2553 143E                            l2561 153E                            l2609 137E  
                          l2299 17BC                            l2387 0C9E                            l2379 0C30  
                          l2491 07CE                            l2483 0784                            l2475 0708  
                          l2547 1402                            l2563 155A                            l2555 151C  
                          l1931 1818                            l2571 12E8                            l2397 0CF4  
                          l2389 0CA4                            l2485 0792                            l2477 0728  
                          l2469 06A8                            l2549 140A                            l2557 152E  
                          l2581 132E                            l2573 12EA                            l2399 0D08  
                          l2495 0814                            l2487 07A0                            l2479 072A  
                          l2559 1536                            l2567 178C                            l2591 1338  
                          l2583 1330                            l2575 1300                            l2489 07C0  
                          l2497 0826                            l1929 1804                            l1953 138A  
                          l2569 17AE                            l2593 133A                            l2585 1332  
                          l2577 1308                            l2499 084A                            l1955 1392  
                          l2595 133C                            l2587 1334                            l2579 132C  
                          l1957 13C2                            l2597 133E                            l2589 1336  
                          ?_pad 001B                            l1959 13C4                            l2599 1340  
                          STR_1 0613                            u2000 0D62                            u2001 0D5E  
                          u2010 0D7E                            u2011 0D7A                            u2020 0E34  
                          u2100 0792                            u2021 0E2E                            u2101 078E  
                          u2030 0E36                            u2110 080E                            u2111 0808  
                          u2040 0E4C                            u2120 0810                            u2200 137A  
                          u2041 0E48                            u2201 1376                            u2050 0E5E  
                          u2130 0826                            u1410 1818                            u2051 0E5A  
                          u2131 0822                            u1411 1814                            u2140 084A  
                          u2060 064E                            u2141 0846                            u2061 064A  
                          u2150 08BC                            u2070 071A                            u1430 13BE  
                          _LATB 000F8A                            u2151 08B8                            u2071 0716  
                          u1600 0ED0                            u2160 08E0                            u2080 0728  
                          u1440 13F0                            u1601 0ECC                            u2161 08DC  
                          u2081 0724                            u2217 134C                            u1610 0F06  
                          u2170 09A0                            u2090 074E                            u1450 1400  
                          u1611 0F02                            u2171 099C                            u2091 074A  
                          u1451 13FC                            u1620 1602                            u1700 16E0  
                          u2180 145A                            u1621 15FE                            u1701 16DA  
                          u2181 1456                            u1437 13B4                            u1630 177E  
                          u1710 16E2                            u2190 1300                            u1631 177A  
                          u1447 13E6                            u2191 12FC                            u1800 15B4  
                          u1720 1638                            u1640 16A8                            u1801 15B0  
                          u1721 1632                            u1641 16A2                            u1465 1738  
                          u1810 14D4                            u1730 163A                            u1650 16AA  
                          u1466 173A                            u1811 14D0                            u1475 1742  
                          u1580 0E96                            u1660 0F5C                            u1740 1494  
                          u1900 0B70                            u1820 0A2E                            u1476 1744  
                          u1581 0E92                            u1661 0F58                            u1741 148E  
                          u1821 0A2A                            u1485 174C                            u1590 0EA8  
                          u1670 0F7E                            u1750 1496                            u1910 0B86  
                          u1830 0A4A                            u1486 174E                            u1591 0EA4  
                          u1671 0F7A                            u1911 0B82                            u1831 0A46  
                          u1680 0FD4                            u1760 14AC                            u1920 0BEE  
                          u1840 0A74                            u1681 0FD0                            u1761 14A8  
                          u1841 0A70                            u1770 1718                            u1690 0FE2  
                          u1930 0C30                            u1850 0AD8                            u1771 1712  
                          u1691 0FDE                            u1931 0C2C                            u1851 0AD4  
                          u1780 171A                            u1940 0C4E                            u1860 0B22  
                          u1941 0C4A                            u1925 0BDC                            u1861 0B1C  
                          u1790 1586                            u1950 0C68                            u1870 0B24  
                          u1791 1582                            u1951 0C64                            u1960 0C82  
                          u1880 0B3A                            u1961 0C7E                            u1881 0B36  
                          u1970 0C90                            u1890 0B6E                            u1971 0C8C  
                          u1891 0B68                            u1980 0C9E                            u1981 0C9A  
                          u1990 0D2C                            u1991 0D28                            i2l47 12E6  
                          i1l95 0022                            i2l56 1234                            i2l65 1182  
                          i2l90 10C6                            i2l86 1046                            _dbuf 0082  
                          _atoi 0CF4                            _ctoa 14C2                            _main 12E8  
                          _prec 006C                            _nout 0080                            pad@i 0022  
                          pad@p 001F                            fsr1h 000FE2                            fsr2h 000FDA  
                          indf1 000FE7                            indf2 000FDF                            fsr1l 000FE1  
                          pad@w 0024                            fsr2l 000FD9                            btemp 0074  
                          _xtoa 0A20                            prodh 000FF4                            prodl 000FF3  
                          start 002A                   __CFG_IESO$OFF 000000                   __CFG_MCLRE$ON 000000  
                  ___param_bank 000000                           ??_pad 0021                           ?_atoi 0012  
                         ?_ctoa 0026                           ?_main 0001                           ?_xtoa 0026  
                         _RCREG 000FAE                    vfpfcnvrt@fmt 004F                    vfpfcnvrt@llu 0057  
                         _SPBRG 000FAF                           _PORTB 000F81                           _TRISB 000F93  
                         _TXREG 000FAD                   __CFG_PWRT$OFF 000000                   __CFG_WRT0$OFF 000000  
                 __CFG_WRT1$OFF 000000                   __CFG_WRT2$OFF 000000                   __CFG_WRT3$OFF 000000  
                __CFG_EBTR0$OFF 000000                  __CFG_FCMEN$OFF 000000                  __CFG_EBTR1$OFF 000000  
                __CFG_EBTR2$OFF 000000                  __CFG_EBTR3$OFF 000000                   __CFG_WRTB$OFF 000000  
                 __CFG_WRTC$OFF 000000                   __CFG_WRTD$OFF 000000                  __CFG_EBTRB$OFF 000000  
                         _flags 006E                    ?_keypad_read 0001                           _fputc 0E84  
               __end_of_isalpha 1640                           _fputs 15C0                 __end_of_isdigit 1720  
                         atoi@n 001F                           pad@fp 001B                           atoi@s 0012  
                         _width 006A                           ctoa@c 0028                           _putch 181E  
                         ctoa@w 0029                 __end_of_islower 16B0                 __end_of_isspace 15C0  
               __end_of_low_isr 002A                  __CFG_BOREN$OFF 000000                 __end_of_isupper 16E8  
                         tablat 000FF5                           ttemp5 0075                           ttemp6 0078  
                         ttemp7 007C                           status 000FD8                           wtemp8 0075  
               __end_of_sprintf 156E                           xtoa@c 004B                           xtoa@d 0028  
                         xtoa@i 0049                           xtoa@n 0041                           xtoa@p 003D  
                         xtoa@w 003F                           xtoa@x 0030        __end_of_keypad_line_scan 1802  
               __end_of_toupper 14C2                    _toupper$1256 0017                 __initialization 1640  
                  __end_of_atoi 0E84                    __end_of_ctoa 151C                    __end_of_main 138A  
                  __end_of_xtoa 0CF4                          ??_atoi 0014                          ??_ctoa 0029  
                        ??_main 00CF                          ??_xtoa 0031                   __activetblptr 000002  
                        ?_fputc 000B                          ?_fputs 0014                          ?_putch 0001  
                        i1l1563 001E                          i2l2001 10F4                          i2l2003 1110  
                        i2l2005 112C                          i2l2101 109A                          i2l2103 10A8  
                        i2l2009 1148                          i2l2105 10BE                          i2l2107 10C2  
                        i2l2109 10C4                          i2l2081 101A                          i2l2091 106E  
                        i2l2083 102A                          i2l2093 1070                          i2l2085 1038  
                        i2l2095 107E                          i2l2087 1054                          i2l2097 1094  
                        i2l2089 106A                          i2l2099 1098                          i2l2715 115C  
                        i2l2717 120E                          i2l2719 12C0                          i2l1961 1238  
                        i2l1963 123C                          i2l1965 1258                          i2l1973 12AC  
                        i2l1981 118A                          i2l1967 1274                          i2l1983 11A6  
                        i2l1991 11FA                          i2l1969 1290                          i2l1985 11C2  
                        i2l1987 11DE                          i2l1979 1186                          i2l1997 10D4  
                        i2l1999 10D8                   vfpfcnvrt@done 005F                          _SPBRGH 000FB0  
                __CFG_XINST$OFF 000000                    vfprintf@cfmt 00BB                __end_of_high_isr 10D2  
                        ___wmul 17BC                  __CFG_STVREN$ON 000000                          clear_0 1658  
                        clear_1 1664                          pad@buf 001D                          ctoa@fp 0026  
                        _strlen 1756                          fputc@c 000B                          fputs@c 0018  
                        fputs@i 0019                    __pdataCOMRAM 0073                          fputs@s 0014  
                     ??_isalpha 000D                       ??_isdigit 000D                       ??_islower 000D  
                  __mediumconst 0000                       ??_isspace 000D                       ??_low_isr 000A  
                        tblptrh 000FF7                       ??_isupper 000D                          tblptrl 000FF6  
                        tblptru 000FF8                          putch@c 0001                __end_of_vfprintf 1464  
                     ??_sprintf 006A                          xtoa@fp 0026                       ??_toupper 0013  
                    __accesstop 0080         __end_of__initialization 166A                 __CFG_PBADEN$OFF 000000  
                 ___rparam_used 000001                  __pcstackCOMRAM 0001                   __end_of_fputc 0F4E  
                 __end_of_fputs 1604                   __end_of_putch 1820               ?_uart_send_string 000C  
            ??_uart_send_string 000E                         ??_fputc 000F                         ??_fputs 0018  
                       ??_putch 000B                      __pbssBANK0 0080            __size_of_keypad_read 0030  
                       ?___wmul 000B                         ?_strlen 000B              __size_of_uart_init 0036  
            __size_of_uart_send 001C              __size_of_vfpfcnvrt 03F6                       ?_high_isr 0001  
 __size_of_keypad_to_value_int0 00B2   __size_of_keypad_to_value_int1 00B2   __size_of_keypad_to_value_int2 00B2  
             ?_keypad_line_scan 0001                         __Hparam 0000                         __Lparam 0000  
            ??_keypad_line_scan 000B                 __size_of___wmul 0026                       ?_vfprintf 0064  
                  __psmallconst 0600                         __pcinit 1640                         __ramtop 0600  
                       __ptext0 12E8                         __ptext1 1720                         __ptext2 178C  
                       __ptext3 138A                         __ptext4 1802                         __ptext5 151C  
                       __ptext6 1402                         __ptext7 062A                         __ptext8 0A20  
                       __ptext9 1464                 __size_of_strlen 0036               uart_send_string@c 000C  
             uart_send_string@i 0010                         _key_isr 0070                    __size_of_pad 00C2  
                       _isalpha 1604                         _isdigit 16E8                         _islower 1678  
                       _isspace 156E                         _low_isr 0018                         _isupper 16B0  
                       atoi@neg 0018                         _sprintf 151C                      ??_high_isr 0008  
                __pintcode_body 1010                         _toupper 1464            end_of_initialization 166A  
                       fputc@fp 000D                   __Lmediumconst 0000                         int_func 1010  
                       fputs@fp 0016               __end_of_uart_init 1756               __end_of_uart_send 181E  
              uart_init@gen_reg 000B               __end_of_vfpfcnvrt 0A20                       _RCSTAbits 000FAB  
                       postdec2 000FDD                         postinc0 000FEE                         postinc1 000FE6  
                       postinc2 000FDE                      ??_vfprintf 006A                         strlen@a 000D  
                       strlen@s 000B                       _TRISCbits 000F94           __end_of_program_start 0613  
                     _TXSTAbits 000FAC                     vfpfcnvrt@ap 0051                     vfpfcnvrt@fp 004D  
                __end_of___wmul 17E2                     _BAUDCONbits 000FB8                   __pidataCOMRAM 1820  
                __end_of_strlen 178C             start_initialization 1640                     __end_of_pad 1010  
     __size_of_uart_send_string 0078                __CFG_OSC$INTIO67 000000                     vfprintf@fmt 0066  
                      ??___wmul 000F                __CFG_LPT1OSC$OFF 000000                        ??_strlen 000D  
                   __pbssCOMRAM 006A                   __pcstackBANK0 00BB                   ??_keypad_read 006A  
             __size_of_high_isr 10CA                       _atoi$1153 001A                       _atoi$1154 001E  
                     _atoi$1155 001C               __CFG_CCP2MX$PORTC 000000                       __pintcode 0008  
  __end_of_keypad_to_value_int0 12E8    __end_of_keypad_to_value_int1 1236    __end_of_keypad_to_value_int2 1184  
                   __pintcodelo 0018               __size_of_vfprintf 0062       __size_of_keypad_line_scan 0020  
                   __smallconst 0600                        ?_isalpha 000B                        ?_isdigit 000B  
                      ?_islower 000B                        ?_isspace 000B                        ?_low_isr 0001  
                      ?_isupper 000B                        ?_sprintf 00BD                       _key_value 0072  
                __size_of_fputc 00CA                  __size_of_fputs 0044                        ?_toupper 0011  
                __size_of_putch 0002                  ___wmul@product 000F             __end_of_keypad_read 17BC  
                      _IPR1bits 000F9F                        _PIE1bits 000F9D                        i2u151_40 102A  
                      i2u151_41 1026                        i2u152_40 1038                        i2u152_41 1034  
                      i2u153_40 1046                        i2u153_41 1042                        i2u154_40 1054  
                      i2u154_41 1050                        i2u155_40 107E                        i2u155_41 107A  
                      i2u156_40 10A8                        i2u156_41 10A4                __CFG_WDTPS$32768 000000  
                     _uart_init 1720                       _uart_send 1802                      uart_send@c 000B  
                     _vfpfcnvrt 062A               ___wmul@multiplier 000B                    _isspace$1180 0011  
                    vfpfcnvrt@c 0063                     _INTCON2bits 000FF1                     _INTCON3bits 000FF0  
              _uart_send_string 138A                        __Hrparam 0000                      vfprintf@ap 0068  
                      __Lrparam 0000                      vfprintf@fp 0064                      ?_uart_init 000B  
                    ?_uart_send 0001                      ?_vfpfcnvrt 004D                      sprintf@fmt 00BF  
              __size_of_isalpha 003C                __size_of_isdigit 0038                __size_of_islower 0038  
              __size_of_isspace 0052                __size_of_low_isr 0012                        __ptext10 1678  
                      __ptext11 16B0                        __ptext20 156E                        __ptext12 1604  
                      __ptext21 16E8                        __ptext13 14C2                        __ptext22 17BC  
                      __ptext14 0F4E                        __ptext23 17E2                        __ptext15 1756  
                      __ptext16 15C0                        __ptext17 0E84                        __ptext26 10D2  
                      __ptext18 181E                        __ptext27 1184                        __ptext19 0CF4  
                      __ptext28 1236                __size_of_isupper 0038                     _keypad_read 178C  
                      _high_isr 0008          keypad_line_scan@k_scan 0073                __size_of_sprintf 0052  
          _keypad_to_value_int0 1236            _keypad_to_value_int1 1184            _keypad_to_value_int2 10D2  
              __size_of_toupper 005E                        _key_char 0071                   __size_of_atoi 0190  
                 __size_of_ctoa 005A                   __size_of_main 00A2                   __size_of_xtoa 02D4  
                uart_init@brg16 0011                        int$flags 0074                        _xtoa$682 0039  
                      _xtoa$683 003B                        _vfprintf 1402                _keypad_line_scan 17E2  
                    _INTCONbits 000FF2                        isalpha@c 000B                        isdigit@c 000B  
         ?_keypad_to_value_int0 0001           ?_keypad_to_value_int1 0001           ?_keypad_to_value_int2 0001  
                      intlevel1 0000                        intlevel2 0000                       sprintf@ap 00C7  
                      islower@c 000B                        isspace@c 000B                        isupper@c 000B  
keypad_to_value_int0@value_char 0003                      _OSCCONbits 000FD3                   uart_init@brgh 000F  
                 uart_init@sync 000D                     ??_uart_init 0013                     ??_uart_send 000B  
                   ??_vfpfcnvrt 0053                   _vfpfcnvrt$697 0061  keypad_to_value_int0@port_value 0007  
                      sprintf@f 00C9                        sprintf@s 00BD  keypad_to_value_int1@value_char 0003  
                  _print_buffer 00A2                        toupper@c 0011                   _program_start 0601  
keypad_to_value_int1@port_value 0007       keypad_to_value_int0@value 0001       keypad_to_value_int1@value 0001  
     keypad_to_value_int2@value 0001  keypad_to_value_int2@value_char 0003  
